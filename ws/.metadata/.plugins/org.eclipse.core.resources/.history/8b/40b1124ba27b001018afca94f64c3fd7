/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Aug 5, 2025
 *      Author: micom
 */

#include "stm32f407xx_gpio_driver.h"


/*********************************************************
 * @fn          - GPIO_PeriClockControl
 * @brief       - Enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]   pGPIOx   - Base address of the GPIO peripheral
 * @param[in]   EnOrDi   - ENABLE or DISABLE macros
 *
 * @return      - none
 *
 * @note        - Make sure to enable the clock before accessing GPIO registers
 *********************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
	if (EnOrDi == ENABLE)
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_PCLK_EN();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_EN();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_EN();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_EN();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_EN();
		}
		else if (pGPIOx == GPIOG)
		{
			GPIOG_PCLK_EN();
		}
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_EN();
		}
	}
	else
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_PCLK_DI();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_DI();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_DI();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_DI();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_DI();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_DI();
		}
		else if (pGPIOx == GPIOG)
		{
			GPIOG_PCLK_DI();
		}
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}



/*********************************************************
 * @fn          - GPIO_Init
 * @brief       - Initializes the GPIO pin with specified settings
 *
 * @param[in]   pGPIOHandle - Pointer to GPIO handle structure
 *
 * @return      - none
 *
 * @note        - Must enable the peripheral clock before initialization
 *********************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	//ENABLE peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);

	uint32_t temp=0;

	//1. Configure mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
		pGPIOHandle->pGPIOx->MODER |= temp;
	}else{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
			//1. CONFIGURE FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
			//CLEAR the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
			//CLEAR the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );

		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
		SYSCFG_PCLK_EN();
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
	}
	temp = 0;

	//2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;

	temp=0;

	//3. Configure pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
	pGPIOHandle->pGPIOx->PUPDR |= temp;

	temp=0;

	//4. configure optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
	pGPIOHandle->pGPIOx->OTYPER |= temp;

	//5. configure alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2 ) ); //clearing
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2));
	}
}


/*********************************************************
 * @fn          - GPIO_DeInit
 * @brief       - Resets the GPIO peripheral registers
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 *
 * @return      - none
 *
 * @note        - Uses RCC reset registers to reset GPIOx peripheral
 *********************************************************/
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
	if (pGPIOx == GPIOA)
		{
			GPIOA_REG_RESET();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_REG_RESET();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_REG_RESET();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_REG_RESET();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_REG_RESET();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_REG_RESET();
		}
		else if (pGPIOx == GPIOG)
		{
			GPIOG_REG_RESET();
		}
		else if (pGPIOx == GPIOH)
		{
			GPIOH_REG_RESET();
		} else {
			/* Invalid base address or unsupported port */
		}
}


/*********************************************************
 * @fn          - GPIO_ReadFromInputPin
 * @brief       - Reads value from a specific input pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to read
 *
 * @return      - 0 or 1 (value at the pin)
 *
 * @note        - Reads the corresponding bit from IDR (Input Data Register)
 *********************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001 );
	return value;
}


/*********************************************************
 * @fn          - GPIO_ReadFromInputPort
 * @brief       - Reads value from entire input port
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 *
 * @return      - 16-bit value representing port state
 *
 * @note        - Reads entire IDR register at once
 *********************************************************/

uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR;
	return value;
}

/*********************************************************
 * @fn          - GPIO_WriteToOutputPin
 * @brief       - Writes a value to a specific output pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to write
 * @param[in]   Value      - 0 or 1 to write to the pin
 *
 * @return      - none
 *
 * @note        - Uses the BSRR or ODR register to write output
 *********************************************************/

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
	if(Value == GPIO_PIN_SET){
		// write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber );
	} else {
		// write 0
		pGPIOx->ODR &= ~( 1 << PinNumber );
	}

}


/*********************************************************
 * @fn          - GPIO_WriteToOutputPort
 * @brief       - Writes a value to the entire output port
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 * @param[in]   Value  - 16-bit value to be written to port
 *
 * @return      - none
 *
 * @note        - Overwrites all 16 bits of the ODR register
 *********************************************************/

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint8_t Value)
{
	pGPIOx->ODR = Value;
}


/*********************************************************
 * @fn          - GPIO_ToggleOutputPin
 * @brief       - Toggles the state of a specific output pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to toggle
 *
 * @return      - none
 *
 * @note        - Reads ODR and flips the bit for the pin
 *********************************************************/

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	pGPIOx->ODR ^= (1 << PinNumber );
}


/*********************************************************
 * @fn          - GPIO_IRQInterruptConfig
 * @brief       - Configures the interrupt for a given IRQ number
 *
 * @param[in]   IRQNumber   - IRQ number to configure
 * @param[in]   EnOrDi      - ENABLE or DISABLE macro
 *
 * @return      - none
 *
 * @note        - Sets registers in NVIC and possibly SYSCFG for EXTI mapping
 *********************************************************/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE){
		if(IRQNumber <= 31){
			// program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );

		}else if (IRQNumber > 31 && IRQNumber < 64){ // 32 to 63
			//program ISER1 register
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );

		}else if (IRQNumber >= 64 && IRQNumber < 96){ //64 to 95
			//program ISER2 register
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );

		}
	}else{
		if(IRQNumber <= 31){
			// program ICER0 register
			*NVIC_ICER0 |= ( 1 << IRQNumber );

		}else if(IRQNumber > 31 && IRQNumber < 64 ){
			// program ICER1 register
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );

		}else if(IRQNumber >= 6 && IRQNumber < 96 ){
			// program ICER2 register
			*NVIC_ICER3 |= ( 1 << IRQNumber % 64 );

		}
	}
}

/*********************************************************
 * @fn          - GPIO_IRQPriorityConfig
 * @brief       - Configures the interrupt for a given IRQ number
 *
 * @param[in]   IRQNumber   - IRQ number to configure
 * @param[in]   IRQPriority - Priority level of the interrupt
 *
 * @return      - none
 *
 * @note        - Sets registers in NVIC and possibly SYSCFG for EXTI mapping
 *********************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
	//1. Find IPR register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;

	uint8_t shift_amount = ( 8 * iprx_section ) + ( 8 - NO_PR_BITS_IMPLEMENTED );

	*(NVIC_PR_BASE_ADDR + iprx) |= ( IRQPriority << shift_amount);

}

/*********************************************************
 * @fn          - GPIO_IRQHandling
 * @brief       - Handles the interrupt for a given pin
 *
 * @param[in]   PinNumber - GPIO pin number associated with the IRQ
 *
 * @return      - none
 *
 * @note        - Clears the EXTI pending register bit for the pin
 *********************************************************/

void GPIO_IRQHandling(uint8_t PinNumber)
{
	//clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber)){
		// clear
		EXTI->PR |= ( 1 << PinNumber );
	}
}

