/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Aug 5, 2025
 *      Author: micom
 */

#include "stm32f407xx_gpio_driver.h"


/*********************************************************
 * @fn          - GPIO_PeriClockControl
 * @brief       - Enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]   pGPIOx   - Base address of the GPIO peripheral
 * @param[in]   EnorDi   - ENABLE or DISABLE macros
 *
 * @return      - none
 *
 * @note        - Make sure to enable the clock before accessing GPIO registers
 *********************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_PCLK_EN();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_EN();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_EN();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_EN();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_EN();
		}
		else if (pGPIOx == GPIOG)
		{
			GPIOG_PCLK_EN();
		}
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_EN();
		}
	}
	else
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_PCLK_DI();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_DI();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_DI();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_DI();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_DI();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_DI();
		}
		else if (pGPIOx == GPIOG)
		{
			GPIOG_PCLK_DI();
		}
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}



/*********************************************************
 * @fn          - GPIO_Init
 * @brief       - Initializes the GPIO pin with specified settings
 *
 * @param[in]   pGPIOHandle - Pointer to GPIO handle structure
 *
 * @return      - none
 *
 * @note        - Must enable the peripheral clock before initialization
 *********************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	uint32_t temp=0;
	//1. Configure mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
		pGPIOHandle->pGPIOx->MODER |= temp;
	}else{
		//this part will code later. ( interrupt mode)
	}
	temp = 0;

	//2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;

	temp=0;

	//3. Configure pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
	pGPIOHandle->pGPIOx->PUPDR |= temp;

	temp=0;

	//4. configure optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
	pGPIOHandle->pGPIOx->OTYPER |= temp;

	//5. configure alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2 ) ); //clearing
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2));
	}
}


/*********************************************************
 * @fn          - GPIO_DeInit
 * @brief       - Resets the GPIO peripheral registers
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 *
 * @return      - none
 *
 * @note        - Uses RCC reset registers to reset GPIOx peripheral
 *********************************************************/
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
	if (pGPIOx == GPIOA)
		{
			GPIOA_REG_RESET();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_REG_RESET();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_REG_RESET();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_REG_RESET();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_REG_RESET();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_REG_RESET();
		}
		else if (pGPIOx == GPIOG)
		{
			GPIOG_REG_RESET();
		}
		else if (pGPIOx == GPIOH)
		{
			GPIOH_REG_RESET();
		}
}


/*********************************************************
 * @fn          - GPIO_ReadFromInputPin
 * @brief       - Reads value from a specific input pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to read
 *
 * @return      - 0 or 1 (value at the pin)
 *
 * @note        - Reads the corresponding bit from IDR (Input Data Register)
 *********************************************************/
/*
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	return 0;
}
*/

/*********************************************************
 * @fn          - GPIO_ReadFromInputPort
 * @brief       - Reads value from entire input port
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 *
 * @return      - 16-bit value representing port state
 *
 * @note        - Reads entire IDR register at once
 *********************************************************/
/*
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{
	return 0;
}
*/

/*********************************************************
 * @fn          - GPIO_WriteToOutputPin
 * @brief       - Writes a value to a specific output pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to write
 * @param[in]   Value      - 0 or 1 to write to the pin
 *
 * @return      - none
 *
 * @note        - Uses the BSRR or ODR register to write output
 *********************************************************/
/*
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
	return 0;
}
*/

/*********************************************************
 * @fn          - GPIO_WriteToOutputPort
 * @brief       - Writes a value to the entire output port
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 * @param[in]   Value  - 16-bit value to be written to port
 *
 * @return      - none
 *
 * @note        - Overwrites all 16 bits of the ODR register
 *********************************************************/
/*
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint8_t Value)
{
	return 0;
}
*/

/*********************************************************
 * @fn          - GPIO_ToggleOutputPin
 * @brief       - Toggles the state of a specific output pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to toggle
 *
 * @return      - none
 *
 * @note        - Reads ODR and flips the bit for the pin
 *********************************************************/
/*
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	return 0;
}
*/

/*********************************************************
 * @fn          - GPIO_IRQConfig
 * @brief       - Configures the interrupt for a given IRQ number
 *
 * @param[in]   IRQNumber   - IRQ number to configure
 * @param[in]   IRQPriority - Priority level of the interrupt
 * @param[in]   EnorDi      - ENABLE or DISABLE macro
 *
 * @return      - none
 *
 * @note        - Sets registers in NVIC and possibly SYSCFG for EXTI mapping
 *********************************************************/
/*
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi)
{
	return 0;
}
*/

/*********************************************************
 * @fn          - GPIO_IRQHandling
 * @brief       - Handles the interrupt for a given pin
 *
 * @param[in]   PinNumber - GPIO pin number associated with the IRQ
 *
 * @return      - none
 *
 * @note        - Clears the EXTI pending register bit for the pin
 *********************************************************/
/*
void GPIO_IRQHandling(uint8_t PinNumber)
{
	return 0;
}
*/
