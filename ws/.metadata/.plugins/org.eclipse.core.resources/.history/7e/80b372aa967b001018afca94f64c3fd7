/*
 * stm32f407xx_spi_driver.h
 */

#ifndef INC_STM32F407XX_SPI_DRIVER_H_
#define INC_STM32F407XX_SPI_DRIVER_H_

#include "stm32f407xx.h"

/*
 *  Configuration structure for SPIx peripheral
 */
typedef struct
{
    uint8_t SPI_DeviceMode;     /*!< possible values from @SPI_DeviceMode */
    uint8_t SPI_BusConfig;      /*!< possible values from @SPI_BusConfig */
    uint8_t SPI_SclkSpeed;      /*!< possible values from @SPI_SclkSpeed */
    uint8_t SPI_DFF;    		/*!< possible values from @SPI_DFF */
    uint8_t SPI_CPOL;         	/*!< possible values from @SPI_CPOL */
    uint8_t SPI_CPHA;     		/*!< possible values from @SPI_CPHA*/
    uint8_t SPI_SSM;     		/*!< possible values from @SPI_SSM*/
} SPI_Config_t;
/*
 * Handle structure for SPIx peripheral
 */
typedef struct
{
	SPI_RegDef_t	*pSPIx;		/*!< This holds the base address of SPIx(x:0,1,2) peripherals*/
	SPI_Config_t	SPIConfig;
}SPI_Handle_t;

/*
 * @SPI_DeviceMode
 */
#define SPI_DEVICE_MODE_MASTER	1
#define SPI_DEVICE_MODE_SLAVE	0
/*
 * @SPI_BusConfig
 */
#define SPI_BUS_CONFIG_FD				1
#define SPI_BUS_CONFIG_HD				2
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY	3
/*
 * @SPI_SclkSpeed
 */
#define SPI_SCLK_SPEED_DIV2      0
#define SPI_SCLK_SPEED_DIV4      1
#define SPI_SCLK_SPEED_DIV8      2
#define SPI_SCLK_SPEED_DIV16     3
#define SPI_SCLK_SPEED_DIV32     4
#define SPI_SCLK_SPEED_DIV64     5
#define SPI_SCLK_SPEED_DIV128    6
#define SPI_SCLK_SPEED_DIV256    7

/*
 * @SPI_DFF
 * Data Frame Format
 */
#define SPI_DFF_8BITS    0
#define SPI_DFF_16BITS   1

/*
 * @SPI_CPOL
 * Clock Polarity
 */
#define SPI_CPOL_LOW     0    // Clock idle state = 0
#define SPI_CPOL_HIGH    1    // Clock idle state = 1

/*
 * @SPI_CPHA
 * Clock Phase
 */
#define SPI_CPHA_LOW     0    // Data captured on first edge
#define SPI_CPHA_HIGH    1    // Data captured on second edge

/*
 * @SPI_SSM
 * Software Slave Management
 */
#define SPI_SSM_EN       0    // Hardware slave management enabled
#define SPI_SSM_DI       1    // Software slave management enabled


/*
 * SPI related status flags definitions
 */
#define SPI_TXE_FLAG	(1 << SPI_SR_TXE)
#define SPI_RXNE_FLAG	(1 << SPI_SR_RXNE)
#define SPI_BUSY_FLAG	(1 << SPI_SR_BSY)

/*************************************************************
 * APIs Supported by This Driver
 * -----------------------------------------------------------
 * For more information about each API, refer to the function
 * definitions in the source file.
 *************************************************************/
/*
 * Peripheral Clock Setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);

/*
 * Init and De-Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);

/*
 * Data send and receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);

/*
 * IRQ Configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

/*
 * Other Peripheral Control APIs
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);

#endif /* INC_STM32F407XX_SPI_DRIVER_H_ */
