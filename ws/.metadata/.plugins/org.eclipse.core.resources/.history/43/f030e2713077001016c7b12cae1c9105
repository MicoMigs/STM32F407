/******************************************************************************
 * @file    stm32f407xx.h
 * @author  mico
 * @date    July 30, 2025
 * @brief   Device Header File for STM32F407xx Microcontroller
 *
 * @details
 * This file contains:
 *  - Base addresses of memory regions (FLASH, SRAM, ROM)
 *  - Base addresses of all AHBx and APBx buses
 *  - Peripheral base addresses for all GPIO, SPI, USART, I2C, etc.
 *  - Peripheral register structures (e.g., GPIO_RegDef_t, RCC_RegDef_t)
 *  - Macros for peripheral clock enable/disable operations
 *  - Type definitions for volatile access to peripheral registers
 *
 * Usage:
 *  - Include this file in your STM32F4 firmware projects to interface with
 *    low-level hardware features using direct register access.
 *  - Use the defined macros and structures to control GPIOs, RCC, USART,
 *    SPI, I2C, and other peripherals.
 *
 * Note:
 *  - All peripheral register structures and macros are specific to the
 *    STM32F407xx series and follow the reference manual.
 *  - `__vo` is defined as `volatile` for direct memory access to hardware.
 *
 ******************************************************************************/


#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

#include <stdint.h>

#define __vo volatile


/*
 * Memory base addresses
 */
#define FLASH_BASEADDR          0x08000000U // main memory
#define SRAM1_BASEADDR          0x20000000U // 112KB
#define SRAM2_BASEADDR          0x2001C000U // SRAM1 + 112KB
#define ROM_BASEADDR            0x1FFF0000U // system memory
#define SRAM_BASEADDR           SRAM1_BASEADDR

/*
 * Bus peripheral base addresses
 */
#define PERIPH_BASEADDR         0x40000000U
#define APB1_PERIPH_BASEADDR    PERIPH_BASEADDR
#define APB2_PERIPH_BASEADDR    0x40010000U
#define AHB1_PERIPH_BASEADDR    0x40020000U
#define AHB2_PERIPH_BASEADDR    0x50000000U

/*
 * AHB1 peripherals
 */
#define GPIOA_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x2000)
#define GPIOJ_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x2400)
#define GPIOK_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x2800)
#define RCC_BASEADDR   			(AHB1_PERIPH_BASEADDR +	0x3800)

#define CRC_BASEADDR            (AHB1_PERIPH_BASEADDR + 0x3000)
#define RCC_BASEADDR            (AHB1_PERIPH_BASEADDR + 0x3800)
#define FLASH_INTERFACE_BASEADDR (AHB1_PERIPH_BASEADDR + 0x3C00)
#define BKPSRAM_BASEADDR        (AHB1_PERIPH_BASEADDR + 0x4000)
#define DMA1_BASEADDR           (AHB1_PERIPH_BASEADDR + 0x6000)
#define DMA2_BASEADDR           (AHB1_PERIPH_BASEADDR + 0x6400)
#define ETHERNET_MAC_BASEADDR   (AHB1_PERIPH_BASEADDR + 0x8000)
#define DMA2D_BASEADDR          (AHB1_PERIPH_BASEADDR + 0xB000)
#define USB_OTG_HS_BASEADDR     0x40040000U

/*
 * AHB2 peripherals
 */
#define DCMI_BASEADDR           0x50050000U
#define CRYP_BASEADDR           0x50060000U
#define HASH_BASEADDR           0x50060400U
#define RNG_BASEADDR            0x50060800U
#define USB_OTG_FS_BASEADDR     0x50000000U

/*
 * APB1 peripherals
 */
#define TIM2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0000)
#define TIM3_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0400)
#define TIM4_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0800)
#define TIM5_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0C00)
#define TIM6_BASEADDR           (APB1_PERIPH_BASEADDR + 0x1000)
#define TIM7_BASEADDR           (APB1_PERIPH_BASEADDR + 0x1400)
#define TIM12_BASEADDR          (APB1_PERIPH_BASEADDR + 0x1800)
#define TIM13_BASEADDR          (APB1_PERIPH_BASEADDR + 0x1C00)
#define TIM14_BASEADDR          (APB1_PERIPH_BASEADDR + 0x2000)
#define RTC_BASEADDR            (APB1_PERIPH_BASEADDR + 0x2800)
#define WWDG_BASEADDR           (APB1_PERIPH_BASEADDR + 0x2C00)
#define IWDG_BASEADDR           (APB1_PERIPH_BASEADDR + 0x3000)
#define I2S2ext_BASEADDR        (APB1_PERIPH_BASEADDR + 0x3400)
#define SPI2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR           (APB1_PERIPH_BASEADDR + 0x3C00)
#define I2S3ext_BASEADDR        (APB1_PERIPH_BASEADDR + 0x4000)
#define USART2_BASEADDR         (APB1_PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR         (APB1_PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR          (APB1_PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR          (APB1_PERIPH_BASEADDR + 0x5000)
#define I2C1_BASEADDR           (APB1_PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR           (APB1_PERIPH_BASEADDR + 0x5C00)
#define CAN1_BASEADDR           (APB1_PERIPH_BASEADDR + 0x6400)
#define CAN2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x6800)
#define PWR_BASEADDR            (APB1_PERIPH_BASEADDR + 0x7000)
#define DAC_BASEADDR            (APB1_PERIPH_BASEADDR + 0x7400)
#define UART7_BASEADDR          (APB1_PERIPH_BASEADDR + 0x7800)
#define UART8_BASEADDR          (APB1_PERIPH_BASEADDR + 0x7C00)

/*
 * APB2 peripherals
 */
#define TIM1_BASEADDR           (APB2_PERIPH_BASEADDR + 0x0000)
#define TIM8_BASEADDR           (APB2_PERIPH_BASEADDR + 0x0400)
#define USART1_BASEADDR         (APB2_PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR         (APB2_PERIPH_BASEADDR + 0x1400)
#define ADC_BASEADDR            (APB2_PERIPH_BASEADDR + 0x2000)
#define SDIO_BASEADDR           (APB2_PERIPH_BASEADDR + 0x2C00)
#define SPI1_BASEADDR           (APB2_PERIPH_BASEADDR + 0x3000)
#define SPI4_BASEADDR           (APB2_PERIPH_BASEADDR + 0x3400)
#define SYSCFG_BASEADDR         (APB2_PERIPH_BASEADDR + 0x3800)
#define EXTI_BASEADDR           (APB2_PERIPH_BASEADDR + 0x3C00)
#define TIM9_BASEADDR           (APB2_PERIPH_BASEADDR + 0x4000)
#define TIM10_BASEADDR          (APB2_PERIPH_BASEADDR + 0x4400)
#define TIM11_BASEADDR          (APB2_PERIPH_BASEADDR + 0x4800)
#define SPI5_BASEADDR           (APB2_PERIPH_BASEADDR + 0x5000)
#define SPI6_BASEADDR           (APB2_PERIPH_BASEADDR + 0x5400)
#define SAI1_BASEADDR           (APB2_PERIPH_BASEADDR + 0x5800)
#define LTDC_BASEADDR           (APB2_PERIPH_BASEADDR + 0x6800)

/*************************Peripheral register definition structure for GPIO*************************/
/*
 * note: registers of a peripheral are specific to MCU
 * 		- Example: number of registers of SPI peripheral of stm32F4x family may be different
 * 		compared to number of register of SPI peripheral of STM32Lx, etc
 * 		Check device RM
 * 		- Go directly to register map
 * 		- must give volatile
 * 			-input data register
 * 				-example, for every AHB clock cycle, input data register will update
 */
typedef struct
{
	__vo uint32_t MODER;    /*!< GPIO port mode register, 				Address offset: 0x00*/
	__vo uint32_t OTYPER;   /*!< GPIO port output type register, 		Address offset: 0x04*/
	__vo uint32_t OSPEEDR;  /*!< GPIO port output speed register, 		Address offset: 0x08*/
	__vo uint32_t PUPDR;    /*!< GPIO port pull-up/pull-down register, 	Address offset: 0x0C*/
	__vo uint32_t IDR;      /*!< GPIO port input data register, 		Address offset: 0x10*/
	__vo uint32_t ODR;      /*!< GPIO port output data register, 		Address offset: 0x14*/
	__vo uint32_t BSRR;     /*!< GPIO port bit set/reset register, 		Address offset: 0x18*/
	__vo uint32_t LCKR;     /*!< GPIO port configuration lock register, Address offset: 0x1C*/
	__vo uint32_t AFR[2];   /*!< GPIO alternate function registers, 	Address offsets: 0x20-0x24*/

} GPIO_RegDef_t;

typedef struct
{
	__vo uint32_t CR;            /*!< RCC clock control register,                         Address offset: 0x00 */
	__vo uint32_t PLLCFGR;       /*!< RCC PLL configuration register,                     Address offset: 0x04 */
	__vo uint32_t CFGR;          /*!< RCC clock configuration register,                   Address offset: 0x08 */
	__vo uint32_t CIR;           /*!< RCC clock interrupt register,                       Address offset: 0x0C */
	__vo uint32_t AHB1RSTR;      /*!< RCC AHB1 peripheral reset register,                 Address offset: 0x10 */
	__vo uint32_t AHB2RSTR;      /*!< RCC AHB2 peripheral reset register,                 Address offset: 0x14 */
	__vo uint32_t AHB3RSTR;      /*!< RCC AHB3 peripheral reset register,                 Address offset: 0x18 */
	uint32_t      RESERVED0;     /*!< Reserved, 0x1C */
	__vo uint32_t APB1RSTR;      /*!< RCC APB1 peripheral reset register,                 Address offset: 0x20 */
	__vo uint32_t APB2RSTR;      /*!< RCC APB2 peripheral reset register,                 Address offset: 0x24 */
	uint32_t      RESERVED1[2];  /*!< Reserved, 0x28-0x2C */
	__vo uint32_t AHB1ENR;       /*!< RCC AHB1 peripheral clock enable register,          Address offset: 0x30 */
	__vo uint32_t AHB2ENR;       /*!< RCC AHB2 peripheral clock enable register,          Address offset: 0x34 */
	__vo uint32_t AHB3ENR;       /*!< RCC AHB3 peripheral clock enable register,          Address offset: 0x38 */
	uint32_t      RESERVED2;     /*!< Reserved, 0x3C */
	__vo uint32_t APB1ENR;       /*!< RCC APB1 peripheral clock enable register,          Address offset: 0x40 */
	__vo uint32_t APB2ENR;       /*!< RCC APB2 peripheral clock enable register,          Address offset: 0x44 */
	uint32_t      RESERVED3[2];  /*!< Reserved, 0x48-0x4C */
	__vo uint32_t AHB1LPENR;     /*!< RCC AHB1 peripheral clock enable in low power mode, Address offset: 0x50 */
	__vo uint32_t AHB2LPENR;     /*!< RCC AHB2 peripheral clock enable in low power mode, Address offset: 0x54 */
	__vo uint32_t AHB3LPENR;     /*!< RCC AHB3 peripheral clock enable in low power mode, Address offset: 0x58 */
	uint32_t      RESERVED4;     /*!< Reserved,                                           Address offset: 0x5C */
	__vo uint32_t APB1LPENR;     /*!< RCC APB1 peripheral clock enable in low power mode, Address offset: 0x60 */
	__vo uint32_t APB2LPENR;     /*!< RCC APB2 peripheral clock enable in low power mode, Address offset: 0x64 */
	uint32_t      RESERVED5[2];  /*!< Reserved, 0x68-0x6C */
	__vo uint32_t BDCR;          /*!< RCC Backup domain control register,                 Address offset: 0x70 */
	__vo uint32_t CSR;           /*!< RCC clock control & status register,                Address offset: 0x74 */
	uint32_t      RESERVED6[2];  /*!< Reserved, 0x78-0x7C */
	__vo uint32_t SSCGR;         /*!< RCC spread spectrum clock generation register,      Address offset: 0x80 */
	__vo uint32_t PLLI2SCFGR;    /*!< RCC PLLI2S configuration register,                  Address offset: 0x84 */
	__vo uint32_t PLLSAICFGR;    /*!< RCC PLLSAI configuration register,                  Address offset: 0x88 */
	__vo uint32_t DCKCFGR;       /*!< RCC Dedicated Clocks configuration register,        Address offset: 0x8C */

} RCC_RegDef_t;

/*
 * Peripheral register definition structure for EXTI
 */
typedef struct
{
	__vo uint32_t IMR;    /*!< Interrupt mask register,            Address offset: 0x00 */
	__vo uint32_t EMR;    /*!< Event mask register,                Address offset: 0x04 */
	__vo uint32_t RTSR;   /*!< Rising trigger selection register,  Address offset: 0x08 */
	__vo uint32_t FTSR;   /*!< Falling trigger selection register, Address offset: 0x0C */
	__vo uint32_t SWIER;  /*!< Software interrupt event register,  Address offset: 0x10 */
	__vo uint32_t PR;     /*!< Pending register (write 1 to clear),Address offset: 0x14 */
} EXTI_RegDef_t;


/* Peripheral register definition structure for SYSCFG */
typedef struct
{
    __vo uint32_t MEMRMP;      /*!< Memory remap register,              Address offset: 0x00 */
    __vo uint32_t PMC;         /*!< Peripheral mode configuration reg,  Address offset: 0x04 */
    __vo uint32_t EXTICR[4];   /*!< External interrupt config regs,     Address offset: 0x08-0x14 */
    uint32_t RESERVED1[2];     /*!< Reserved,                           Reserved: 0x18-0x1C */
    __vo uint32_t CMPCR;       /*!< Compensation cell control reg,      Address offset: 0x20 */
    uint32_t RESERVED2[2];	   /*!< Reserved, 							Reserved: 0x24-0x28 */
} SYSCFG_RegDef_t;



/*
 * peripheral definitions (peripheral base addresses type-casted to xxx_RegDef_t)
 */

#define GPIOA	((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB	((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC	((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD	((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE	((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF	((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG	((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH	((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI	((GPIO_RegDef_t*)GPIOI_BASEADDR)

#define RCC   	((RCC_RegDef_t*)RCC_BASEADDR)

#define EXTI	((EXTI_RegDef_t*)EXTI_BASEADDR)
/*
 * Clock Enable Macros for GPIOx peripherals
 */

#define GPIOA_PCLK_EN()		(RCC->AHB1ENR |= (1<<0))
#define GPIOB_PCLK_EN()		(RCC->AHB1ENR |= (1<<1))
#define GPIOC_PCLK_EN()		(RCC->AHB1ENR |= (1<<2))
#define GPIOD_PCLK_EN()		(RCC->AHB1ENR |= (1<<3))
#define GPIOE_PCLK_EN()		(RCC->AHB1ENR |= (1<<4))
#define GPIOF_PCLK_EN()		(RCC->AHB1ENR |= (1<<5))
#define GPIOG_PCLK_EN()		(RCC->AHB1ENR |= (1<<6))
#define GPIOH_PCLK_EN()		(RCC->AHB1ENR |= (1<<7))

/*
 * Clock Enable Macros for I2Cx peripherals
 */
#define I2C1_PLCK_EN()		(RCC->APB1ENR |= (1<<21))
#define I2C2_PLCK_EN()		(RCC->APB1ENR |= (1<<22))
#define I2C3_PLCK_EN()		(RCC->APB1ENR |= (1<<23))

/*
 * Clock Enable Macros for SPIx peripherals
 */
#define SPI1_PCLK_EN()		(RCC->APB2ENR |= (1<<12))
#define SPI2_PCLK_EN()		(RCC->APB1ENR |= (1<<14))
#define SPI3_PCLK_EN()		(RCC->APB1ENR |= (1<<15))
#define SPI4_PCLK_EN()		(RCC->APB2ENR |= (1<<13))

/*
 * Clock Enable Macros for USARTx peripherals
 */
#define USART1_PCLK_EN()	(RCC->APB2ENR |= (1<<4))
#define USART2_PCLK_EN()	(RCC->APB1ENR |= (1<<17))
#define USART3_PCLK_EN()	(RCC->APB1ENR |= (1<<18))
#define UART4_PCLK_EN()		(RCC->APB1ENR |= (1<<19))
#define UART5_PCLK_EN()		(RCC->APB1ENR |= (1<<20))
#define USART6_PCLK_EN()	(RCC->APB2ENR |= (1<<5))

/*
 * Clock Enable Macros for SYSCFG peripheral
 */
#define SYSCFG_PCLK_EN()	(RCC->APB2ENR |= (1<<14))


/*
 * Clock Disable Macros for GPIOx peripheral
 */
#define GPIOA_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<0))
#define GPIOB_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<1))
#define GPIOC_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<2))
#define GPIOD_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<3))
#define GPIOE_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<4))
#define GPIOF_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<5))
#define GPIOG_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<6))
#define GPIOH_PCLK_DI()		(RCC->AHB1ENR &= ~(1<<7))

/*
 * Clock Disable Macros for I2Cx peripheral
 */
#define I2C1_PCLK_DI()		(RCC->APB1ENR &= ~(1<<21))
#define I2C2_PCLK_DI()		(RCC->APB1ENR &= ~(1<<22))
#define I2C3_PCLK_DI()		(RCC->APB1ENR &= ~(1<<23))

/*
 * Clock Disable Macros for SPIx peripherals
 */
#define SPI1_PCLK_DI()		(RCC->APB2ENR &= ~(1<<12))
#define SPI2_PCLK_DI()		(RCC->APB1ENR &= ~(1<<14))
#define SPI3_PCLK_DI()		(RCC->APB1ENR &= ~(1<<15))
#define SPI4_PCLK_DI()		(RCC->APB2ENR &= ~(1<<13))

/*
 * Clock Disable Macros for USARTx peripherals
 */
#define USART1_PCLK_DI()	(RCC->APB2ENR &= ~(1<<4))
#define USART2_PCLK_DI()	(RCC->APB1ENR &= ~(1<<17))
#define USART3_PCLK_DI()	(RCC->APB1ENR &= ~(1<<18))
#define UART4_PCLK_DI()		(RCC->APB1ENR &= ~(1<<19))
#define UART5_PCLK_DI()		(RCC->APB1ENR &= ~(1<<20))
#define USART6_PCLK_DI()	(RCC->APB2ENR &= ~(1<<5))

/*
 * Clock Disable Macros for SYSCFG peripheral
 */
#define SYSCFG_PCLK_DI()	(RCC->APB2ENR &= ~(1<<14))

/*
 * Macros to reset GPIOx peripherals
 */
#define GPIOA_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 0)); (RCC->AHB1RSTR &= ~(1<<0)); }while(0)
#define GPIOB_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 1)); (RCC->AHB1RSTR &= ~(1<<1)); }while(0)
#define GPIOC_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 2)); (RCC->AHB1RSTR &= ~(1<<2)); }while(0)
#define GPIOD_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 3)); (RCC->AHB1RSTR &= ~(1<<3)); }while(0)
#define GPIOE_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 4)); (RCC->AHB1RSTR &= ~(1<<4)); }while(0)
#define GPIOF_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 5)); (RCC->AHB1RSTR &= ~(1<<5)); }while(0)
#define GPIOG_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 6)); (RCC->AHB1RSTR &= ~(1<<6)); }while(0)
#define GPIOH_REG_RESET()	do{ (RCC->AHB1RSTR |= (1 << 7)); (RCC->AHB1RSTR &= ~(1<<7)); }while(0)

/*
 * Generic Macros
 */
#define ENABLE 			1
#define DISABLE			0
#define SET 			ENABLE
#define RESET 			DISABLE
#define	GPIO_PIN_SET	SET
#define GPIO_PIN_RESET	RESET

#include "stm32f407xx_gpio_driver.h"

#endif /* INC_STM32F407XX_H_ */
