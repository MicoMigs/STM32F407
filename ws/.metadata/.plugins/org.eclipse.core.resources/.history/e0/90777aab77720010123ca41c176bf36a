/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Aug 5, 2025
 *      Author: micom
 */

#include "stm32f407xx_gpio_driver.h"


/*********************************************************
 * @fn          - GPIO_PeriClockControl
 * @brief       - Enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]   pGPIOx   - Base address of the GPIO peripheral
 * @param[in]   EnorDi   - ENABLE or DISABLE macros
 *
 * @return      - none
 *
 * @note        - Make sure to enable the clock before accessing GPIO registers
 *********************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
	/* Look up table equivalent of:
	 * if (EnorDi == ENABLE)
	 * {
	 * 	if (pGPIOx == GPIOA)
	 * 	{
	 * 		GPIOA_PCLK_EN();
	 * 	}...
	 */
	// Arrays for GPIO base addresses and their corresponding clock control functions
	GPIO_RegDef_t *GPIOx_base_addrs[] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH, GPIOI};

	void (*clk_enable[])(void) = {
		GPIOA_PCLK_EN,
		GPIOB_PCLK_EN,
		GPIOC_PCLK_EN,
		GPIOD_PCLK_EN,
		GPIOE_PCLK_EN,
		GPIOF_PCLK_EN,
		GPIOG_PCLK_EN,
		GPIOH_PCLK_EN,
		GPIOI_PCLK_EN
	};

	void (*clk_disable[])(void) = {
		GPIOA_PCLK_DI,
		GPIOB_PCLK_DI,
		GPIOC_PCLK_DI,
		GPIOD_PCLK_DI,
		GPIOE_PCLK_DI,
		GPIOF_PCLK_DI,
		GPIOG_PCLK_DI,
		GPIOH_PCLK_DI,
		GPIOI_PCLK_DI
	};

	// Find the index of the GPIO port
	for (uint8_t i = 0; i < 9; i++)
	{
		if (pGPIOx == GPIOx_base_addrs[i])
		{
			if (EnorDi == ENABLE)
				clk_enable[i]();
			else
				clk_disable[i]();
			break;
		}
	}
}


/*********************************************************
 * @fn          - GPIO_Init
 * @brief       - Initializes the GPIO pin with specified settings
 *
 * @param[in]   pGPIOHandle - Pointer to GPIO handle structure
 *
 * @return      - none
 *
 * @note        - Must enable the peripheral clock before initialization
 *********************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_DeInit
 * @brief       - Resets the GPIO peripheral registers
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 *
 * @return      - none
 *
 * @note        - Uses RCC reset registers to reset GPIOx peripheral
 *********************************************************/
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_ReadFromInputPin
 * @brief       - Reads value from a specific input pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to read
 *
 * @return      - 0 or 1 (value at the pin)
 *
 * @note        - Reads the corresponding bit from IDR (Input Data Register)
 *********************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_ReadFromInputPort
 * @brief       - Reads value from entire input port
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 *
 * @return      - 16-bit value representing port state
 *
 * @note        - Reads entire IDR register at once
 *********************************************************/
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_WriteToOutputPin
 * @brief       - Writes a value to a specific output pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to write
 * @param[in]   Value      - 0 or 1 to write to the pin
 *
 * @return      - none
 *
 * @note        - Uses the BSRR or ODR register to write output
 *********************************************************/
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_WriteToOutputPort
 * @brief       - Writes a value to the entire output port
 *
 * @param[in]   pGPIOx - Base address of the GPIO peripheral
 * @param[in]   Value  - 16-bit value to be written to port
 *
 * @return      - none
 *
 * @note        - Overwrites all 16 bits of the ODR register
 *********************************************************/
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint8_t Value)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_ToggleOutputPin
 * @brief       - Toggles the state of a specific output pin
 *
 * @param[in]   pGPIOx     - Base address of the GPIO peripheral
 * @param[in]   PinNumber  - GPIO pin number to toggle
 *
 * @return      - none
 *
 * @note        - Reads ODR and flips the bit for the pin
 *********************************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_IRQConfig
 * @brief       - Configures the interrupt for a given IRQ number
 *
 * @param[in]   IRQNumber   - IRQ number to configure
 * @param[in]   IRQPriority - Priority level of the interrupt
 * @param[in]   EnorDi      - ENABLE or DISABLE macro
 *
 * @return      - none
 *
 * @note        - Sets registers in NVIC and possibly SYSCFG for EXTI mapping
 *********************************************************/
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi)
{
	return 0;
}


/*********************************************************
 * @fn          - GPIO_IRQHandling
 * @brief       - Handles the interrupt for a given pin
 *
 * @param[in]   PinNumber - GPIO pin number associated with the IRQ
 *
 * @return      - none
 *
 * @note        - Clears the EXTI pending register bit for the pin
 *********************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
	return 0;
}

