
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000860  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009e8  080009f0  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009e8  080009e8  000019f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009e8  080009e8  000019f0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009e8  080009f0  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009e8  080009e8  000019e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009ec  080009ec  000019ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000019f0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a05  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002dc  00000000  00000000  00002425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00002708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000086  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015ac  00000000  00000000  0000284e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f07  00000000  00000000  00003dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005f66  00000000  00000000  00004d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ac67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000240  00000000  00000000  0000acac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0000aeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009d0 	.word	0x080009d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080009d0 	.word	0x080009d0

080001c8 <GPIO_PeriClockControl>:
 * @return      - none
 *
 * @note        - Make sure to enable the clock before accessing GPIO registers
 *********************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d157      	bne.n	800028a <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a59      	ldr	r2, [pc, #356]	@ (8000344 <GPIO_PeriClockControl+0x17c>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d106      	bne.n	80001f0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001e2:	4b59      	ldr	r3, [pc, #356]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a58      	ldr	r2, [pc, #352]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80001ee:	e0a3      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a56      	ldr	r2, [pc, #344]	@ (800034c <GPIO_PeriClockControl+0x184>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80001f8:	4b53      	ldr	r3, [pc, #332]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a52      	ldr	r2, [pc, #328]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000204:	e098      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a51      	ldr	r2, [pc, #324]	@ (8000350 <GPIO_PeriClockControl+0x188>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800020e:	4b4e      	ldr	r3, [pc, #312]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000212:	4a4d      	ldr	r2, [pc, #308]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800021a:	e08d      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a4d      	ldr	r2, [pc, #308]	@ (8000354 <GPIO_PeriClockControl+0x18c>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000224:	4b48      	ldr	r3, [pc, #288]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000228:	4a47      	ldr	r2, [pc, #284]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000230:	e082      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a48      	ldr	r2, [pc, #288]	@ (8000358 <GPIO_PeriClockControl+0x190>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800023a:	4b43      	ldr	r3, [pc, #268]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a42      	ldr	r2, [pc, #264]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000246:	e077      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a44      	ldr	r2, [pc, #272]	@ (800035c <GPIO_PeriClockControl+0x194>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000250:	4b3d      	ldr	r3, [pc, #244]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000254:	4a3c      	ldr	r2, [pc, #240]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800025c:	e06c      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a3f      	ldr	r2, [pc, #252]	@ (8000360 <GPIO_PeriClockControl+0x198>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000266:	4b38      	ldr	r3, [pc, #224]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026a:	4a37      	ldr	r2, [pc, #220]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000270:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000272:	e061      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a3b      	ldr	r2, [pc, #236]	@ (8000364 <GPIO_PeriClockControl+0x19c>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d15d      	bne.n	8000338 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800027c:	4b32      	ldr	r3, [pc, #200]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a31      	ldr	r2, [pc, #196]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000288:	e056      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a2d      	ldr	r2, [pc, #180]	@ (8000344 <GPIO_PeriClockControl+0x17c>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000292:	4b2d      	ldr	r3, [pc, #180]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a2c      	ldr	r2, [pc, #176]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000298:	f023 0301 	bic.w	r3, r3, #1
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800029e:	e04b      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a2a      	ldr	r2, [pc, #168]	@ (800034c <GPIO_PeriClockControl+0x184>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002a8:	4b27      	ldr	r3, [pc, #156]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a26      	ldr	r2, [pc, #152]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002ae:	f023 0302 	bic.w	r3, r3, #2
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002b4:	e040      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a25      	ldr	r2, [pc, #148]	@ (8000350 <GPIO_PeriClockControl+0x188>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002be:	4b22      	ldr	r3, [pc, #136]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a21      	ldr	r2, [pc, #132]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002c4:	f023 0304 	bic.w	r3, r3, #4
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ca:	e035      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a21      	ldr	r2, [pc, #132]	@ (8000354 <GPIO_PeriClockControl+0x18c>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80002d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002da:	f023 0308 	bic.w	r3, r3, #8
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e0:	e02a      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000358 <GPIO_PeriClockControl+0x190>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80002ea:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ee:	4a16      	ldr	r2, [pc, #88]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 80002f0:	f023 0310 	bic.w	r3, r3, #16
 80002f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f6:	e01f      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a18      	ldr	r2, [pc, #96]	@ (800035c <GPIO_PeriClockControl+0x194>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000300:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a10      	ldr	r2, [pc, #64]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000306:	f023 0320 	bic.w	r3, r3, #32
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800030c:	e014      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a13      	ldr	r2, [pc, #76]	@ (8000360 <GPIO_PeriClockControl+0x198>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000316:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 800031c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000320:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000322:	e009      	b.n	8000338 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a0f      	ldr	r2, [pc, #60]	@ (8000364 <GPIO_PeriClockControl+0x19c>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d105      	bne.n	8000338 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000330:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <GPIO_PeriClockControl+0x180>)
 8000332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000336:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40020000 	.word	0x40020000
 8000348:	40023800 	.word	0x40023800
 800034c:	40020400 	.word	0x40020400
 8000350:	40020800 	.word	0x40020800
 8000354:	40020c00 	.word	0x40020c00
 8000358:	40021000 	.word	0x40021000
 800035c:	40021400 	.word	0x40021400
 8000360:	40021800 	.word	0x40021800
 8000364:	40021c00 	.word	0x40021c00

08000368 <GPIO_Init>:
 * @return      - none
 *
 * @note        - Must enable the peripheral clock before initialization
 *********************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
	//1. Configure mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d81f      	bhi.n	80003bc <GPIO_Init+0x54>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	4619      	mov	r1, r3
 800039a:	2303      	movs	r3, #3
 800039c:	408b      	lsls	r3, r1
 800039e:	43db      	mvns	r3, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	400a      	ands	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	6819      	ldr	r1, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	430a      	orrs	r2, r1
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	e0c2      	b.n	8000542 <GPIO_Init+0x1da>
	}else{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b04      	cmp	r3, #4
 80003c2:	d117      	bne.n	80003f4 <GPIO_Init+0x8c>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80003c4:	4b47      	ldr	r3, [pc, #284]	@ (80004e4 <GPIO_Init+0x17c>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	7912      	ldrb	r2, [r2, #4]
 80003cc:	4611      	mov	r1, r2
 80003ce:	2201      	movs	r2, #1
 80003d0:	408a      	lsls	r2, r1
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a43      	ldr	r2, [pc, #268]	@ (80004e4 <GPIO_Init+0x17c>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80003da:	4b42      	ldr	r3, [pc, #264]	@ (80004e4 <GPIO_Init+0x17c>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	7912      	ldrb	r2, [r2, #4]
 80003e2:	4611      	mov	r1, r2
 80003e4:	2201      	movs	r2, #1
 80003e6:	408a      	lsls	r2, r1
 80003e8:	43d2      	mvns	r2, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a3d      	ldr	r2, [pc, #244]	@ (80004e4 <GPIO_Init+0x17c>)
 80003ee:	400b      	ands	r3, r1
 80003f0:	6093      	str	r3, [r2, #8]
 80003f2:	e035      	b.n	8000460 <GPIO_Init+0xf8>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	795b      	ldrb	r3, [r3, #5]
 80003f8:	2b05      	cmp	r3, #5
 80003fa:	d117      	bne.n	800042c <GPIO_Init+0xc4>
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80003fc:	4b39      	ldr	r3, [pc, #228]	@ (80004e4 <GPIO_Init+0x17c>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	7912      	ldrb	r2, [r2, #4]
 8000404:	4611      	mov	r1, r2
 8000406:	2201      	movs	r2, #1
 8000408:	408a      	lsls	r2, r1
 800040a:	4611      	mov	r1, r2
 800040c:	4a35      	ldr	r2, [pc, #212]	@ (80004e4 <GPIO_Init+0x17c>)
 800040e:	430b      	orrs	r3, r1
 8000410:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000412:	4b34      	ldr	r3, [pc, #208]	@ (80004e4 <GPIO_Init+0x17c>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7912      	ldrb	r2, [r2, #4]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	43d2      	mvns	r2, r2
 8000422:	4611      	mov	r1, r2
 8000424:	4a2f      	ldr	r2, [pc, #188]	@ (80004e4 <GPIO_Init+0x17c>)
 8000426:	400b      	ands	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
 800042a:	e019      	b.n	8000460 <GPIO_Init+0xf8>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	795b      	ldrb	r3, [r3, #5]
 8000430:	2b06      	cmp	r3, #6
 8000432:	d115      	bne.n	8000460 <GPIO_Init+0xf8>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000434:	4b2b      	ldr	r3, [pc, #172]	@ (80004e4 <GPIO_Init+0x17c>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	7912      	ldrb	r2, [r2, #4]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a27      	ldr	r2, [pc, #156]	@ (80004e4 <GPIO_Init+0x17c>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800044a:	4b26      	ldr	r3, [pc, #152]	@ (80004e4 <GPIO_Init+0x17c>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a22      	ldr	r2, [pc, #136]	@ (80004e4 <GPIO_Init+0x17c>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]

		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	089b      	lsrs	r3, r3, #2
 8000466:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	791b      	ldrb	r3, [r3, #4]
 800046c:	f003 0303 	and.w	r3, r3, #3
 8000470:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <GPIO_Init+0x180>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d045      	beq.n	8000508 <GPIO_Init+0x1a0>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a1a      	ldr	r2, [pc, #104]	@ (80004ec <GPIO_Init+0x184>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d02b      	beq.n	80004de <GPIO_Init+0x176>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a19      	ldr	r2, [pc, #100]	@ (80004f0 <GPIO_Init+0x188>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d024      	beq.n	80004da <GPIO_Init+0x172>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a17      	ldr	r2, [pc, #92]	@ (80004f4 <GPIO_Init+0x18c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d01d      	beq.n	80004d6 <GPIO_Init+0x16e>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <GPIO_Init+0x190>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d016      	beq.n	80004d2 <GPIO_Init+0x16a>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <GPIO_Init+0x194>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d00f      	beq.n	80004ce <GPIO_Init+0x166>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a13      	ldr	r2, [pc, #76]	@ (8000500 <GPIO_Init+0x198>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d008      	beq.n	80004ca <GPIO_Init+0x162>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a11      	ldr	r2, [pc, #68]	@ (8000504 <GPIO_Init+0x19c>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d101      	bne.n	80004c6 <GPIO_Init+0x15e>
 80004c2:	2307      	movs	r3, #7
 80004c4:	e021      	b.n	800050a <GPIO_Init+0x1a2>
 80004c6:	2300      	movs	r3, #0
 80004c8:	e01f      	b.n	800050a <GPIO_Init+0x1a2>
 80004ca:	2306      	movs	r3, #6
 80004cc:	e01d      	b.n	800050a <GPIO_Init+0x1a2>
 80004ce:	2305      	movs	r3, #5
 80004d0:	e01b      	b.n	800050a <GPIO_Init+0x1a2>
 80004d2:	2304      	movs	r3, #4
 80004d4:	e019      	b.n	800050a <GPIO_Init+0x1a2>
 80004d6:	2303      	movs	r3, #3
 80004d8:	e017      	b.n	800050a <GPIO_Init+0x1a2>
 80004da:	2302      	movs	r3, #2
 80004dc:	e015      	b.n	800050a <GPIO_Init+0x1a2>
 80004de:	2301      	movs	r3, #1
 80004e0:	e013      	b.n	800050a <GPIO_Init+0x1a2>
 80004e2:	bf00      	nop
 80004e4:	40013c00 	.word	0x40013c00
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40020400 	.word	0x40020400
 80004f0:	40020800 	.word	0x40020800
 80004f4:	40020c00 	.word	0x40020c00
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40021400 	.word	0x40021400
 8000500:	40021800 	.word	0x40021800
 8000504:	40021c00 	.word	0x40021c00
 8000508:	2300      	movs	r3, #0
 800050a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800050c:	4b5c      	ldr	r3, [pc, #368]	@ (8000680 <GPIO_Init+0x318>)
 800050e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000510:	4a5b      	ldr	r2, [pc, #364]	@ (8000680 <GPIO_Init+0x318>)
 8000512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000516:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000518:	7c7a      	ldrb	r2, [r7, #17]
 800051a:	7cbb      	ldrb	r3, [r7, #18]
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	fa02 f103 	lsl.w	r1, r2, r3
 8000522:	4a58      	ldr	r2, [pc, #352]	@ (8000684 <GPIO_Init+0x31c>)
 8000524:	7cfb      	ldrb	r3, [r7, #19]
 8000526:	3302      	adds	r3, #2
 8000528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800052c:	4b56      	ldr	r3, [pc, #344]	@ (8000688 <GPIO_Init+0x320>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a52      	ldr	r2, [pc, #328]	@ (8000688 <GPIO_Init+0x320>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]

	//2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	799b      	ldrb	r3, [r3, #6]
 800054a:	461a      	mov	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	689a      	ldr	r2, [r3, #8]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	4619      	mov	r1, r3
 8000564:	2303      	movs	r3, #3
 8000566:	408b      	lsls	r3, r1
 8000568:	43db      	mvns	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	400a      	ands	r2, r1
 8000572:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6899      	ldr	r1, [r3, #8]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	430a      	orrs	r2, r1
 8000582:	609a      	str	r2, [r3, #8]

	temp=0;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]

	//3. Configure pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	79db      	ldrb	r3, [r3, #7]
 800058c:	461a      	mov	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2303      	movs	r3, #3
 80005a8:	408b      	lsls	r3, r1
 80005aa:	43db      	mvns	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	400a      	ands	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68d9      	ldr	r1, [r3, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	60da      	str	r2, [r3, #12]

	temp=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	461a      	mov	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	4619      	mov	r1, r3
 80005e6:	2301      	movs	r3, #1
 80005e8:	408b      	lsls	r3, r1
 80005ea:	43db      	mvns	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	400a      	ands	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6859      	ldr	r1, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	430a      	orrs	r2, r1
 8000604:	605a      	str	r2, [r3, #4]

	//5. configure alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d131      	bne.n	8000672 <GPIO_Init+0x30a>
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	08db      	lsrs	r3, r3, #3
 8000614:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2 ) ); //clearing
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	7c3a      	ldrb	r2, [r7, #16]
 8000626:	3208      	adds	r2, #8
 8000628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	220f      	movs	r2, #15
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	43db      	mvns	r3, r3
 8000638:	4618      	mov	r0, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	7c3a      	ldrb	r2, [r7, #16]
 8000640:	4001      	ands	r1, r0
 8000642:	3208      	adds	r2, #8
 8000644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	7c3a      	ldrb	r2, [r7, #16]
 800064e:	3208      	adds	r2, #8
 8000650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7a5b      	ldrb	r3, [r3, #9]
 8000658:	461a      	mov	r2, r3
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	4618      	mov	r0, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	7c3a      	ldrb	r2, [r7, #16]
 800066a:	4301      	orrs	r1, r0
 800066c:	3208      	adds	r2, #8
 800066e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000672:	bf00      	nop
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40013800 	.word	0x40013800
 8000688:	40013c00 	.word	0x40013c00

0800068c <GPIO_ToggleOutputPin>:
 *
 * @note        - Reads ODR and flips the bit for the pin
 *********************************************************/

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	78fa      	ldrb	r2, [r7, #3]
 800069e:	2101      	movs	r1, #1
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	405a      	eors	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	615a      	str	r2, [r3, #20]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <GPIO_IRQInterruptConfig>:
 * @return      - none
 *
 * @note        - Sets registers in NVIC and possibly SYSCFG for EXTI mapping
 *********************************************************/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d133      	bne.n	8000736 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b1f      	cmp	r3, #31
 80006d2:	d80a      	bhi.n	80006ea <GPIO_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80006d4:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <GPIO_IRQInterruptConfig+0xf4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	2101      	movs	r1, #1
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a32      	ldr	r2, [pc, #200]	@ (80007ac <GPIO_IRQInterruptConfig+0xf4>)
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6013      	str	r3, [r2, #0]
			// program ICER2 register
			*NVIC_ICER3 |= ( 1 << IRQNumber % 64 );

		}
	}
}
 80006e8:	e059      	b.n	800079e <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber > 31 && IRQNumber < 64){ // 32 to 63
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b1f      	cmp	r3, #31
 80006ee:	d90f      	bls.n	8000710 <GPIO_IRQInterruptConfig+0x58>
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80006f4:	d80c      	bhi.n	8000710 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80006f6:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <GPIO_IRQInterruptConfig+0xf8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	f002 021f 	and.w	r2, r2, #31
 8000700:	2101      	movs	r1, #1
 8000702:	fa01 f202 	lsl.w	r2, r1, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4a29      	ldr	r2, [pc, #164]	@ (80007b0 <GPIO_IRQInterruptConfig+0xf8>)
 800070a:	430b      	orrs	r3, r1
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e046      	b.n	800079e <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >= 64 && IRQNumber < 96){ //64 to 95
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b3f      	cmp	r3, #63	@ 0x3f
 8000714:	d943      	bls.n	800079e <GPIO_IRQInterruptConfig+0xe6>
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b5f      	cmp	r3, #95	@ 0x5f
 800071a:	d840      	bhi.n	800079e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <GPIO_IRQInterruptConfig+0xfc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a21      	ldr	r2, [pc, #132]	@ (80007b4 <GPIO_IRQInterruptConfig+0xfc>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	e033      	b.n	800079e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b1f      	cmp	r3, #31
 800073a:	d80a      	bhi.n	8000752 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <GPIO_IRQInterruptConfig+0x100>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	2101      	movs	r1, #1
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	4611      	mov	r1, r2
 800074a:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <GPIO_IRQInterruptConfig+0x100>)
 800074c:	430b      	orrs	r3, r1
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	e025      	b.n	800079e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ){
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b1f      	cmp	r3, #31
 8000756:	d90f      	bls.n	8000778 <GPIO_IRQInterruptConfig+0xc0>
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b3f      	cmp	r3, #63	@ 0x3f
 800075c:	d80c      	bhi.n	8000778 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <GPIO_IRQInterruptConfig+0x104>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	f002 021f 	and.w	r2, r2, #31
 8000768:	2101      	movs	r1, #1
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	4611      	mov	r1, r2
 8000770:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <GPIO_IRQInterruptConfig+0x104>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e012      	b.n	800079e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 6 && IRQNumber < 96 ){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b05      	cmp	r3, #5
 800077c:	d90f      	bls.n	800079e <GPIO_IRQInterruptConfig+0xe6>
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b5f      	cmp	r3, #95	@ 0x5f
 8000782:	d80c      	bhi.n	800079e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << IRQNumber % 64 );
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <GPIO_IRQInterruptConfig+0x108>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	79fa      	ldrb	r2, [r7, #7]
 800078a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <GPIO_IRQInterruptConfig+0x108>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	e7ff      	b.n	800079e <GPIO_IRQInterruptConfig+0xe6>
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000e104 	.word	0xe000e104
 80007b4:	e000e10c 	.word	0xe000e10c
 80007b8:	e000e180 	.word	0xe000e180
 80007bc:	e000e184 	.word	0xe000e184
 80007c0:	e000e18c 	.word	0xe000e18c

080007c4 <GPIO_IRQPriorityConfig>:
 *
 * @return      - none
 *
 * @note        - Sets registers in NVIC and possibly SYSCFG for EXTI mapping
 *********************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	//1. Find IPR register
	uint8_t iprx = IRQNumber / 4;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section ) + ( 8 - NO_PR_BITS_IMPLEMENTED );
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	3304      	adds	r3, #4
 80007ea:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + (iprx * 4)) |= ( IRQPriority << (8 * shift_amount));
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80007f4:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	79b9      	ldrb	r1, [r7, #6]
 80007fc:	7b7b      	ldrb	r3, [r7, #13]
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	4619      	mov	r1, r3
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800080e:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000812:	430a      	orrs	r2, r1
 8000814:	601a      	str	r2, [r3, #0]

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <GPIO_IRQHandling>:
 *
 * @note        - Clears the EXTI pending register bit for the pin
 *********************************************************/

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	//clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber)){
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <GPIO_IRQHandling+0x3c>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	2101      	movs	r1, #1
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	4013      	ands	r3, r2
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <GPIO_IRQHandling+0x30>
		// clear
		EXTI->PR |= ( 1 << PinNumber );
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <GPIO_IRQHandling+0x3c>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	2101      	movs	r1, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	4611      	mov	r1, r2
 800084e:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <GPIO_IRQHandling+0x3c>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6153      	str	r3, [r2, #20]
	}
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40013c00 	.word	0x40013c00

08000864 <EXTI0_IRQHandler>:
#include "stm32f407xx.h"

// EXTI0 ISR: clear pending and toggle LEDs
void EXTI0_IRQHandler(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    GPIO_IRQHandling(GPIO_PIN_NO_0);              // clear EXTI0 pending
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ffdb 	bl	8000824 <GPIO_IRQHandling>
    GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800086e:	210c      	movs	r1, #12
 8000870:	4808      	ldr	r0, [pc, #32]	@ (8000894 <EXTI0_IRQHandler+0x30>)
 8000872:	f7ff ff0b 	bl	800068c <GPIO_ToggleOutputPin>
    GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 8000876:	210d      	movs	r1, #13
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <EXTI0_IRQHandler+0x30>)
 800087a:	f7ff ff07 	bl	800068c <GPIO_ToggleOutputPin>
    GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_14);
 800087e:	210e      	movs	r1, #14
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <EXTI0_IRQHandler+0x30>)
 8000882:	f7ff ff03 	bl	800068c <GPIO_ToggleOutputPin>
    GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 8000886:	210f      	movs	r1, #15
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <EXTI0_IRQHandler+0x30>)
 800088a:	f7ff feff 	bl	800068c <GPIO_ToggleOutputPin>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40020c00 	.word	0x40020c00

08000898 <main>:

int main(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
    // --- LEDs on PD12..PD15 ---
    GPIO_Handle_t GPIO_LED;
    GPIO_LED.pGPIOx = GPIOD;
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <main+0x94>)
 80008a0:	60fb      	str	r3, [r7, #12]
    GPIO_LED.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	747b      	strb	r3, [r7, #17]
    GPIO_LED.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_SPEED_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	74bb      	strb	r3, [r7, #18]
    GPIO_LED.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OP_TYPE_PP;
 80008aa:	2300      	movs	r3, #0
 80008ac:	753b      	strb	r3, [r7, #20]
    GPIO_LED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80008ae:	2300      	movs	r3, #0
 80008b0:	74fb      	strb	r3, [r7, #19]

    GPIO_PeriClockControl(GPIOD, ENABLE);        // enable clock BEFORE init
 80008b2:	2101      	movs	r1, #1
 80008b4:	481d      	ldr	r0, [pc, #116]	@ (800092c <main+0x94>)
 80008b6:	f7ff fc87 	bl	80001c8 <GPIO_PeriClockControl>
    GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12; GPIO_Init(&GPIO_LED);
 80008ba:	230c      	movs	r3, #12
 80008bc:	743b      	strb	r3, [r7, #16]
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fd50 	bl	8000368 <GPIO_Init>
    GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13; GPIO_Init(&GPIO_LED);
 80008c8:	230d      	movs	r3, #13
 80008ca:	743b      	strb	r3, [r7, #16]
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fd49 	bl	8000368 <GPIO_Init>
    GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14; GPIO_Init(&GPIO_LED);
 80008d6:	230e      	movs	r3, #14
 80008d8:	743b      	strb	r3, [r7, #16]
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fd42 	bl	8000368 <GPIO_Init>
    GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15; GPIO_Init(&GPIO_LED);
 80008e4:	230f      	movs	r3, #15
 80008e6:	743b      	strb	r3, [r7, #16]
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fd3b 	bl	8000368 <GPIO_Init>

    // --- Button on PA0 → EXTI0 (rising edge) ---
    GPIO_Handle_t GPIObtn;
    GPIObtn.pGPIOx = GPIOA;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <main+0x98>)
 80008f4:	603b      	str	r3, [r7, #0]
    GPIObtn.GPIO_PinConfig.GPIO_PinNumber      = GPIO_PIN_NO_0;    // <-- correct field
 80008f6:	2300      	movs	r3, #0
 80008f8:	713b      	strb	r3, [r7, #4]
    GPIObtn.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IT_RT;  // rising edge (Discovery PA0 is active-high)
 80008fa:	2305      	movs	r3, #5
 80008fc:	717b      	strb	r3, [r7, #5]
    GPIObtn.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_SPEED_FAST;
 80008fe:	2302      	movs	r3, #2
 8000900:	71bb      	strb	r3, [r7, #6]
    GPIObtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;     // external pulldown present on Discovery
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]

    GPIO_PeriClockControl(GPIOA, ENABLE);
 8000906:	2101      	movs	r1, #1
 8000908:	4809      	ldr	r0, [pc, #36]	@ (8000930 <main+0x98>)
 800090a:	f7ff fc5d 	bl	80001c8 <GPIO_PeriClockControl>

    // If your driver doesn't do this inside GPIO_Init, also enable SYSCFG + map PA0->EXTI0:
    // SYSCFG_PCLK_EN();
    // GPIO_ConfigEXTILine(GPIOA, GPIO_PIN_NO_0); // driver-specific helper if you have one

    GPIO_Init(&GPIObtn);
 800090e:	463b      	mov	r3, r7
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fd29 	bl	8000368 <GPIO_Init>

    // NVIC: use EXTI0 for PA0
    GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRI15);
 8000916:	210f      	movs	r1, #15
 8000918:	2006      	movs	r0, #6
 800091a:	f7ff ff53 	bl	80007c4 <GPIO_IRQPriorityConfig>
    GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800091e:	2101      	movs	r1, #1
 8000920:	2006      	movs	r0, #6
 8000922:	f7ff fec9 	bl	80006b8 <GPIO_IRQInterruptConfig>

    while(1);
 8000926:	bf00      	nop
 8000928:	e7fd      	b.n	8000926 <main+0x8e>
 800092a:	bf00      	nop
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40020000 	.word	0x40020000

08000934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000934:	480d      	ldr	r0, [pc, #52]	@ (800096c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000962:	f000 f811 	bl	8000988 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000966:	f7ff ff97 	bl	8000898 <main>

0800096a <LoopForever>:

LoopForever:
  b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   r0, =_estack
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000978:	080009f0 	.word	0x080009f0
  ldr r2, =_sbss
 800097c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000980:	2000001c 	.word	0x2000001c

08000984 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <__libc_init_array>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4d0d      	ldr	r5, [pc, #52]	@ (80009c0 <__libc_init_array+0x38>)
 800098c:	4c0d      	ldr	r4, [pc, #52]	@ (80009c4 <__libc_init_array+0x3c>)
 800098e:	1b64      	subs	r4, r4, r5
 8000990:	10a4      	asrs	r4, r4, #2
 8000992:	2600      	movs	r6, #0
 8000994:	42a6      	cmp	r6, r4
 8000996:	d109      	bne.n	80009ac <__libc_init_array+0x24>
 8000998:	4d0b      	ldr	r5, [pc, #44]	@ (80009c8 <__libc_init_array+0x40>)
 800099a:	4c0c      	ldr	r4, [pc, #48]	@ (80009cc <__libc_init_array+0x44>)
 800099c:	f000 f818 	bl	80009d0 <_init>
 80009a0:	1b64      	subs	r4, r4, r5
 80009a2:	10a4      	asrs	r4, r4, #2
 80009a4:	2600      	movs	r6, #0
 80009a6:	42a6      	cmp	r6, r4
 80009a8:	d105      	bne.n	80009b6 <__libc_init_array+0x2e>
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b0:	4798      	blx	r3
 80009b2:	3601      	adds	r6, #1
 80009b4:	e7ee      	b.n	8000994 <__libc_init_array+0xc>
 80009b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ba:	4798      	blx	r3
 80009bc:	3601      	adds	r6, #1
 80009be:	e7f2      	b.n	80009a6 <__libc_init_array+0x1e>
 80009c0:	080009e8 	.word	0x080009e8
 80009c4:	080009e8 	.word	0x080009e8
 80009c8:	080009e8 	.word	0x080009e8
 80009cc:	080009ec 	.word	0x080009ec

080009d0 <_init>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	bf00      	nop
 80009d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d6:	bc08      	pop	{r3}
 80009d8:	469e      	mov	lr, r3
 80009da:	4770      	bx	lr

080009dc <_fini>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	bf00      	nop
 80009e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e2:	bc08      	pop	{r3}
 80009e4:	469e      	mov	lr, r3
 80009e6:	4770      	bx	lr
