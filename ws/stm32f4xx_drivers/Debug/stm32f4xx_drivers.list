
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000904  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a8c  08000a8c  00001a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a98  08000a98  00001aa8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000a98  08000a98  00001a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000aa0  08000aa8  00001aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa0  08000aa0  00001aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000aa4  08000aa4  00001aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001aa8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010ab  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e7  00000000  00000000  00002b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00003070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022f4  00000000  00000000  0000324d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001708  00000000  00000000  00005541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009bd8  00000000  00000000  00006c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010821  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000038c  00000000  00000000  00010864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00010bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a74 	.word	0x08000a74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a74 	.word	0x08000a74

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <GPIO_PeriClockControl>:
 * @return      - none
 *
 * @note        - Make sure to enable the clock before accessing GPIO registers
 *********************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d157      	bne.n	800029a <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a59      	ldr	r2, [pc, #356]	@ (8000354 <GPIO_PeriClockControl+0x17c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001f2:	4b59      	ldr	r3, [pc, #356]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a58      	ldr	r2, [pc, #352]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80001fe:	e0a3      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a56      	ldr	r2, [pc, #344]	@ (800035c <GPIO_PeriClockControl+0x184>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000208:	4b53      	ldr	r3, [pc, #332]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a52      	ldr	r2, [pc, #328]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000214:	e098      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a51      	ldr	r2, [pc, #324]	@ (8000360 <GPIO_PeriClockControl+0x188>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800021e:	4b4e      	ldr	r3, [pc, #312]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a4d      	ldr	r2, [pc, #308]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800022a:	e08d      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a4d      	ldr	r2, [pc, #308]	@ (8000364 <GPIO_PeriClockControl+0x18c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000234:	4b48      	ldr	r3, [pc, #288]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a47      	ldr	r2, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000240:	e082      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a48      	ldr	r2, [pc, #288]	@ (8000368 <GPIO_PeriClockControl+0x190>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024a:	4b43      	ldr	r3, [pc, #268]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a42      	ldr	r2, [pc, #264]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	e077      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a44      	ldr	r2, [pc, #272]	@ (800036c <GPIO_PeriClockControl+0x194>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000260:	4b3d      	ldr	r3, [pc, #244]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a3c      	ldr	r2, [pc, #240]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026c:	e06c      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a3f      	ldr	r2, [pc, #252]	@ (8000370 <GPIO_PeriClockControl+0x198>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000276:	4b38      	ldr	r3, [pc, #224]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027a:	4a37      	ldr	r2, [pc, #220]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800027c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000280:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000282:	e061      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a3b      	ldr	r2, [pc, #236]	@ (8000374 <GPIO_PeriClockControl+0x19c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d15d      	bne.n	8000348 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800028c:	4b32      	ldr	r3, [pc, #200]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a31      	ldr	r2, [pc, #196]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000298:	e056      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a2d      	ldr	r2, [pc, #180]	@ (8000354 <GPIO_PeriClockControl+0x17c>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002a8:	f023 0301 	bic.w	r3, r3, #1
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ae:	e04b      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a2a      	ldr	r2, [pc, #168]	@ (800035c <GPIO_PeriClockControl+0x184>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002b8:	4b27      	ldr	r3, [pc, #156]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a26      	ldr	r2, [pc, #152]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002be:	f023 0302 	bic.w	r3, r3, #2
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c4:	e040      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a25      	ldr	r2, [pc, #148]	@ (8000360 <GPIO_PeriClockControl+0x188>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002ce:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a21      	ldr	r2, [pc, #132]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002d4:	f023 0304 	bic.w	r3, r3, #4
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002da:	e035      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a21      	ldr	r2, [pc, #132]	@ (8000364 <GPIO_PeriClockControl+0x18c>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80002e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002ea:	f023 0308 	bic.w	r3, r3, #8
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f0:	e02a      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000368 <GPIO_PeriClockControl+0x190>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80002fa:	4b17      	ldr	r3, [pc, #92]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fe:	4a16      	ldr	r2, [pc, #88]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000300:	f023 0310 	bic.w	r3, r3, #16
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000306:	e01f      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a18      	ldr	r2, [pc, #96]	@ (800036c <GPIO_PeriClockControl+0x194>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a10      	ldr	r2, [pc, #64]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000316:	f023 0320 	bic.w	r3, r3, #32
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031c:	e014      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a13      	ldr	r2, [pc, #76]	@ (8000370 <GPIO_PeriClockControl+0x198>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000326:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a0b      	ldr	r2, [pc, #44]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800032c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000332:	e009      	b.n	8000348 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a0f      	ldr	r2, [pc, #60]	@ (8000374 <GPIO_PeriClockControl+0x19c>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d105      	bne.n	8000348 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a05      	ldr	r2, [pc, #20]	@ (8000358 <GPIO_PeriClockControl+0x180>)
 8000342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40020000 	.word	0x40020000
 8000358:	40023800 	.word	0x40023800
 800035c:	40020400 	.word	0x40020400
 8000360:	40020800 	.word	0x40020800
 8000364:	40020c00 	.word	0x40020c00
 8000368:	40021000 	.word	0x40021000
 800036c:	40021400 	.word	0x40021400
 8000370:	40021800 	.word	0x40021800
 8000374:	40021c00 	.word	0x40021c00

08000378 <GPIO_Init>:
 * @return      - none
 *
 * @note        - Must enable the peripheral clock before initialization
 *********************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

	//ENABLE peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff24 	bl	80001d8 <GPIO_PeriClockControl>

	//1. Configure mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	795b      	ldrb	r3, [r3, #5]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d81f      	bhi.n	80003d8 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	461a      	mov	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	791b      	ldrb	r3, [r3, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	fa02 f303 	lsl.w	r3, r2, r3
 80003a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	791b      	ldrb	r3, [r3, #4]
 80003b4:	4619      	mov	r1, r3
 80003b6:	2303      	movs	r3, #3
 80003b8:	408b      	lsls	r3, r1
 80003ba:	43db      	mvns	r3, r3
 80003bc:	4619      	mov	r1, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	400a      	ands	r2, r1
 80003c4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	697a      	ldr	r2, [r7, #20]
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	e0c2      	b.n	800055e <GPIO_Init+0x1e6>
	}else{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d117      	bne.n	8000410 <GPIO_Init+0x98>
			//1. CONFIGURE FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80003e0:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <GPIO_Init+0x188>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	7912      	ldrb	r2, [r2, #4]
 80003e8:	4611      	mov	r1, r2
 80003ea:	2201      	movs	r2, #1
 80003ec:	408a      	lsls	r2, r1
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a43      	ldr	r2, [pc, #268]	@ (8000500 <GPIO_Init+0x188>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	60d3      	str	r3, [r2, #12]
			//CLEAR the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80003f6:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <GPIO_Init+0x188>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	7912      	ldrb	r2, [r2, #4]
 80003fe:	4611      	mov	r1, r2
 8000400:	2201      	movs	r2, #1
 8000402:	408a      	lsls	r2, r1
 8000404:	43d2      	mvns	r2, r2
 8000406:	4611      	mov	r1, r2
 8000408:	4a3d      	ldr	r2, [pc, #244]	@ (8000500 <GPIO_Init+0x188>)
 800040a:	400b      	ands	r3, r1
 800040c:	6093      	str	r3, [r2, #8]
 800040e:	e035      	b.n	800047c <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	795b      	ldrb	r3, [r3, #5]
 8000414:	2b05      	cmp	r3, #5
 8000416:	d117      	bne.n	8000448 <GPIO_Init+0xd0>
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000418:	4b39      	ldr	r3, [pc, #228]	@ (8000500 <GPIO_Init+0x188>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	7912      	ldrb	r2, [r2, #4]
 8000420:	4611      	mov	r1, r2
 8000422:	2201      	movs	r2, #1
 8000424:	408a      	lsls	r2, r1
 8000426:	4611      	mov	r1, r2
 8000428:	4a35      	ldr	r2, [pc, #212]	@ (8000500 <GPIO_Init+0x188>)
 800042a:	430b      	orrs	r3, r1
 800042c:	6093      	str	r3, [r2, #8]
			//CLEAR the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800042e:	4b34      	ldr	r3, [pc, #208]	@ (8000500 <GPIO_Init+0x188>)
 8000430:	68db      	ldr	r3, [r3, #12]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	7912      	ldrb	r2, [r2, #4]
 8000436:	4611      	mov	r1, r2
 8000438:	2201      	movs	r2, #1
 800043a:	408a      	lsls	r2, r1
 800043c:	43d2      	mvns	r2, r2
 800043e:	4611      	mov	r1, r2
 8000440:	4a2f      	ldr	r2, [pc, #188]	@ (8000500 <GPIO_Init+0x188>)
 8000442:	400b      	ands	r3, r1
 8000444:	60d3      	str	r3, [r2, #12]
 8000446:	e019      	b.n	800047c <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	795b      	ldrb	r3, [r3, #5]
 800044c:	2b06      	cmp	r3, #6
 800044e:	d115      	bne.n	800047c <GPIO_Init+0x104>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000450:	4b2b      	ldr	r3, [pc, #172]	@ (8000500 <GPIO_Init+0x188>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	7912      	ldrb	r2, [r2, #4]
 8000458:	4611      	mov	r1, r2
 800045a:	2201      	movs	r2, #1
 800045c:	408a      	lsls	r2, r1
 800045e:	4611      	mov	r1, r2
 8000460:	4a27      	ldr	r2, [pc, #156]	@ (8000500 <GPIO_Init+0x188>)
 8000462:	430b      	orrs	r3, r1
 8000464:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000466:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <GPIO_Init+0x188>)
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	7912      	ldrb	r2, [r2, #4]
 800046e:	4611      	mov	r1, r2
 8000470:	2201      	movs	r2, #1
 8000472:	408a      	lsls	r2, r1
 8000474:	4611      	mov	r1, r2
 8000476:	4a22      	ldr	r2, [pc, #136]	@ (8000500 <GPIO_Init+0x188>)
 8000478:	430b      	orrs	r3, r1
 800047a:	60d3      	str	r3, [r2, #12]

		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	089b      	lsrs	r3, r3, #2
 8000482:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	f003 0303 	and.w	r3, r3, #3
 800048c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a1c      	ldr	r2, [pc, #112]	@ (8000504 <GPIO_Init+0x18c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d045      	beq.n	8000524 <GPIO_Init+0x1ac>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1a      	ldr	r2, [pc, #104]	@ (8000508 <GPIO_Init+0x190>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d02b      	beq.n	80004fa <GPIO_Init+0x182>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a19      	ldr	r2, [pc, #100]	@ (800050c <GPIO_Init+0x194>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d024      	beq.n	80004f6 <GPIO_Init+0x17e>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a17      	ldr	r2, [pc, #92]	@ (8000510 <GPIO_Init+0x198>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d01d      	beq.n	80004f2 <GPIO_Init+0x17a>
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a16      	ldr	r2, [pc, #88]	@ (8000514 <GPIO_Init+0x19c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d016      	beq.n	80004ee <GPIO_Init+0x176>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <GPIO_Init+0x1a0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d00f      	beq.n	80004ea <GPIO_Init+0x172>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a13      	ldr	r2, [pc, #76]	@ (800051c <GPIO_Init+0x1a4>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d008      	beq.n	80004e6 <GPIO_Init+0x16e>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a11      	ldr	r2, [pc, #68]	@ (8000520 <GPIO_Init+0x1a8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d101      	bne.n	80004e2 <GPIO_Init+0x16a>
 80004de:	2307      	movs	r3, #7
 80004e0:	e021      	b.n	8000526 <GPIO_Init+0x1ae>
 80004e2:	2300      	movs	r3, #0
 80004e4:	e01f      	b.n	8000526 <GPIO_Init+0x1ae>
 80004e6:	2306      	movs	r3, #6
 80004e8:	e01d      	b.n	8000526 <GPIO_Init+0x1ae>
 80004ea:	2305      	movs	r3, #5
 80004ec:	e01b      	b.n	8000526 <GPIO_Init+0x1ae>
 80004ee:	2304      	movs	r3, #4
 80004f0:	e019      	b.n	8000526 <GPIO_Init+0x1ae>
 80004f2:	2303      	movs	r3, #3
 80004f4:	e017      	b.n	8000526 <GPIO_Init+0x1ae>
 80004f6:	2302      	movs	r3, #2
 80004f8:	e015      	b.n	8000526 <GPIO_Init+0x1ae>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e013      	b.n	8000526 <GPIO_Init+0x1ae>
 80004fe:	bf00      	nop
 8000500:	40013c00 	.word	0x40013c00
 8000504:	40020000 	.word	0x40020000
 8000508:	40020400 	.word	0x40020400
 800050c:	40020800 	.word	0x40020800
 8000510:	40020c00 	.word	0x40020c00
 8000514:	40021000 	.word	0x40021000
 8000518:	40021400 	.word	0x40021400
 800051c:	40021800 	.word	0x40021800
 8000520:	40021c00 	.word	0x40021c00
 8000524:	2300      	movs	r3, #0
 8000526:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000528:	4b5b      	ldr	r3, [pc, #364]	@ (8000698 <GPIO_Init+0x320>)
 800052a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800052c:	4a5a      	ldr	r2, [pc, #360]	@ (8000698 <GPIO_Init+0x320>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000532:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000534:	7c7a      	ldrb	r2, [r7, #17]
 8000536:	7cbb      	ldrb	r3, [r7, #18]
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	fa02 f103 	lsl.w	r1, r2, r3
 800053e:	4a57      	ldr	r2, [pc, #348]	@ (800069c <GPIO_Init+0x324>)
 8000540:	7cfb      	ldrb	r3, [r7, #19]
 8000542:	3302      	adds	r3, #2
 8000544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000548:	4b55      	ldr	r3, [pc, #340]	@ (80006a0 <GPIO_Init+0x328>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	4611      	mov	r1, r2
 8000558:	4a51      	ldr	r2, [pc, #324]	@ (80006a0 <GPIO_Init+0x328>)
 800055a:	430b      	orrs	r3, r1
 800055c:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

	//2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	799b      	ldrb	r3, [r3, #6]
 8000566:	461a      	mov	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	689a      	ldr	r2, [r3, #8]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	4619      	mov	r1, r3
 8000580:	2303      	movs	r3, #3
 8000582:	408b      	lsls	r3, r1
 8000584:	43db      	mvns	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6899      	ldr	r1, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	430a      	orrs	r2, r1
 800059e:	609a      	str	r2, [r3, #8]

	temp=0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]

	//3. Configure pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	79db      	ldrb	r3, [r3, #7]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68da      	ldr	r2, [r3, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	4619      	mov	r1, r3
 80005c2:	2303      	movs	r3, #3
 80005c4:	408b      	lsls	r3, r1
 80005c6:	43db      	mvns	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	400a      	ands	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d9      	ldr	r1, [r3, #12]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	430a      	orrs	r2, r1
 80005e0:	60da      	str	r2, [r3, #12]

	temp=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7a1b      	ldrb	r3, [r3, #8]
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	4619      	mov	r1, r3
 8000602:	2301      	movs	r3, #1
 8000604:	408b      	lsls	r3, r1
 8000606:	43db      	mvns	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	400a      	ands	r2, r1
 8000610:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6859      	ldr	r1, [r3, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	430a      	orrs	r2, r1
 8000620:	605a      	str	r2, [r3, #4]

	//5. configure alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	795b      	ldrb	r3, [r3, #5]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d131      	bne.n	800068e <GPIO_Init+0x316>
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2 ) ); //clearing
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	7c3a      	ldrb	r2, [r7, #16]
 8000642:	3208      	adds	r2, #8
 8000644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	220f      	movs	r2, #15
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	43db      	mvns	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	7c3a      	ldrb	r2, [r7, #16]
 800065c:	4001      	ands	r1, r0
 800065e:	3208      	adds	r2, #8
 8000660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	7c3a      	ldrb	r2, [r7, #16]
 800066a:	3208      	adds	r2, #8
 800066c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7a5b      	ldrb	r3, [r3, #9]
 8000674:	461a      	mov	r2, r3
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	7c3a      	ldrb	r2, [r7, #16]
 8000686:	4301      	orrs	r1, r0
 8000688:	3208      	adds	r2, #8
 800068a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40013800 	.word	0x40013800
 80006a0:	40013c00 	.word	0x40013c00

080006a4 <SPI_PeriClockControl>:
 *
 * @return      - none
 *
 * @note        - Enable the clock before accessing SPI registers
 *********************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d120      	bne.n	80006f8 <SPI_PeriClockControl+0x54>
	{
		if (pSPIx == SPI1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <SPI_PeriClockControl+0xa0>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c2:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 80006c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006c8:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 80006ca:	e035      	b.n	8000738 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a1f      	ldr	r2, [pc, #124]	@ (800074c <SPI_PeriClockControl+0xa8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80006d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80006e0:	e02a      	b.n	8000738 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000750 <SPI_PeriClockControl+0xac>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d126      	bne.n	8000738 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	4a16      	ldr	r2, [pc, #88]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 80006f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80006f6:	e01f      	b.n	8000738 <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <SPI_PeriClockControl+0xa0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 8000702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000704:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 8000706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800070a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800070c:	e014      	b.n	8000738 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <SPI_PeriClockControl+0xa8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071a:	4a0b      	ldr	r2, [pc, #44]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 800071c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000720:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000722:	e009      	b.n	8000738 <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <SPI_PeriClockControl+0xac>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d105      	bne.n	8000738 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a05      	ldr	r2, [pc, #20]	@ (8000748 <SPI_PeriClockControl+0xa4>)
 8000732:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40013000 	.word	0x40013000
 8000748:	40023800 	.word	0x40023800
 800074c:	40003800 	.word	0x40003800
 8000750:	40003c00 	.word	0x40003c00

08000754 <SPI_Init>:
 *
 * @note        - Configures CR1/CR2 (mode, BR, CPOL/CPHA, DFF, SSM/SSI, etc.)
 *              - Configure GPIO pins (AF, mode, speed, pull) separately
 *********************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	//ENABLE peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2101      	movs	r1, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff9e 	bl	80006a4 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register
	uint32_t tempreg = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]

	//1. CONFIGURE device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	4313      	orrs	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]

	//2. CONFIGURE bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d104      	bne.n	800078a <SPI_Init+0x36>
		//CLEAR BIDI mode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	e014      	b.n	80007b4 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	795b      	ldrb	r3, [r3, #5]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d104      	bne.n	800079c <SPI_Init+0x48>
		//SET BIDI mode
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	e00b      	b.n	80007b4 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d107      	bne.n	80007b4 <SPI_Init+0x60>
		//CLEAR BIDI mode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007aa:	60fb      	str	r3, [r7, #12]
		//SET RXONLY bit
		tempreg |= (1 << SPI_CR1_RXONLY);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007b2:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	799b      	ldrb	r3, [r3, #6]
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	4313      	orrs	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	79db      	ldrb	r3, [r3, #7]
 80007c4:	02db      	lsls	r3, r3, #11
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7a1b      	ldrb	r3, [r3, #8]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	461a      	mov	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM; // SSM = 1 (software slave management)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7a9b      	ldrb	r3, [r3, #10]
 80007e8:	025b      	lsls	r3, r3, #9
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	601a      	str	r2, [r3, #0]

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SPI_GetFlagStatus>:
		/* Invalid base address or unsupported instance */
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	4013      	ands	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000816:	2301      	movs	r3, #1
 8000818:	e000      	b.n	800081c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <SPI_SendData>:
 *
 * @note        - Waits for TXE and BSY flags; blocks until complete
 *              - For full-duplex, RX path is ignored (may generate OVR)
 *********************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000834:	e027      	b.n	8000886 <SPI_SendData+0x5e>
		//1. WAIT until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000836:	bf00      	nop
 8000838:	2102      	movs	r1, #2
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff ffe0 	bl	8000800 <SPI_GetFlagStatus>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f8      	beq.n	8000838 <SPI_SendData+0x10>

		//2. CHECK DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00e      	beq.n	8000870 <SPI_SendData+0x48>
		{
			//16 BIT DFF
			//1. LOAD data in DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	60da      	str	r2, [r3, #12]
			Len--;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
			Len--;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	3301      	adds	r3, #1
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	e00a      	b.n	8000886 <SPI_SendData+0x5e>
		}else{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	60da      	str	r2, [r3, #12]
			Len--;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3b01      	subs	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1d4      	bne.n	8000836 <SPI_SendData+0xe>
		}
	}
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <SPI_PeripheralControl>:
 * @return      - none
 *
 * @note        - Only enable after CR1/CR2 and GPIO are configured
 *********************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d106      	bne.n	80008b6 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80008b4:	e005      	b.n	80008c2 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SPI_SSIConfig>:
 * @return      - none
 *
 * @note        - In master mode with SSM=1, set SSI to avoid MODF
 *********************************************************/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d106      	bne.n	80008ee <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 80008ec:	e005      	b.n	80008fa <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	601a      	str	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SPI_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
*/

void SPI_GPIOInits(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <SPI_GPIOInits+0x40>)
 8000910:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000912:	2302      	movs	r3, #2
 8000914:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000916:	2305      	movs	r3, #5
 8000918:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800091a:	2300      	movs	r3, #0
 800091c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800091e:	2300      	movs	r3, #0
 8000920:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000922:	2302      	movs	r3, #2
 8000924:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000926:	230d      	movs	r3, #13
 8000928:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fd23 	bl	8000378 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000932:	230f      	movs	r3, #15
 8000934:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd1d 	bl	8000378 <GPIO_Init>

	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40020400 	.word	0x40020400

0800094c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <SPI2_Inits+0x38>)
 8000954:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000956:	2301      	movs	r3, #1
 8000958:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800095a:	2301      	movs	r3, #1
 800095c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; //generates sclk of 8MHz
 800095e:	2300      	movs	r3, #0
 8000960:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000962:	2300      	movs	r3, #0
 8000964:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 8000966:	2301      	movs	r3, #1
 8000968:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enable for NSS Pin
 800096e:	2301      	movs	r3, #1
 8000970:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff feed 	bl	8000754 <SPI_Init>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40003800 	.word	0x40003800

08000988 <main>:
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <main+0x48>)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	ca07      	ldmia	r2, {r0, r1, r2}
 8000994:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Initialize the GPIO Pins to behave as SPI2 pins
	SPI_GPIOInits();
 8000998:	f7ff ffb6 	bl	8000908 <SPI_GPIOInits>

	//INITIALIZE the SPI2 peripheral parameters
	SPI2_Inits();
 800099c:	f7ff ffd6 	bl	800094c <SPI2_Inits>

	//Set NSS signal to High (internally) to avoid MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 80009a0:	2101      	movs	r1, #1
 80009a2:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <main+0x4c>)
 80009a4:	f7ff ff93 	bl	80008ce <SPI_SSIConfig>

	//ENABLE SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 80009a8:	2101      	movs	r1, #1
 80009aa:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <main+0x4c>)
 80009ac:	f7ff ff73 	bl	8000896 <SPI_PeripheralControl>

	//SEND data
	SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc08 	bl	80001c8 <strlen>
 80009b8:	4602      	mov	r2, r0
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <main+0x4c>)
 80009c0:	f7ff ff32 	bl	8000828 <SPI_SendData>

	//DISABLE SPI2
	SPI_PeripheralControl(SPI2,DISABLE);
 80009c4:	2100      	movs	r1, #0
 80009c6:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <main+0x4c>)
 80009c8:	f7ff ff65 	bl	8000896 <SPI_PeripheralControl>


	while(1);
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <main+0x44>
 80009d0:	08000a8c 	.word	0x08000a8c
 80009d4:	40003800 	.word	0x40003800

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	@ (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a06:	f000 f811 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000a0a:	f7ff ffbd 	bl	8000988 <main>

08000a0e <LoopForever>:

LoopForever:
  b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a1c:	08000aa8 	.word	0x08000aa8
  ldr r2, =_sbss
 8000a20:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a24:	2000001c 	.word	0x2000001c

08000a28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a64 <__libc_init_array+0x38>)
 8000a30:	4c0d      	ldr	r4, [pc, #52]	@ (8000a68 <__libc_init_array+0x3c>)
 8000a32:	1b64      	subs	r4, r4, r5
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	2600      	movs	r6, #0
 8000a38:	42a6      	cmp	r6, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a6c <__libc_init_array+0x40>)
 8000a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a70 <__libc_init_array+0x44>)
 8000a40:	f000 f818 	bl	8000a74 <_init>
 8000a44:	1b64      	subs	r4, r4, r5
 8000a46:	10a4      	asrs	r4, r4, #2
 8000a48:	2600      	movs	r6, #0
 8000a4a:	42a6      	cmp	r6, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a54:	4798      	blx	r3
 8000a56:	3601      	adds	r6, #1
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5e:	4798      	blx	r3
 8000a60:	3601      	adds	r6, #1
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	08000aa0 	.word	0x08000aa0
 8000a68:	08000aa0 	.word	0x08000aa0
 8000a6c:	08000aa0 	.word	0x08000aa0
 8000a70:	08000aa4 	.word	0x08000aa4

08000a74 <_init>:
 8000a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a76:	bf00      	nop
 8000a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7a:	bc08      	pop	{r3}
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	4770      	bx	lr

08000a80 <_fini>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr
