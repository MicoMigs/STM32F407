
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002304  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08002494  08002494  00003494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b4  080025b4  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080025b4  080025b4  000035b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025bc  080025bc  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025bc  080025bc  000035bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025c0  080025c0  000035c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080025c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001312  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a6  00000000  00000000  000053aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00005950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e4  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002619  00000000  00000000  00005b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000197b  00000000  00000000  0000818d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a394  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00013e9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fd0  00000000  00000000  00013ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00014eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800247c 	.word	0x0800247c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800247c 	.word	0x0800247c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIO_PeriClockControl>:
 * @return      - none
 *
 * @note        - Make sure to enable the clock before accessing GPIO registers
 *********************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d157      	bne.n	8000342 <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a59      	ldr	r2, [pc, #356]	@ (80003fc <GPIO_PeriClockControl+0x17c>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800029a:	4b59      	ldr	r3, [pc, #356]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029e:	4a58      	ldr	r2, [pc, #352]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80002a6:	e0a3      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a56      	ldr	r2, [pc, #344]	@ (8000404 <GPIO_PeriClockControl+0x184>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002b0:	4b53      	ldr	r3, [pc, #332]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a52      	ldr	r2, [pc, #328]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002b6:	f043 0302 	orr.w	r3, r3, #2
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002bc:	e098      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a51      	ldr	r2, [pc, #324]	@ (8000408 <GPIO_PeriClockControl+0x188>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ca:	4a4d      	ldr	r2, [pc, #308]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d2:	e08d      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a4d      	ldr	r2, [pc, #308]	@ (800040c <GPIO_PeriClockControl+0x18c>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002dc:	4b48      	ldr	r3, [pc, #288]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e0:	4a47      	ldr	r2, [pc, #284]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e8:	e082      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a48      	ldr	r2, [pc, #288]	@ (8000410 <GPIO_PeriClockControl+0x190>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002f2:	4b43      	ldr	r3, [pc, #268]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	4a42      	ldr	r2, [pc, #264]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80002f8:	f043 0310 	orr.w	r3, r3, #16
 80002fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fe:	e077      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a44      	ldr	r2, [pc, #272]	@ (8000414 <GPIO_PeriClockControl+0x194>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000308:	4b3d      	ldr	r3, [pc, #244]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a3c      	ldr	r2, [pc, #240]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000314:	e06c      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a3f      	ldr	r2, [pc, #252]	@ (8000418 <GPIO_PeriClockControl+0x198>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800031e:	4b38      	ldr	r3, [pc, #224]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	4a37      	ldr	r2, [pc, #220]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000328:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032a:	e061      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a3b      	ldr	r2, [pc, #236]	@ (800041c <GPIO_PeriClockControl+0x19c>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d15d      	bne.n	80003f0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000334:	4b32      	ldr	r3, [pc, #200]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000338:	4a31      	ldr	r2, [pc, #196]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 800033a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800033e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000340:	e056      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a2d      	ldr	r2, [pc, #180]	@ (80003fc <GPIO_PeriClockControl+0x17c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800034a:	4b2d      	ldr	r3, [pc, #180]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034e:	4a2c      	ldr	r2, [pc, #176]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000350:	f023 0301 	bic.w	r3, r3, #1
 8000354:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000356:	e04b      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a2a      	ldr	r2, [pc, #168]	@ (8000404 <GPIO_PeriClockControl+0x184>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000360:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a26      	ldr	r2, [pc, #152]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000366:	f023 0302 	bic.w	r3, r3, #2
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036c:	e040      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a25      	ldr	r2, [pc, #148]	@ (8000408 <GPIO_PeriClockControl+0x188>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000376:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a21      	ldr	r2, [pc, #132]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 800037c:	f023 0304 	bic.w	r3, r3, #4
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000382:	e035      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a21      	ldr	r2, [pc, #132]	@ (800040c <GPIO_PeriClockControl+0x18c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a1b      	ldr	r2, [pc, #108]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 8000392:	f023 0308 	bic.w	r3, r3, #8
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000398:	e02a      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a1c      	ldr	r2, [pc, #112]	@ (8000410 <GPIO_PeriClockControl+0x190>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a16      	ldr	r2, [pc, #88]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003a8:	f023 0310 	bic.w	r3, r3, #16
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ae:	e01f      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a18      	ldr	r2, [pc, #96]	@ (8000414 <GPIO_PeriClockControl+0x194>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a10      	ldr	r2, [pc, #64]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003be:	f023 0320 	bic.w	r3, r3, #32
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	e014      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a13      	ldr	r2, [pc, #76]	@ (8000418 <GPIO_PeriClockControl+0x198>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80003ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003da:	e009      	b.n	80003f0 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a0f      	ldr	r2, [pc, #60]	@ (800041c <GPIO_PeriClockControl+0x19c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d105      	bne.n	80003f0 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <GPIO_PeriClockControl+0x180>)
 80003ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40020000 	.word	0x40020000
 8000400:	40023800 	.word	0x40023800
 8000404:	40020400 	.word	0x40020400
 8000408:	40020800 	.word	0x40020800
 800040c:	40020c00 	.word	0x40020c00
 8000410:	40021000 	.word	0x40021000
 8000414:	40021400 	.word	0x40021400
 8000418:	40021800 	.word	0x40021800
 800041c:	40021c00 	.word	0x40021c00

08000420 <GPIO_Init>:
 * @return      - none
 *
 * @note        - Must enable the peripheral clock before initialization
 *********************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]

	//ENABLE peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff24 	bl	8000280 <GPIO_PeriClockControl>

	//1. Configure mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d81f      	bhi.n	8000480 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	4619      	mov	r1, r3
 800045e:	2303      	movs	r3, #3
 8000460:	408b      	lsls	r3, r1
 8000462:	43db      	mvns	r3, r3
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	400a      	ands	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	6819      	ldr	r1, [r3, #0]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	e0c2      	b.n	8000606 <GPIO_Init+0x1e6>
	}else{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b04      	cmp	r3, #4
 8000486:	d117      	bne.n	80004b8 <GPIO_Init+0x98>
			//1. CONFIGURE FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000488:	4b47      	ldr	r3, [pc, #284]	@ (80005a8 <GPIO_Init+0x188>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	7912      	ldrb	r2, [r2, #4]
 8000490:	4611      	mov	r1, r2
 8000492:	2201      	movs	r2, #1
 8000494:	408a      	lsls	r2, r1
 8000496:	4611      	mov	r1, r2
 8000498:	4a43      	ldr	r2, [pc, #268]	@ (80005a8 <GPIO_Init+0x188>)
 800049a:	430b      	orrs	r3, r1
 800049c:	60d3      	str	r3, [r2, #12]
			//CLEAR the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800049e:	4b42      	ldr	r3, [pc, #264]	@ (80005a8 <GPIO_Init+0x188>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	7912      	ldrb	r2, [r2, #4]
 80004a6:	4611      	mov	r1, r2
 80004a8:	2201      	movs	r2, #1
 80004aa:	408a      	lsls	r2, r1
 80004ac:	43d2      	mvns	r2, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a3d      	ldr	r2, [pc, #244]	@ (80005a8 <GPIO_Init+0x188>)
 80004b2:	400b      	ands	r3, r1
 80004b4:	6093      	str	r3, [r2, #8]
 80004b6:	e035      	b.n	8000524 <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b05      	cmp	r3, #5
 80004be:	d117      	bne.n	80004f0 <GPIO_Init+0xd0>
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004c0:	4b39      	ldr	r3, [pc, #228]	@ (80005a8 <GPIO_Init+0x188>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7912      	ldrb	r2, [r2, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	408a      	lsls	r2, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a35      	ldr	r2, [pc, #212]	@ (80005a8 <GPIO_Init+0x188>)
 80004d2:	430b      	orrs	r3, r1
 80004d4:	6093      	str	r3, [r2, #8]
			//CLEAR the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004d6:	4b34      	ldr	r3, [pc, #208]	@ (80005a8 <GPIO_Init+0x188>)
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	7912      	ldrb	r2, [r2, #4]
 80004de:	4611      	mov	r1, r2
 80004e0:	2201      	movs	r2, #1
 80004e2:	408a      	lsls	r2, r1
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a2f      	ldr	r2, [pc, #188]	@ (80005a8 <GPIO_Init+0x188>)
 80004ea:	400b      	ands	r3, r1
 80004ec:	60d3      	str	r3, [r2, #12]
 80004ee:	e019      	b.n	8000524 <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b06      	cmp	r3, #6
 80004f6:	d115      	bne.n	8000524 <GPIO_Init+0x104>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004f8:	4b2b      	ldr	r3, [pc, #172]	@ (80005a8 <GPIO_Init+0x188>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	7912      	ldrb	r2, [r2, #4]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	4611      	mov	r1, r2
 8000508:	4a27      	ldr	r2, [pc, #156]	@ (80005a8 <GPIO_Init+0x188>)
 800050a:	430b      	orrs	r3, r1
 800050c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800050e:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <GPIO_Init+0x188>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	7912      	ldrb	r2, [r2, #4]
 8000516:	4611      	mov	r1, r2
 8000518:	2201      	movs	r2, #1
 800051a:	408a      	lsls	r2, r1
 800051c:	4611      	mov	r1, r2
 800051e:	4a22      	ldr	r2, [pc, #136]	@ (80005a8 <GPIO_Init+0x188>)
 8000520:	430b      	orrs	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]

		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	089b      	lsrs	r3, r3, #2
 800052a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	f003 0303 	and.w	r3, r3, #3
 8000534:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a1c      	ldr	r2, [pc, #112]	@ (80005ac <GPIO_Init+0x18c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d045      	beq.n	80005cc <GPIO_Init+0x1ac>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1a      	ldr	r2, [pc, #104]	@ (80005b0 <GPIO_Init+0x190>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d02b      	beq.n	80005a2 <GPIO_Init+0x182>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a19      	ldr	r2, [pc, #100]	@ (80005b4 <GPIO_Init+0x194>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d024      	beq.n	800059e <GPIO_Init+0x17e>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <GPIO_Init+0x198>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d01d      	beq.n	800059a <GPIO_Init+0x17a>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a16      	ldr	r2, [pc, #88]	@ (80005bc <GPIO_Init+0x19c>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d016      	beq.n	8000596 <GPIO_Init+0x176>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a14      	ldr	r2, [pc, #80]	@ (80005c0 <GPIO_Init+0x1a0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d00f      	beq.n	8000592 <GPIO_Init+0x172>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a13      	ldr	r2, [pc, #76]	@ (80005c4 <GPIO_Init+0x1a4>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d008      	beq.n	800058e <GPIO_Init+0x16e>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a11      	ldr	r2, [pc, #68]	@ (80005c8 <GPIO_Init+0x1a8>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d101      	bne.n	800058a <GPIO_Init+0x16a>
 8000586:	2307      	movs	r3, #7
 8000588:	e021      	b.n	80005ce <GPIO_Init+0x1ae>
 800058a:	2300      	movs	r3, #0
 800058c:	e01f      	b.n	80005ce <GPIO_Init+0x1ae>
 800058e:	2306      	movs	r3, #6
 8000590:	e01d      	b.n	80005ce <GPIO_Init+0x1ae>
 8000592:	2305      	movs	r3, #5
 8000594:	e01b      	b.n	80005ce <GPIO_Init+0x1ae>
 8000596:	2304      	movs	r3, #4
 8000598:	e019      	b.n	80005ce <GPIO_Init+0x1ae>
 800059a:	2303      	movs	r3, #3
 800059c:	e017      	b.n	80005ce <GPIO_Init+0x1ae>
 800059e:	2302      	movs	r3, #2
 80005a0:	e015      	b.n	80005ce <GPIO_Init+0x1ae>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e013      	b.n	80005ce <GPIO_Init+0x1ae>
 80005a6:	bf00      	nop
 80005a8:	40013c00 	.word	0x40013c00
 80005ac:	40020000 	.word	0x40020000
 80005b0:	40020400 	.word	0x40020400
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40021400 	.word	0x40021400
 80005c4:	40021800 	.word	0x40021800
 80005c8:	40021c00 	.word	0x40021c00
 80005cc:	2300      	movs	r3, #0
 80005ce:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005d0:	4b5b      	ldr	r3, [pc, #364]	@ (8000740 <GPIO_Init+0x320>)
 80005d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d4:	4a5a      	ldr	r2, [pc, #360]	@ (8000740 <GPIO_Init+0x320>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005da:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80005dc:	7c7a      	ldrb	r2, [r7, #17]
 80005de:	7cbb      	ldrb	r3, [r7, #18]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	fa02 f103 	lsl.w	r1, r2, r3
 80005e6:	4a57      	ldr	r2, [pc, #348]	@ (8000744 <GPIO_Init+0x324>)
 80005e8:	7cfb      	ldrb	r3, [r7, #19]
 80005ea:	3302      	adds	r3, #2
 80005ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005f0:	4b55      	ldr	r3, [pc, #340]	@ (8000748 <GPIO_Init+0x328>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	7912      	ldrb	r2, [r2, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	2201      	movs	r2, #1
 80005fc:	408a      	lsls	r2, r1
 80005fe:	4611      	mov	r1, r2
 8000600:	4a51      	ldr	r2, [pc, #324]	@ (8000748 <GPIO_Init+0x328>)
 8000602:	430b      	orrs	r3, r1
 8000604:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]

	//2. Configure Speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	689a      	ldr	r2, [r3, #8]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	2303      	movs	r3, #3
 800062a:	408b      	lsls	r3, r1
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	400a      	ands	r2, r1
 8000636:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6899      	ldr	r1, [r3, #8]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	430a      	orrs	r2, r1
 8000646:	609a      	str	r2, [r3, #8]

	temp=0;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]

	//3. Configure pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	79db      	ldrb	r3, [r3, #7]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	4619      	mov	r1, r3
 800066a:	2303      	movs	r3, #3
 800066c:	408b      	lsls	r3, r1
 800066e:	43db      	mvns	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	400a      	ands	r2, r1
 8000678:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68d9      	ldr	r1, [r3, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	430a      	orrs	r2, r1
 8000688:	60da      	str	r2, [r3, #12]

	temp=0;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

	//4. configure optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	7a1b      	ldrb	r3, [r3, #8]
 8000692:	461a      	mov	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	4619      	mov	r1, r3
 80006aa:	2301      	movs	r3, #1
 80006ac:	408b      	lsls	r3, r1
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	400a      	ands	r2, r1
 80006b8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6859      	ldr	r1, [r3, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	605a      	str	r2, [r3, #4]

	//5. configure alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	795b      	ldrb	r3, [r3, #5]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d131      	bne.n	8000736 <GPIO_Init+0x316>
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	08db      	lsrs	r3, r3, #3
 80006d8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2 ) ); //clearing
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	7c3a      	ldrb	r2, [r7, #16]
 80006ea:	3208      	adds	r2, #8
 80006ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	220f      	movs	r2, #15
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	7c3a      	ldrb	r2, [r7, #16]
 8000704:	4001      	ands	r1, r0
 8000706:	3208      	adds	r2, #8
 8000708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7c3a      	ldrb	r2, [r7, #16]
 8000712:	3208      	adds	r2, #8
 8000714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7a5b      	ldrb	r3, [r3, #9]
 800071c:	461a      	mov	r2, r3
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	7c3a      	ldrb	r2, [r7, #16]
 800072e:	4301      	orrs	r1, r0
 8000730:	3208      	adds	r2, #8
 8000732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40013800 	.word	0x40013800
 8000748:	40013c00 	.word	0x40013c00

0800074c <GPIO_ReadFromInputPin>:
 *
 * @note        - Reads the corresponding bit from IDR (Input Data Register)
 *********************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	691a      	ldr	r2, [r3, #16]
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	fa22 f303 	lsr.w	r3, r2, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
	return value;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <SPI_PeriClockControl>:
 *
 * @return      - none
 *
 * @note        - Enable the clock before accessing SPI registers
 *********************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d120      	bne.n	80007cc <SPI_PeriClockControl+0x54>
	{
		if (pSPIx == SPI1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a22      	ldr	r2, [pc, #136]	@ (8000818 <SPI_PeriClockControl+0xa0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d106      	bne.n	80007a0 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000792:	4b22      	ldr	r3, [pc, #136]	@ (800081c <SPI_PeriClockControl+0xa4>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	4a21      	ldr	r2, [pc, #132]	@ (800081c <SPI_PeriClockControl+0xa4>)
 8000798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800079c:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 800079e:	e035      	b.n	800080c <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000820 <SPI_PeriClockControl+0xa8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007b4:	e02a      	b.n	800080c <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000824 <SPI_PeriClockControl+0xac>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d126      	bne.n	800080c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a16      	ldr	r2, [pc, #88]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007ca:	e01f      	b.n	800080c <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <SPI_PeriClockControl+0xa0>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d106      	bne.n	80007e2 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d8:	4a10      	ldr	r2, [pc, #64]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007de:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007e0:	e014      	b.n	800080c <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI2)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <SPI_PeriClockControl+0xa8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <SPI_PeriClockControl+0xa4>)
 80007f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007f6:	e009      	b.n	800080c <SPI_PeriClockControl+0x94>
		else if (pSPIx == SPI3)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <SPI_PeriClockControl+0xac>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d105      	bne.n	800080c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SPI_PeriClockControl+0xa4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	4a05      	ldr	r2, [pc, #20]	@ (800081c <SPI_PeriClockControl+0xa4>)
 8000806:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800080a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40013000 	.word	0x40013000
 800081c:	40023800 	.word	0x40023800
 8000820:	40003800 	.word	0x40003800
 8000824:	40003c00 	.word	0x40003c00

08000828 <SPI_Init>:
 *
 * @note        - Configures CR1/CR2 (mode, BR, CPOL/CPHA, DFF, SSM/SSI, etc.)
 *              - Configure GPIO pins (AF, mode, speed, pull) separately
 *********************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	//ENABLE peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff9e 	bl	8000778 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register
	uint32_t tempreg = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]

	//1. CONFIGURE device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4313      	orrs	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

	//2. CONFIGURE bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d104      	bne.n	800085e <SPI_Init+0x36>
		//CLEAR BIDI mode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e014      	b.n	8000888 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	795b      	ldrb	r3, [r3, #5]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d104      	bne.n	8000870 <SPI_Init+0x48>
		//SET BIDI mode
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e00b      	b.n	8000888 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	2b03      	cmp	r3, #3
 8000876:	d107      	bne.n	8000888 <SPI_Init+0x60>
		//CLEAR BIDI mode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800087e:	60fb      	str	r3, [r7, #12]
		//SET RXONLY bit
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000886:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the SPI serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	799b      	ldrb	r3, [r3, #6]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	4313      	orrs	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	79db      	ldrb	r3, [r3, #7]
 8000898:	02db      	lsls	r3, r3, #11
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	4313      	orrs	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a1b      	ldrb	r3, [r3, #8]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7a5b      	ldrb	r3, [r3, #9]
 80008b0:	461a      	mov	r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM; // SSM = 1 (software slave management)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7a9b      	ldrb	r3, [r3, #10]
 80008bc:	025b      	lsls	r3, r3, #9
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	601a      	str	r2, [r3, #0]

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <SPI_SendData>:
 *
 * @note        - Waits for TXE and BSY flags; blocks until complete
 *              - For full-duplex, RX path is ignored (may generate OVR)
 *********************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 80008e0:	e027      	b.n	8000932 <SPI_SendData+0x5e>
		//1. WAIT until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80008e2:	bf00      	nop
 80008e4:	2102      	movs	r1, #2
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f89a 	bl	8000a20 <SPI_GetFlagStatus>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f8      	beq.n	80008e4 <SPI_SendData+0x10>

		//2. CHECK DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00e      	beq.n	800091c <SPI_SendData+0x48>
		{
			//16 BIT DFF
			//1. LOAD data in DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	60da      	str	r2, [r3, #12]
			Len--;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
			Len--;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3b01      	subs	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	3301      	adds	r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	e00a      	b.n	8000932 <SPI_SendData+0x5e>
		}else{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60da      	str	r2, [r3, #12]
			Len--;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
 800092a:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	3301      	adds	r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1d4      	bne.n	80008e2 <SPI_SendData+0xe>
		}
	}
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <SPI_ReceiveData>:
 *
 * @note        - Waits for RXNE; blocks until Len bytes received
 *              - In master full-duplex, clock is generated by reading DR
 *********************************************************/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 800094e:	e027      	b.n	80009a0 <SPI_ReceiveData+0x5e>
		//1. WAIT until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000950:	bf00      	nop
 8000952:	2101      	movs	r1, #1
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f000 f863 	bl	8000a20 <SPI_GetFlagStatus>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f8      	beq.n	8000952 <SPI_ReceiveData+0x10>

		//2. CHECK DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <SPI_ReceiveData+0x48>
		{
			//16 BIT DFF
			//1. LOAD data from DR to rxbuffer address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	b29a      	uxth	r2, r3
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	801a      	strh	r2, [r3, #0]
			Len--;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3b01      	subs	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
			Len--;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	3301      	adds	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	e00a      	b.n	80009a0 <SPI_ReceiveData+0x5e>
		}else{
			//8 bit DFF
			*pRxBuffer = pSPIx->DR;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	701a      	strb	r2, [r3, #0]
			Len--;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1d4      	bne.n	8000950 <SPI_ReceiveData+0xe>
		}
	}
}
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SPI_PeripheralControl>:
 * @return      - none
 *
 * @note        - Only enable after CR1/CR2 and GPIO are configured
 *********************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d106      	bne.n	80009d0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80009ce:	e005      	b.n	80009dc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SPI_SSOEConfig>:
 * @return      - none
 *
 * @note        - With SSOE=1 and hardware NSS, NSS is driven by SPE/BSY
 *********************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d106      	bne.n	8000a08 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f043 0204 	orr.w	r2, r3, #4
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}
}
 8000a06:	e005      	b.n	8000a14 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f023 0204 	bic.w	r2, r3, #4
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	605a      	str	r2, [r3, #4]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SPI_GetFlagStatus>:
 * @return      - 1 if flag is set, 0 if flag is reset
 *
 * @note        - Returns a boolean-style value (uint8_t)
 *********************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <delay>:
//arduino led

#define LED_PIN  9

void delay(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e002      	b.n	8000a5a <delay+0x12>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <delay+0x28>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d9f8      	bls.n	8000a54 <delay+0xc>
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	0003d08f 	.word	0x0003d08f

08000a74 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <SPI2_GPIOInits+0x58>)
 8000a7c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000a82:	2305      	movs	r3, #5
 8000a84:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a86:	2300      	movs	r3, #0
 8000a88:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000a92:	230d      	movs	r3, #13
 8000a94:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fcc1 	bl	8000420 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fcbb 	bl	8000420 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000aaa:	230e      	movs	r3, #14
 8000aac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fcb5 	bl	8000420 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fcaf 	bl	8000420 <GPIO_Init>


}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020400 	.word	0x40020400

08000ad0 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <SPI2_Inits+0x34>)
 8000ad8:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000ada:	2301      	movs	r3, #1
 8000adc:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000aee:	2300      	movs	r3, #0
 8000af0:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fe97 	bl	8000828 <SPI_Init>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40003800 	.word	0x40003800

08000b08 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <GPIO_ButtonInit+0x54>)
 8000b10:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000b16:	2300      	movs	r3, #0
 8000b18:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fc7a 	bl	8000420 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <GPIO_ButtonInit+0x58>)
 8000b2e:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000b30:	230c      	movs	r3, #12
 8000b32:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b34:	2301      	movs	r3, #1
 8000b36:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000b44:	2101      	movs	r1, #1
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <GPIO_ButtonInit+0x58>)
 8000b48:	f7ff fb9a 	bl	8000280 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fc66 	bl	8000420 <GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2bf5      	cmp	r3, #245	@ 0xf5
 8000b72:	d101      	bne.n	8000b78 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <main>:

int main(void)
{
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b08e      	sub	sp, #56	@ 0x38
 8000b8c:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 8000b8e:	23ff      	movs	r3, #255	@ 0xff
 8000b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t dummy_read;

	initialise_monitor_handles();
 8000b94:	f001 fbee 	bl	8002374 <initialise_monitor_handles>

	printf("Application is running\n");
 8000b98:	48b1      	ldr	r0, [pc, #708]	@ (8000e60 <main+0x2d8>)
 8000b9a:	f000 fb4d 	bl	8001238 <puts>

	GPIO_ButtonInit();
 8000b9e:	f7ff ffb3 	bl	8000b08 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000ba2:	f7ff ff67 	bl	8000a74 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000ba6:	f7ff ff93 	bl	8000ad0 <SPI2_Inits>

	printf("SPI Init. done\n");
 8000baa:	48ae      	ldr	r0, [pc, #696]	@ (8000e64 <main+0x2dc>)
 8000bac:	f000 fb44 	bl	8001238 <puts>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	48ad      	ldr	r0, [pc, #692]	@ (8000e68 <main+0x2e0>)
 8000bb4:	f7ff ff18 	bl	80009e8 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000bb8:	bf00      	nop
 8000bba:	2100      	movs	r1, #0
 8000bbc:	48ab      	ldr	r0, [pc, #684]	@ (8000e6c <main+0x2e4>)
 8000bbe:	f7ff fdc5 	bl	800074c <GPIO_ReadFromInputPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f8      	beq.n	8000bba <main+0x32>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000bc8:	f7ff ff3e 	bl	8000a48 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000bcc:	2101      	movs	r1, #1
 8000bce:	48a6      	ldr	r0, [pc, #664]	@ (8000e68 <main+0x2e0>)
 8000bd0:	f7ff feee 	bl	80009b0 <SPI_PeripheralControl>

	    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000bd4:	2350      	movs	r3, #80	@ 0x50
 8000bd6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000bda:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000bde:	2201      	movs	r2, #1
 8000be0:	4619      	mov	r1, r3
 8000be2:	48a1      	ldr	r0, [pc, #644]	@ (8000e68 <main+0x2e0>)
 8000be4:	f7ff fe76 	bl	80008d4 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000be8:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	489d      	ldr	r0, [pc, #628]	@ (8000e68 <main+0x2e0>)
 8000bf2:	f7ff fea6 	bl	8000942 <SPI_ReceiveData>


		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000bf6:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	489a      	ldr	r0, [pc, #616]	@ (8000e68 <main+0x2e0>)
 8000c00:	f7ff fe68 	bl	80008d4 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4896      	ldr	r0, [pc, #600]	@ (8000e68 <main+0x2e0>)
 8000c0e:	f7ff fe98 	bl	8000942 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000c12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ffa4 	bl	8000b64 <SPI_VerifyResponse>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d016      	beq.n	8000c50 <main+0xc8>
		{
			args[0] = LED_PIN;
 8000c22:	2309      	movs	r3, #9
 8000c24:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			args[1] = LED_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

			//send arguments
			SPI_SendData(SPI2,args,2);
 8000c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c32:	2202      	movs	r2, #2
 8000c34:	4619      	mov	r1, r3
 8000c36:	488c      	ldr	r0, [pc, #560]	@ (8000e68 <main+0x2e0>)
 8000c38:	f7ff fe4c 	bl	80008d4 <SPI_SendData>
			// dummy read
			SPI_ReceiveData(SPI2,args,2);
 8000c3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c40:	2202      	movs	r2, #2
 8000c42:	4619      	mov	r1, r3
 8000c44:	4888      	ldr	r0, [pc, #544]	@ (8000e68 <main+0x2e0>)
 8000c46:	f7ff fe7c 	bl	8000942 <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL Executed\n");
 8000c4a:	4889      	ldr	r0, [pc, #548]	@ (8000e70 <main+0x2e8>)
 8000c4c:	f000 faf4 	bl	8001238 <puts>


		//2. CMD_SENOSR_READ   <analog pin number(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000c50:	bf00      	nop
 8000c52:	2100      	movs	r1, #0
 8000c54:	4885      	ldr	r0, [pc, #532]	@ (8000e6c <main+0x2e4>)
 8000c56:	f7ff fd79 	bl	800074c <GPIO_ReadFromInputPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f8      	beq.n	8000c52 <main+0xca>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000c60:	f7ff fef2 	bl	8000a48 <delay>

		commandcode = COMMAND_SENSOR_READ;
 8000c64:	2351      	movs	r3, #81	@ 0x51
 8000c66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000c6a:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4619      	mov	r1, r3
 8000c72:	487d      	ldr	r0, [pc, #500]	@ (8000e68 <main+0x2e0>)
 8000c74:	f7ff fe2e 	bl	80008d4 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000c78:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4879      	ldr	r0, [pc, #484]	@ (8000e68 <main+0x2e0>)
 8000c82:	f7ff fe5e 	bl	8000942 <SPI_ReceiveData>


		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000c86:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4876      	ldr	r0, [pc, #472]	@ (8000e68 <main+0x2e0>)
 8000c90:	f7ff fe20 	bl	80008d4 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4872      	ldr	r0, [pc, #456]	@ (8000e68 <main+0x2e0>)
 8000c9e:	f7ff fe50 	bl	8000942 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000ca2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff5c 	bl	8000b64 <SPI_VerifyResponse>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d024      	beq.n	8000cfc <main+0x174>
		{
			args[0] = ANALOG_PIN0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000cb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4869      	ldr	r0, [pc, #420]	@ (8000e68 <main+0x2e0>)
 8000cc2:	f7ff fe07 	bl	80008d4 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000cc6:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4866      	ldr	r0, [pc, #408]	@ (8000e68 <main+0x2e0>)
 8000cd0:	f7ff fe37 	bl	8000942 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000cd4:	f7ff feb8 	bl	8000a48 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000cd8:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4861      	ldr	r0, [pc, #388]	@ (8000e68 <main+0x2e0>)
 8000ce2:	f7ff fdf7 	bl	80008d4 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 8000ce6:	1cfb      	adds	r3, r7, #3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	485e      	ldr	r0, [pc, #376]	@ (8000e68 <main+0x2e0>)
 8000cee:	f7ff fe28 	bl	8000942 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	485f      	ldr	r0, [pc, #380]	@ (8000e74 <main+0x2ec>)
 8000cf8:	f000 fa36 	bl	8001168 <iprintf>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000cfc:	bf00      	nop
 8000cfe:	2100      	movs	r1, #0
 8000d00:	485a      	ldr	r0, [pc, #360]	@ (8000e6c <main+0x2e4>)
 8000d02:	f7ff fd23 	bl	800074c <GPIO_ReadFromInputPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f8      	beq.n	8000cfe <main+0x176>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000d0c:	f7ff fe9c 	bl	8000a48 <delay>

		commandcode = COMMAND_LED_READ;
 8000d10:	2352      	movs	r3, #82	@ 0x52
 8000d12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000d16:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4852      	ldr	r0, [pc, #328]	@ (8000e68 <main+0x2e0>)
 8000d20:	f7ff fdd8 	bl	80008d4 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000d24:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	484e      	ldr	r0, [pc, #312]	@ (8000e68 <main+0x2e0>)
 8000d2e:	f7ff fe08 	bl	8000942 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000d32:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	484b      	ldr	r0, [pc, #300]	@ (8000e68 <main+0x2e0>)
 8000d3c:	f7ff fdca 	bl	80008d4 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000d40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d44:	2201      	movs	r2, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	4847      	ldr	r0, [pc, #284]	@ (8000e68 <main+0x2e0>)
 8000d4a:	f7ff fdfa 	bl	8000942 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff06 	bl	8000b64 <SPI_VerifyResponse>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d024      	beq.n	8000da8 <main+0x220>
		{
			args[0] = LED_PIN;
 8000d5e:	2309      	movs	r3, #9
 8000d60:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000d64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	483e      	ldr	r0, [pc, #248]	@ (8000e68 <main+0x2e0>)
 8000d6e:	f7ff fdb1 	bl	80008d4 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000d72:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000d76:	2201      	movs	r2, #1
 8000d78:	4619      	mov	r1, r3
 8000d7a:	483b      	ldr	r0, [pc, #236]	@ (8000e68 <main+0x2e0>)
 8000d7c:	f7ff fde1 	bl	8000942 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000d80:	f7ff fe62 	bl	8000a48 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000d84:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4836      	ldr	r0, [pc, #216]	@ (8000e68 <main+0x2e0>)
 8000d8e:	f7ff fda1 	bl	80008d4 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2,&led_status,1);
 8000d92:	1cbb      	adds	r3, r7, #2
 8000d94:	2201      	movs	r2, #1
 8000d96:	4619      	mov	r1, r3
 8000d98:	4833      	ldr	r0, [pc, #204]	@ (8000e68 <main+0x2e0>)
 8000d9a:	f7ff fdd2 	bl	8000942 <SPI_ReceiveData>
			printf("COMMAND_READ_LED %d\n",led_status);
 8000d9e:	78bb      	ldrb	r3, [r7, #2]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4835      	ldr	r0, [pc, #212]	@ (8000e78 <main+0x2f0>)
 8000da4:	f000 f9e0 	bl	8001168 <iprintf>
		}

		//4. CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000da8:	bf00      	nop
 8000daa:	2100      	movs	r1, #0
 8000dac:	482f      	ldr	r0, [pc, #188]	@ (8000e6c <main+0x2e4>)
 8000dae:	f7ff fccd 	bl	800074c <GPIO_ReadFromInputPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f8      	beq.n	8000daa <main+0x222>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000db8:	f7ff fe46 	bl	8000a48 <delay>

		commandcode = COMMAND_PRINT;
 8000dbc:	2353      	movs	r3, #83	@ 0x53
 8000dbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000dc2:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4827      	ldr	r0, [pc, #156]	@ (8000e68 <main+0x2e0>)
 8000dcc:	f7ff fd82 	bl	80008d4 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000dd0:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4823      	ldr	r0, [pc, #140]	@ (8000e68 <main+0x2e0>)
 8000dda:	f7ff fdb2 	bl	8000942 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000dde:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000de2:	2201      	movs	r2, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	4820      	ldr	r0, [pc, #128]	@ (8000e68 <main+0x2e0>)
 8000de8:	f7ff fd74 	bl	80008d4 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	481c      	ldr	r0, [pc, #112]	@ (8000e68 <main+0x2e0>)
 8000df6:	f7ff fda4 	bl	8000942 <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <main+0x2f4>)
 8000dfc:	f107 0410 	add.w	r4, r7, #16
 8000e00:	461d      	mov	r5, r3
 8000e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e0a:	6020      	str	r0, [r4, #0]
 8000e0c:	3404      	adds	r4, #4
 8000e0e:	8021      	strh	r1, [r4, #0]
 8000e10:	3402      	adds	r4, #2
 8000e12:	0c0b      	lsrs	r3, r1, #16
 8000e14:	7023      	strb	r3, [r4, #0]
		if( SPI_VerifyResponse(ackbyte))
 8000e16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fea2 	bl	8000b64 <SPI_VerifyResponse>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d048      	beq.n	8000eb8 <main+0x330>
		{
			args[0] = strlen((char*)message);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff f9d0 	bl	80001d0 <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000e38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <main+0x2e0>)
 8000e42:	f7ff fd47 	bl	80008d4 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000e46:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <main+0x2e0>)
 8000e50:	f7ff fd77 	bl	8000942 <SPI_ReceiveData>

			delay();
 8000e54:	f7ff fdf8 	bl	8000a48 <delay>

			//send message
			for(int i = 0 ; i < args[0] ; i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e5c:	e023      	b.n	8000ea6 <main+0x31e>
 8000e5e:	bf00      	nop
 8000e60:	08002494 	.word	0x08002494
 8000e64:	080024ac 	.word	0x080024ac
 8000e68:	40003800 	.word	0x40003800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	080024bc 	.word	0x080024bc
 8000e74:	080024d8 	.word	0x080024d8
 8000e78:	080024f0 	.word	0x080024f0
 8000e7c:	08002550 	.word	0x08002550
				SPI_SendData(SPI2,&message[i],1);
 8000e80:	f107 0210 	add.w	r2, r7, #16
 8000e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e86:	4413      	add	r3, r2
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	483b      	ldr	r0, [pc, #236]	@ (8000f7c <main+0x3f4>)
 8000e8e:	f7ff fd21 	bl	80008d4 <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 8000e92:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000e96:	2201      	movs	r2, #1
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4838      	ldr	r0, [pc, #224]	@ (8000f7c <main+0x3f4>)
 8000e9c:	f7ff fd51 	bl	8000942 <SPI_ReceiveData>
			for(int i = 0 ; i < args[0] ; i++){
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ea6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000eaa:	461a      	mov	r2, r3
 8000eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	dbe6      	blt.n	8000e80 <main+0x2f8>
			}

			printf("COMMAND_PRINT Executed \n");
 8000eb2:	4833      	ldr	r0, [pc, #204]	@ (8000f80 <main+0x3f8>)
 8000eb4:	f000 f9c0 	bl	8001238 <puts>

		}

		//5. CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000eb8:	bf00      	nop
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4831      	ldr	r0, [pc, #196]	@ (8000f84 <main+0x3fc>)
 8000ebe:	f7ff fc45 	bl	800074c <GPIO_ReadFromInputPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f8      	beq.n	8000eba <main+0x332>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000ec8:	f7ff fdbe 	bl	8000a48 <delay>

		commandcode = COMMAND_ID_READ;
 8000ecc:	2354      	movs	r3, #84	@ 0x54
 8000ece:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000ed2:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4828      	ldr	r0, [pc, #160]	@ (8000f7c <main+0x3f4>)
 8000edc:	f7ff fcfa 	bl	80008d4 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000ee0:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4824      	ldr	r0, [pc, #144]	@ (8000f7c <main+0x3f4>)
 8000eea:	f7ff fd2a 	bl	8000942 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000eee:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	@ (8000f7c <main+0x3f4>)
 8000ef8:	f7ff fcec 	bl	80008d4 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	481d      	ldr	r0, [pc, #116]	@ (8000f7c <main+0x3f4>)
 8000f06:	f7ff fd1c 	bl	8000942 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
		if( SPI_VerifyResponse(ackbyte))
 8000f0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe26 	bl	8000b64 <SPI_VerifyResponse>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01e      	beq.n	8000f5c <main+0x3d4>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f22:	e011      	b.n	8000f48 <main+0x3c0>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000f24:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4813      	ldr	r0, [pc, #76]	@ (8000f7c <main+0x3f4>)
 8000f2e:	f7ff fcd1 	bl	80008d4 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 8000f32:	1d3a      	adds	r2, r7, #4
 8000f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f36:	4413      	add	r3, r2
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480f      	ldr	r0, [pc, #60]	@ (8000f7c <main+0x3f4>)
 8000f3e:	f7ff fd00 	bl	8000942 <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 8000f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f44:	3301      	adds	r3, #1
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	d9ea      	bls.n	8000f24 <main+0x39c>
			}

			id[10] = '\0';
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <main+0x400>)
 8000f58:	f000 f906 	bl	8001168 <iprintf>

		}

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000f5c:	bf00      	nop
 8000f5e:	2180      	movs	r1, #128	@ 0x80
 8000f60:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <main+0x3f4>)
 8000f62:	f7ff fd5d 	bl	8000a20 <SPI_GetFlagStatus>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f8      	bne.n	8000f5e <main+0x3d6>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <main+0x3f4>)
 8000f70:	f7ff fd1e 	bl	80009b0 <SPI_PeripheralControl>

		printf("SPI Communication Closed\n");
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <main+0x404>)
 8000f76:	f000 f95f 	bl	8001238 <puts>
	{
 8000f7a:	e61d      	b.n	8000bb8 <main+0x30>
 8000f7c:	40003800 	.word	0x40003800
 8000f80:	08002508 	.word	0x08002508
 8000f84:	40020000 	.word	0x40020000
 8000f88:	08002520 	.word	0x08002520
 8000f8c:	08002534 	.word	0x08002534

08000f90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000fbe:	f000 fa69 	bl	8001494 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000fc2:	f7ff fde1 	bl	8000b88 <main>

08000fc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   r0, =_estack
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fd4:	080025c4 	.word	0x080025c4
  ldr r2, =_sbss
 8000fd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fdc:	20000280 	.word	0x20000280

08000fe0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <std>:
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	b510      	push	{r4, lr}
 8000fe8:	4604      	mov	r4, r0
 8000fea:	e9c0 3300 	strd	r3, r3, [r0]
 8000fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ff2:	6083      	str	r3, [r0, #8]
 8000ff4:	8181      	strh	r1, [r0, #12]
 8000ff6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ff8:	81c2      	strh	r2, [r0, #14]
 8000ffa:	6183      	str	r3, [r0, #24]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2208      	movs	r2, #8
 8001000:	305c      	adds	r0, #92	@ 0x5c
 8001002:	f000 f9f9 	bl	80013f8 <memset>
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <std+0x58>)
 8001008:	6263      	str	r3, [r4, #36]	@ 0x24
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <std+0x5c>)
 800100c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <std+0x60>)
 8001010:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <std+0x64>)
 8001014:	6323      	str	r3, [r4, #48]	@ 0x30
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <std+0x68>)
 8001018:	6224      	str	r4, [r4, #32]
 800101a:	429c      	cmp	r4, r3
 800101c:	d006      	beq.n	800102c <std+0x48>
 800101e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001022:	4294      	cmp	r4, r2
 8001024:	d002      	beq.n	800102c <std+0x48>
 8001026:	33d0      	adds	r3, #208	@ 0xd0
 8001028:	429c      	cmp	r4, r3
 800102a:	d105      	bne.n	8001038 <std+0x54>
 800102c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001034:	f000 ba52 	b.w	80014dc <__retarget_lock_init_recursive>
 8001038:	bd10      	pop	{r4, pc}
 800103a:	bf00      	nop
 800103c:	08001249 	.word	0x08001249
 8001040:	0800126b 	.word	0x0800126b
 8001044:	080012a3 	.word	0x080012a3
 8001048:	080012c7 	.word	0x080012c7
 800104c:	20000084 	.word	0x20000084

08001050 <stdio_exit_handler>:
 8001050:	4a02      	ldr	r2, [pc, #8]	@ (800105c <stdio_exit_handler+0xc>)
 8001052:	4903      	ldr	r1, [pc, #12]	@ (8001060 <stdio_exit_handler+0x10>)
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <stdio_exit_handler+0x14>)
 8001056:	f000 b869 	b.w	800112c <_fwalk_sglue>
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000
 8001060:	08001d79 	.word	0x08001d79
 8001064:	20000010 	.word	0x20000010

08001068 <cleanup_stdio>:
 8001068:	6841      	ldr	r1, [r0, #4]
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <cleanup_stdio+0x34>)
 800106c:	4299      	cmp	r1, r3
 800106e:	b510      	push	{r4, lr}
 8001070:	4604      	mov	r4, r0
 8001072:	d001      	beq.n	8001078 <cleanup_stdio+0x10>
 8001074:	f000 fe80 	bl	8001d78 <_fflush_r>
 8001078:	68a1      	ldr	r1, [r4, #8]
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <cleanup_stdio+0x38>)
 800107c:	4299      	cmp	r1, r3
 800107e:	d002      	beq.n	8001086 <cleanup_stdio+0x1e>
 8001080:	4620      	mov	r0, r4
 8001082:	f000 fe79 	bl	8001d78 <_fflush_r>
 8001086:	68e1      	ldr	r1, [r4, #12]
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <cleanup_stdio+0x3c>)
 800108a:	4299      	cmp	r1, r3
 800108c:	d004      	beq.n	8001098 <cleanup_stdio+0x30>
 800108e:	4620      	mov	r0, r4
 8001090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001094:	f000 be70 	b.w	8001d78 <_fflush_r>
 8001098:	bd10      	pop	{r4, pc}
 800109a:	bf00      	nop
 800109c:	20000084 	.word	0x20000084
 80010a0:	200000ec 	.word	0x200000ec
 80010a4:	20000154 	.word	0x20000154

080010a8 <global_stdio_init.part.0>:
 80010a8:	b510      	push	{r4, lr}
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <global_stdio_init.part.0+0x30>)
 80010ac:	4c0b      	ldr	r4, [pc, #44]	@ (80010dc <global_stdio_init.part.0+0x34>)
 80010ae:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <global_stdio_init.part.0+0x38>)
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	4620      	mov	r0, r4
 80010b4:	2200      	movs	r2, #0
 80010b6:	2104      	movs	r1, #4
 80010b8:	f7ff ff94 	bl	8000fe4 <std>
 80010bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80010c0:	2201      	movs	r2, #1
 80010c2:	2109      	movs	r1, #9
 80010c4:	f7ff ff8e 	bl	8000fe4 <std>
 80010c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010cc:	2202      	movs	r2, #2
 80010ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010d2:	2112      	movs	r1, #18
 80010d4:	f7ff bf86 	b.w	8000fe4 <std>
 80010d8:	200001bc 	.word	0x200001bc
 80010dc:	20000084 	.word	0x20000084
 80010e0:	08001051 	.word	0x08001051

080010e4 <__sfp_lock_acquire>:
 80010e4:	4801      	ldr	r0, [pc, #4]	@ (80010ec <__sfp_lock_acquire+0x8>)
 80010e6:	f000 b9fa 	b.w	80014de <__retarget_lock_acquire_recursive>
 80010ea:	bf00      	nop
 80010ec:	200001c5 	.word	0x200001c5

080010f0 <__sfp_lock_release>:
 80010f0:	4801      	ldr	r0, [pc, #4]	@ (80010f8 <__sfp_lock_release+0x8>)
 80010f2:	f000 b9f5 	b.w	80014e0 <__retarget_lock_release_recursive>
 80010f6:	bf00      	nop
 80010f8:	200001c5 	.word	0x200001c5

080010fc <__sinit>:
 80010fc:	b510      	push	{r4, lr}
 80010fe:	4604      	mov	r4, r0
 8001100:	f7ff fff0 	bl	80010e4 <__sfp_lock_acquire>
 8001104:	6a23      	ldr	r3, [r4, #32]
 8001106:	b11b      	cbz	r3, 8001110 <__sinit+0x14>
 8001108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800110c:	f7ff bff0 	b.w	80010f0 <__sfp_lock_release>
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__sinit+0x28>)
 8001112:	6223      	str	r3, [r4, #32]
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <__sinit+0x2c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f5      	bne.n	8001108 <__sinit+0xc>
 800111c:	f7ff ffc4 	bl	80010a8 <global_stdio_init.part.0>
 8001120:	e7f2      	b.n	8001108 <__sinit+0xc>
 8001122:	bf00      	nop
 8001124:	08001069 	.word	0x08001069
 8001128:	200001bc 	.word	0x200001bc

0800112c <_fwalk_sglue>:
 800112c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001130:	4607      	mov	r7, r0
 8001132:	4688      	mov	r8, r1
 8001134:	4614      	mov	r4, r2
 8001136:	2600      	movs	r6, #0
 8001138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800113c:	f1b9 0901 	subs.w	r9, r9, #1
 8001140:	d505      	bpl.n	800114e <_fwalk_sglue+0x22>
 8001142:	6824      	ldr	r4, [r4, #0]
 8001144:	2c00      	cmp	r4, #0
 8001146:	d1f7      	bne.n	8001138 <_fwalk_sglue+0xc>
 8001148:	4630      	mov	r0, r6
 800114a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800114e:	89ab      	ldrh	r3, [r5, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d907      	bls.n	8001164 <_fwalk_sglue+0x38>
 8001154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001158:	3301      	adds	r3, #1
 800115a:	d003      	beq.n	8001164 <_fwalk_sglue+0x38>
 800115c:	4629      	mov	r1, r5
 800115e:	4638      	mov	r0, r7
 8001160:	47c0      	blx	r8
 8001162:	4306      	orrs	r6, r0
 8001164:	3568      	adds	r5, #104	@ 0x68
 8001166:	e7e9      	b.n	800113c <_fwalk_sglue+0x10>

08001168 <iprintf>:
 8001168:	b40f      	push	{r0, r1, r2, r3}
 800116a:	b507      	push	{r0, r1, r2, lr}
 800116c:	4906      	ldr	r1, [pc, #24]	@ (8001188 <iprintf+0x20>)
 800116e:	ab04      	add	r3, sp, #16
 8001170:	6808      	ldr	r0, [r1, #0]
 8001172:	f853 2b04 	ldr.w	r2, [r3], #4
 8001176:	6881      	ldr	r1, [r0, #8]
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f000 fad5 	bl	8001728 <_vfiprintf_r>
 800117e:	b003      	add	sp, #12
 8001180:	f85d eb04 	ldr.w	lr, [sp], #4
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr
 8001188:	2000000c 	.word	0x2000000c

0800118c <_puts_r>:
 800118c:	6a03      	ldr	r3, [r0, #32]
 800118e:	b570      	push	{r4, r5, r6, lr}
 8001190:	6884      	ldr	r4, [r0, #8]
 8001192:	4605      	mov	r5, r0
 8001194:	460e      	mov	r6, r1
 8001196:	b90b      	cbnz	r3, 800119c <_puts_r+0x10>
 8001198:	f7ff ffb0 	bl	80010fc <__sinit>
 800119c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800119e:	07db      	lsls	r3, r3, #31
 80011a0:	d405      	bmi.n	80011ae <_puts_r+0x22>
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	0598      	lsls	r0, r3, #22
 80011a6:	d402      	bmi.n	80011ae <_puts_r+0x22>
 80011a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011aa:	f000 f998 	bl	80014de <__retarget_lock_acquire_recursive>
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	0719      	lsls	r1, r3, #28
 80011b2:	d502      	bpl.n	80011ba <_puts_r+0x2e>
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d135      	bne.n	8001226 <_puts_r+0x9a>
 80011ba:	4621      	mov	r1, r4
 80011bc:	4628      	mov	r0, r5
 80011be:	f000 f8c5 	bl	800134c <__swsetup_r>
 80011c2:	b380      	cbz	r0, 8001226 <_puts_r+0x9a>
 80011c4:	f04f 35ff 	mov.w	r5, #4294967295
 80011c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011ca:	07da      	lsls	r2, r3, #31
 80011cc:	d405      	bmi.n	80011da <_puts_r+0x4e>
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	059b      	lsls	r3, r3, #22
 80011d2:	d402      	bmi.n	80011da <_puts_r+0x4e>
 80011d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011d6:	f000 f983 	bl	80014e0 <__retarget_lock_release_recursive>
 80011da:	4628      	mov	r0, r5
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da04      	bge.n	80011ec <_puts_r+0x60>
 80011e2:	69a2      	ldr	r2, [r4, #24]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dc17      	bgt.n	8001218 <_puts_r+0x8c>
 80011e8:	290a      	cmp	r1, #10
 80011ea:	d015      	beq.n	8001218 <_puts_r+0x8c>
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	6022      	str	r2, [r4, #0]
 80011f2:	7019      	strb	r1, [r3, #0]
 80011f4:	68a3      	ldr	r3, [r4, #8]
 80011f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011fa:	3b01      	subs	r3, #1
 80011fc:	60a3      	str	r3, [r4, #8]
 80011fe:	2900      	cmp	r1, #0
 8001200:	d1ed      	bne.n	80011de <_puts_r+0x52>
 8001202:	2b00      	cmp	r3, #0
 8001204:	da11      	bge.n	800122a <_puts_r+0x9e>
 8001206:	4622      	mov	r2, r4
 8001208:	210a      	movs	r1, #10
 800120a:	4628      	mov	r0, r5
 800120c:	f000 f85f 	bl	80012ce <__swbuf_r>
 8001210:	3001      	adds	r0, #1
 8001212:	d0d7      	beq.n	80011c4 <_puts_r+0x38>
 8001214:	250a      	movs	r5, #10
 8001216:	e7d7      	b.n	80011c8 <_puts_r+0x3c>
 8001218:	4622      	mov	r2, r4
 800121a:	4628      	mov	r0, r5
 800121c:	f000 f857 	bl	80012ce <__swbuf_r>
 8001220:	3001      	adds	r0, #1
 8001222:	d1e7      	bne.n	80011f4 <_puts_r+0x68>
 8001224:	e7ce      	b.n	80011c4 <_puts_r+0x38>
 8001226:	3e01      	subs	r6, #1
 8001228:	e7e4      	b.n	80011f4 <_puts_r+0x68>
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	6022      	str	r2, [r4, #0]
 8001230:	220a      	movs	r2, #10
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e7ee      	b.n	8001214 <_puts_r+0x88>
	...

08001238 <puts>:
 8001238:	4b02      	ldr	r3, [pc, #8]	@ (8001244 <puts+0xc>)
 800123a:	4601      	mov	r1, r0
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f7ff bfa5 	b.w	800118c <_puts_r>
 8001242:	bf00      	nop
 8001244:	2000000c 	.word	0x2000000c

08001248 <__sread>:
 8001248:	b510      	push	{r4, lr}
 800124a:	460c      	mov	r4, r1
 800124c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001250:	f000 f8fc 	bl	800144c <_read_r>
 8001254:	2800      	cmp	r0, #0
 8001256:	bfab      	itete	ge
 8001258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800125a:	89a3      	ldrhlt	r3, [r4, #12]
 800125c:	181b      	addge	r3, r3, r0
 800125e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001262:	bfac      	ite	ge
 8001264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001266:	81a3      	strhlt	r3, [r4, #12]
 8001268:	bd10      	pop	{r4, pc}

0800126a <__swrite>:
 800126a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126e:	461f      	mov	r7, r3
 8001270:	898b      	ldrh	r3, [r1, #12]
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	4605      	mov	r5, r0
 8001276:	460c      	mov	r4, r1
 8001278:	4616      	mov	r6, r2
 800127a:	d505      	bpl.n	8001288 <__swrite+0x1e>
 800127c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001280:	2302      	movs	r3, #2
 8001282:	2200      	movs	r2, #0
 8001284:	f000 f8d0 	bl	8001428 <_lseek_r>
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800128e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001292:	81a3      	strh	r3, [r4, #12]
 8001294:	4632      	mov	r2, r6
 8001296:	463b      	mov	r3, r7
 8001298:	4628      	mov	r0, r5
 800129a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800129e:	f000 b8e7 	b.w	8001470 <_write_r>

080012a2 <__sseek>:
 80012a2:	b510      	push	{r4, lr}
 80012a4:	460c      	mov	r4, r1
 80012a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012aa:	f000 f8bd 	bl	8001428 <_lseek_r>
 80012ae:	1c43      	adds	r3, r0, #1
 80012b0:	89a3      	ldrh	r3, [r4, #12]
 80012b2:	bf15      	itete	ne
 80012b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012be:	81a3      	strheq	r3, [r4, #12]
 80012c0:	bf18      	it	ne
 80012c2:	81a3      	strhne	r3, [r4, #12]
 80012c4:	bd10      	pop	{r4, pc}

080012c6 <__sclose>:
 80012c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ca:	f000 b89d 	b.w	8001408 <_close_r>

080012ce <__swbuf_r>:
 80012ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d0:	460e      	mov	r6, r1
 80012d2:	4614      	mov	r4, r2
 80012d4:	4605      	mov	r5, r0
 80012d6:	b118      	cbz	r0, 80012e0 <__swbuf_r+0x12>
 80012d8:	6a03      	ldr	r3, [r0, #32]
 80012da:	b90b      	cbnz	r3, 80012e0 <__swbuf_r+0x12>
 80012dc:	f7ff ff0e 	bl	80010fc <__sinit>
 80012e0:	69a3      	ldr	r3, [r4, #24]
 80012e2:	60a3      	str	r3, [r4, #8]
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	071a      	lsls	r2, r3, #28
 80012e8:	d501      	bpl.n	80012ee <__swbuf_r+0x20>
 80012ea:	6923      	ldr	r3, [r4, #16]
 80012ec:	b943      	cbnz	r3, 8001300 <__swbuf_r+0x32>
 80012ee:	4621      	mov	r1, r4
 80012f0:	4628      	mov	r0, r5
 80012f2:	f000 f82b 	bl	800134c <__swsetup_r>
 80012f6:	b118      	cbz	r0, 8001300 <__swbuf_r+0x32>
 80012f8:	f04f 37ff 	mov.w	r7, #4294967295
 80012fc:	4638      	mov	r0, r7
 80012fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	6922      	ldr	r2, [r4, #16]
 8001304:	1a98      	subs	r0, r3, r2
 8001306:	6963      	ldr	r3, [r4, #20]
 8001308:	b2f6      	uxtb	r6, r6
 800130a:	4283      	cmp	r3, r0
 800130c:	4637      	mov	r7, r6
 800130e:	dc05      	bgt.n	800131c <__swbuf_r+0x4e>
 8001310:	4621      	mov	r1, r4
 8001312:	4628      	mov	r0, r5
 8001314:	f000 fd30 	bl	8001d78 <_fflush_r>
 8001318:	2800      	cmp	r0, #0
 800131a:	d1ed      	bne.n	80012f8 <__swbuf_r+0x2a>
 800131c:	68a3      	ldr	r3, [r4, #8]
 800131e:	3b01      	subs	r3, #1
 8001320:	60a3      	str	r3, [r4, #8]
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	6022      	str	r2, [r4, #0]
 8001328:	701e      	strb	r6, [r3, #0]
 800132a:	6962      	ldr	r2, [r4, #20]
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	429a      	cmp	r2, r3
 8001330:	d004      	beq.n	800133c <__swbuf_r+0x6e>
 8001332:	89a3      	ldrh	r3, [r4, #12]
 8001334:	07db      	lsls	r3, r3, #31
 8001336:	d5e1      	bpl.n	80012fc <__swbuf_r+0x2e>
 8001338:	2e0a      	cmp	r6, #10
 800133a:	d1df      	bne.n	80012fc <__swbuf_r+0x2e>
 800133c:	4621      	mov	r1, r4
 800133e:	4628      	mov	r0, r5
 8001340:	f000 fd1a 	bl	8001d78 <_fflush_r>
 8001344:	2800      	cmp	r0, #0
 8001346:	d0d9      	beq.n	80012fc <__swbuf_r+0x2e>
 8001348:	e7d6      	b.n	80012f8 <__swbuf_r+0x2a>
	...

0800134c <__swsetup_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <__swsetup_r+0xa8>)
 8001350:	4605      	mov	r5, r0
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	460c      	mov	r4, r1
 8001356:	b118      	cbz	r0, 8001360 <__swsetup_r+0x14>
 8001358:	6a03      	ldr	r3, [r0, #32]
 800135a:	b90b      	cbnz	r3, 8001360 <__swsetup_r+0x14>
 800135c:	f7ff fece 	bl	80010fc <__sinit>
 8001360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001364:	0719      	lsls	r1, r3, #28
 8001366:	d422      	bmi.n	80013ae <__swsetup_r+0x62>
 8001368:	06da      	lsls	r2, r3, #27
 800136a:	d407      	bmi.n	800137c <__swsetup_r+0x30>
 800136c:	2209      	movs	r2, #9
 800136e:	602a      	str	r2, [r5, #0]
 8001370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001374:	81a3      	strh	r3, [r4, #12]
 8001376:	f04f 30ff 	mov.w	r0, #4294967295
 800137a:	e033      	b.n	80013e4 <__swsetup_r+0x98>
 800137c:	0758      	lsls	r0, r3, #29
 800137e:	d512      	bpl.n	80013a6 <__swsetup_r+0x5a>
 8001380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001382:	b141      	cbz	r1, 8001396 <__swsetup_r+0x4a>
 8001384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001388:	4299      	cmp	r1, r3
 800138a:	d002      	beq.n	8001392 <__swsetup_r+0x46>
 800138c:	4628      	mov	r0, r5
 800138e:	f000 f8a9 	bl	80014e4 <_free_r>
 8001392:	2300      	movs	r3, #0
 8001394:	6363      	str	r3, [r4, #52]	@ 0x34
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800139c:	81a3      	strh	r3, [r4, #12]
 800139e:	2300      	movs	r3, #0
 80013a0:	6063      	str	r3, [r4, #4]
 80013a2:	6923      	ldr	r3, [r4, #16]
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	6923      	ldr	r3, [r4, #16]
 80013b0:	b94b      	cbnz	r3, 80013c6 <__swsetup_r+0x7a>
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013bc:	d003      	beq.n	80013c6 <__swsetup_r+0x7a>
 80013be:	4621      	mov	r1, r4
 80013c0:	4628      	mov	r0, r5
 80013c2:	f000 fd27 	bl	8001e14 <__smakebuf_r>
 80013c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ca:	f013 0201 	ands.w	r2, r3, #1
 80013ce:	d00a      	beq.n	80013e6 <__swsetup_r+0x9a>
 80013d0:	2200      	movs	r2, #0
 80013d2:	60a2      	str	r2, [r4, #8]
 80013d4:	6962      	ldr	r2, [r4, #20]
 80013d6:	4252      	negs	r2, r2
 80013d8:	61a2      	str	r2, [r4, #24]
 80013da:	6922      	ldr	r2, [r4, #16]
 80013dc:	b942      	cbnz	r2, 80013f0 <__swsetup_r+0xa4>
 80013de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013e2:	d1c5      	bne.n	8001370 <__swsetup_r+0x24>
 80013e4:	bd38      	pop	{r3, r4, r5, pc}
 80013e6:	0799      	lsls	r1, r3, #30
 80013e8:	bf58      	it	pl
 80013ea:	6962      	ldrpl	r2, [r4, #20]
 80013ec:	60a2      	str	r2, [r4, #8]
 80013ee:	e7f4      	b.n	80013da <__swsetup_r+0x8e>
 80013f0:	2000      	movs	r0, #0
 80013f2:	e7f7      	b.n	80013e4 <__swsetup_r+0x98>
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <memset>:
 80013f8:	4402      	add	r2, r0
 80013fa:	4603      	mov	r3, r0
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d100      	bne.n	8001402 <memset+0xa>
 8001400:	4770      	bx	lr
 8001402:	f803 1b01 	strb.w	r1, [r3], #1
 8001406:	e7f9      	b.n	80013fc <memset+0x4>

08001408 <_close_r>:
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	4d06      	ldr	r5, [pc, #24]	@ (8001424 <_close_r+0x1c>)
 800140c:	2300      	movs	r3, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	602b      	str	r3, [r5, #0]
 8001414:	f000 fe3e 	bl	8002094 <_close>
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	d102      	bne.n	8001422 <_close_r+0x1a>
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	b103      	cbz	r3, 8001422 <_close_r+0x1a>
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	bd38      	pop	{r3, r4, r5, pc}
 8001424:	200001c0 	.word	0x200001c0

08001428 <_lseek_r>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4d07      	ldr	r5, [pc, #28]	@ (8001448 <_lseek_r+0x20>)
 800142c:	4604      	mov	r4, r0
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	2200      	movs	r2, #0
 8001434:	602a      	str	r2, [r5, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	f000 fded 	bl	8002016 <_lseek>
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	d102      	bne.n	8001446 <_lseek_r+0x1e>
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	b103      	cbz	r3, 8001446 <_lseek_r+0x1e>
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	bd38      	pop	{r3, r4, r5, pc}
 8001448:	200001c0 	.word	0x200001c0

0800144c <_read_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4d07      	ldr	r5, [pc, #28]	@ (800146c <_read_r+0x20>)
 8001450:	4604      	mov	r4, r0
 8001452:	4608      	mov	r0, r1
 8001454:	4611      	mov	r1, r2
 8001456:	2200      	movs	r2, #0
 8001458:	602a      	str	r2, [r5, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	f000 fd85 	bl	8001f6a <_read>
 8001460:	1c43      	adds	r3, r0, #1
 8001462:	d102      	bne.n	800146a <_read_r+0x1e>
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	b103      	cbz	r3, 800146a <_read_r+0x1e>
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	200001c0 	.word	0x200001c0

08001470 <_write_r>:
 8001470:	b538      	push	{r3, r4, r5, lr}
 8001472:	4d07      	ldr	r5, [pc, #28]	@ (8001490 <_write_r+0x20>)
 8001474:	4604      	mov	r4, r0
 8001476:	4608      	mov	r0, r1
 8001478:	4611      	mov	r1, r2
 800147a:	2200      	movs	r2, #0
 800147c:	602a      	str	r2, [r5, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	f000 fddb 	bl	800203a <_write>
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d102      	bne.n	800148e <_write_r+0x1e>
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	b103      	cbz	r3, 800148e <_write_r+0x1e>
 800148c:	6023      	str	r3, [r4, #0]
 800148e:	bd38      	pop	{r3, r4, r5, pc}
 8001490:	200001c0 	.word	0x200001c0

08001494 <__libc_init_array>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	4d0d      	ldr	r5, [pc, #52]	@ (80014cc <__libc_init_array+0x38>)
 8001498:	4c0d      	ldr	r4, [pc, #52]	@ (80014d0 <__libc_init_array+0x3c>)
 800149a:	1b64      	subs	r4, r4, r5
 800149c:	10a4      	asrs	r4, r4, #2
 800149e:	2600      	movs	r6, #0
 80014a0:	42a6      	cmp	r6, r4
 80014a2:	d109      	bne.n	80014b8 <__libc_init_array+0x24>
 80014a4:	4d0b      	ldr	r5, [pc, #44]	@ (80014d4 <__libc_init_array+0x40>)
 80014a6:	4c0c      	ldr	r4, [pc, #48]	@ (80014d8 <__libc_init_array+0x44>)
 80014a8:	f000 ffe8 	bl	800247c <_init>
 80014ac:	1b64      	subs	r4, r4, r5
 80014ae:	10a4      	asrs	r4, r4, #2
 80014b0:	2600      	movs	r6, #0
 80014b2:	42a6      	cmp	r6, r4
 80014b4:	d105      	bne.n	80014c2 <__libc_init_array+0x2e>
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
 80014b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80014bc:	4798      	blx	r3
 80014be:	3601      	adds	r6, #1
 80014c0:	e7ee      	b.n	80014a0 <__libc_init_array+0xc>
 80014c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80014c6:	4798      	blx	r3
 80014c8:	3601      	adds	r6, #1
 80014ca:	e7f2      	b.n	80014b2 <__libc_init_array+0x1e>
 80014cc:	080025bc 	.word	0x080025bc
 80014d0:	080025bc 	.word	0x080025bc
 80014d4:	080025bc 	.word	0x080025bc
 80014d8:	080025c0 	.word	0x080025c0

080014dc <__retarget_lock_init_recursive>:
 80014dc:	4770      	bx	lr

080014de <__retarget_lock_acquire_recursive>:
 80014de:	4770      	bx	lr

080014e0 <__retarget_lock_release_recursive>:
 80014e0:	4770      	bx	lr
	...

080014e4 <_free_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4605      	mov	r5, r0
 80014e8:	2900      	cmp	r1, #0
 80014ea:	d041      	beq.n	8001570 <_free_r+0x8c>
 80014ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014f0:	1f0c      	subs	r4, r1, #4
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bfb8      	it	lt
 80014f6:	18e4      	addlt	r4, r4, r3
 80014f8:	f000 f8e0 	bl	80016bc <__malloc_lock>
 80014fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001574 <_free_r+0x90>)
 80014fe:	6813      	ldr	r3, [r2, #0]
 8001500:	b933      	cbnz	r3, 8001510 <_free_r+0x2c>
 8001502:	6063      	str	r3, [r4, #4]
 8001504:	6014      	str	r4, [r2, #0]
 8001506:	4628      	mov	r0, r5
 8001508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800150c:	f000 b8dc 	b.w	80016c8 <__malloc_unlock>
 8001510:	42a3      	cmp	r3, r4
 8001512:	d908      	bls.n	8001526 <_free_r+0x42>
 8001514:	6820      	ldr	r0, [r4, #0]
 8001516:	1821      	adds	r1, r4, r0
 8001518:	428b      	cmp	r3, r1
 800151a:	bf01      	itttt	eq
 800151c:	6819      	ldreq	r1, [r3, #0]
 800151e:	685b      	ldreq	r3, [r3, #4]
 8001520:	1809      	addeq	r1, r1, r0
 8001522:	6021      	streq	r1, [r4, #0]
 8001524:	e7ed      	b.n	8001502 <_free_r+0x1e>
 8001526:	461a      	mov	r2, r3
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	b10b      	cbz	r3, 8001530 <_free_r+0x4c>
 800152c:	42a3      	cmp	r3, r4
 800152e:	d9fa      	bls.n	8001526 <_free_r+0x42>
 8001530:	6811      	ldr	r1, [r2, #0]
 8001532:	1850      	adds	r0, r2, r1
 8001534:	42a0      	cmp	r0, r4
 8001536:	d10b      	bne.n	8001550 <_free_r+0x6c>
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	4401      	add	r1, r0
 800153c:	1850      	adds	r0, r2, r1
 800153e:	4283      	cmp	r3, r0
 8001540:	6011      	str	r1, [r2, #0]
 8001542:	d1e0      	bne.n	8001506 <_free_r+0x22>
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	6053      	str	r3, [r2, #4]
 800154a:	4408      	add	r0, r1
 800154c:	6010      	str	r0, [r2, #0]
 800154e:	e7da      	b.n	8001506 <_free_r+0x22>
 8001550:	d902      	bls.n	8001558 <_free_r+0x74>
 8001552:	230c      	movs	r3, #12
 8001554:	602b      	str	r3, [r5, #0]
 8001556:	e7d6      	b.n	8001506 <_free_r+0x22>
 8001558:	6820      	ldr	r0, [r4, #0]
 800155a:	1821      	adds	r1, r4, r0
 800155c:	428b      	cmp	r3, r1
 800155e:	bf04      	itt	eq
 8001560:	6819      	ldreq	r1, [r3, #0]
 8001562:	685b      	ldreq	r3, [r3, #4]
 8001564:	6063      	str	r3, [r4, #4]
 8001566:	bf04      	itt	eq
 8001568:	1809      	addeq	r1, r1, r0
 800156a:	6021      	streq	r1, [r4, #0]
 800156c:	6054      	str	r4, [r2, #4]
 800156e:	e7ca      	b.n	8001506 <_free_r+0x22>
 8001570:	bd38      	pop	{r3, r4, r5, pc}
 8001572:	bf00      	nop
 8001574:	200001cc 	.word	0x200001cc

08001578 <sbrk_aligned>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4e0f      	ldr	r6, [pc, #60]	@ (80015b8 <sbrk_aligned+0x40>)
 800157c:	460c      	mov	r4, r1
 800157e:	6831      	ldr	r1, [r6, #0]
 8001580:	4605      	mov	r5, r0
 8001582:	b911      	cbnz	r1, 800158a <sbrk_aligned+0x12>
 8001584:	f000 fca4 	bl	8001ed0 <_sbrk_r>
 8001588:	6030      	str	r0, [r6, #0]
 800158a:	4621      	mov	r1, r4
 800158c:	4628      	mov	r0, r5
 800158e:	f000 fc9f 	bl	8001ed0 <_sbrk_r>
 8001592:	1c43      	adds	r3, r0, #1
 8001594:	d103      	bne.n	800159e <sbrk_aligned+0x26>
 8001596:	f04f 34ff 	mov.w	r4, #4294967295
 800159a:	4620      	mov	r0, r4
 800159c:	bd70      	pop	{r4, r5, r6, pc}
 800159e:	1cc4      	adds	r4, r0, #3
 80015a0:	f024 0403 	bic.w	r4, r4, #3
 80015a4:	42a0      	cmp	r0, r4
 80015a6:	d0f8      	beq.n	800159a <sbrk_aligned+0x22>
 80015a8:	1a21      	subs	r1, r4, r0
 80015aa:	4628      	mov	r0, r5
 80015ac:	f000 fc90 	bl	8001ed0 <_sbrk_r>
 80015b0:	3001      	adds	r0, #1
 80015b2:	d1f2      	bne.n	800159a <sbrk_aligned+0x22>
 80015b4:	e7ef      	b.n	8001596 <sbrk_aligned+0x1e>
 80015b6:	bf00      	nop
 80015b8:	200001c8 	.word	0x200001c8

080015bc <_malloc_r>:
 80015bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015c0:	1ccd      	adds	r5, r1, #3
 80015c2:	f025 0503 	bic.w	r5, r5, #3
 80015c6:	3508      	adds	r5, #8
 80015c8:	2d0c      	cmp	r5, #12
 80015ca:	bf38      	it	cc
 80015cc:	250c      	movcc	r5, #12
 80015ce:	2d00      	cmp	r5, #0
 80015d0:	4606      	mov	r6, r0
 80015d2:	db01      	blt.n	80015d8 <_malloc_r+0x1c>
 80015d4:	42a9      	cmp	r1, r5
 80015d6:	d904      	bls.n	80015e2 <_malloc_r+0x26>
 80015d8:	230c      	movs	r3, #12
 80015da:	6033      	str	r3, [r6, #0]
 80015dc:	2000      	movs	r0, #0
 80015de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80016b8 <_malloc_r+0xfc>
 80015e6:	f000 f869 	bl	80016bc <__malloc_lock>
 80015ea:	f8d8 3000 	ldr.w	r3, [r8]
 80015ee:	461c      	mov	r4, r3
 80015f0:	bb44      	cbnz	r4, 8001644 <_malloc_r+0x88>
 80015f2:	4629      	mov	r1, r5
 80015f4:	4630      	mov	r0, r6
 80015f6:	f7ff ffbf 	bl	8001578 <sbrk_aligned>
 80015fa:	1c43      	adds	r3, r0, #1
 80015fc:	4604      	mov	r4, r0
 80015fe:	d158      	bne.n	80016b2 <_malloc_r+0xf6>
 8001600:	f8d8 4000 	ldr.w	r4, [r8]
 8001604:	4627      	mov	r7, r4
 8001606:	2f00      	cmp	r7, #0
 8001608:	d143      	bne.n	8001692 <_malloc_r+0xd6>
 800160a:	2c00      	cmp	r4, #0
 800160c:	d04b      	beq.n	80016a6 <_malloc_r+0xea>
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	4639      	mov	r1, r7
 8001612:	4630      	mov	r0, r6
 8001614:	eb04 0903 	add.w	r9, r4, r3
 8001618:	f000 fc5a 	bl	8001ed0 <_sbrk_r>
 800161c:	4581      	cmp	r9, r0
 800161e:	d142      	bne.n	80016a6 <_malloc_r+0xea>
 8001620:	6821      	ldr	r1, [r4, #0]
 8001622:	1a6d      	subs	r5, r5, r1
 8001624:	4629      	mov	r1, r5
 8001626:	4630      	mov	r0, r6
 8001628:	f7ff ffa6 	bl	8001578 <sbrk_aligned>
 800162c:	3001      	adds	r0, #1
 800162e:	d03a      	beq.n	80016a6 <_malloc_r+0xea>
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	442b      	add	r3, r5
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	f8d8 3000 	ldr.w	r3, [r8]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	bb62      	cbnz	r2, 8001698 <_malloc_r+0xdc>
 800163e:	f8c8 7000 	str.w	r7, [r8]
 8001642:	e00f      	b.n	8001664 <_malloc_r+0xa8>
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	1b52      	subs	r2, r2, r5
 8001648:	d420      	bmi.n	800168c <_malloc_r+0xd0>
 800164a:	2a0b      	cmp	r2, #11
 800164c:	d917      	bls.n	800167e <_malloc_r+0xc2>
 800164e:	1961      	adds	r1, r4, r5
 8001650:	42a3      	cmp	r3, r4
 8001652:	6025      	str	r5, [r4, #0]
 8001654:	bf18      	it	ne
 8001656:	6059      	strne	r1, [r3, #4]
 8001658:	6863      	ldr	r3, [r4, #4]
 800165a:	bf08      	it	eq
 800165c:	f8c8 1000 	streq.w	r1, [r8]
 8001660:	5162      	str	r2, [r4, r5]
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	4630      	mov	r0, r6
 8001666:	f000 f82f 	bl	80016c8 <__malloc_unlock>
 800166a:	f104 000b 	add.w	r0, r4, #11
 800166e:	1d23      	adds	r3, r4, #4
 8001670:	f020 0007 	bic.w	r0, r0, #7
 8001674:	1ac2      	subs	r2, r0, r3
 8001676:	bf1c      	itt	ne
 8001678:	1a1b      	subne	r3, r3, r0
 800167a:	50a3      	strne	r3, [r4, r2]
 800167c:	e7af      	b.n	80015de <_malloc_r+0x22>
 800167e:	6862      	ldr	r2, [r4, #4]
 8001680:	42a3      	cmp	r3, r4
 8001682:	bf0c      	ite	eq
 8001684:	f8c8 2000 	streq.w	r2, [r8]
 8001688:	605a      	strne	r2, [r3, #4]
 800168a:	e7eb      	b.n	8001664 <_malloc_r+0xa8>
 800168c:	4623      	mov	r3, r4
 800168e:	6864      	ldr	r4, [r4, #4]
 8001690:	e7ae      	b.n	80015f0 <_malloc_r+0x34>
 8001692:	463c      	mov	r4, r7
 8001694:	687f      	ldr	r7, [r7, #4]
 8001696:	e7b6      	b.n	8001606 <_malloc_r+0x4a>
 8001698:	461a      	mov	r2, r3
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	42a3      	cmp	r3, r4
 800169e:	d1fb      	bne.n	8001698 <_malloc_r+0xdc>
 80016a0:	2300      	movs	r3, #0
 80016a2:	6053      	str	r3, [r2, #4]
 80016a4:	e7de      	b.n	8001664 <_malloc_r+0xa8>
 80016a6:	230c      	movs	r3, #12
 80016a8:	6033      	str	r3, [r6, #0]
 80016aa:	4630      	mov	r0, r6
 80016ac:	f000 f80c 	bl	80016c8 <__malloc_unlock>
 80016b0:	e794      	b.n	80015dc <_malloc_r+0x20>
 80016b2:	6005      	str	r5, [r0, #0]
 80016b4:	e7d6      	b.n	8001664 <_malloc_r+0xa8>
 80016b6:	bf00      	nop
 80016b8:	200001cc 	.word	0x200001cc

080016bc <__malloc_lock>:
 80016bc:	4801      	ldr	r0, [pc, #4]	@ (80016c4 <__malloc_lock+0x8>)
 80016be:	f7ff bf0e 	b.w	80014de <__retarget_lock_acquire_recursive>
 80016c2:	bf00      	nop
 80016c4:	200001c4 	.word	0x200001c4

080016c8 <__malloc_unlock>:
 80016c8:	4801      	ldr	r0, [pc, #4]	@ (80016d0 <__malloc_unlock+0x8>)
 80016ca:	f7ff bf09 	b.w	80014e0 <__retarget_lock_release_recursive>
 80016ce:	bf00      	nop
 80016d0:	200001c4 	.word	0x200001c4

080016d4 <__sfputc_r>:
 80016d4:	6893      	ldr	r3, [r2, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	b410      	push	{r4}
 80016dc:	6093      	str	r3, [r2, #8]
 80016de:	da08      	bge.n	80016f2 <__sfputc_r+0x1e>
 80016e0:	6994      	ldr	r4, [r2, #24]
 80016e2:	42a3      	cmp	r3, r4
 80016e4:	db01      	blt.n	80016ea <__sfputc_r+0x16>
 80016e6:	290a      	cmp	r1, #10
 80016e8:	d103      	bne.n	80016f2 <__sfputc_r+0x1e>
 80016ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016ee:	f7ff bdee 	b.w	80012ce <__swbuf_r>
 80016f2:	6813      	ldr	r3, [r2, #0]
 80016f4:	1c58      	adds	r0, r3, #1
 80016f6:	6010      	str	r0, [r2, #0]
 80016f8:	7019      	strb	r1, [r3, #0]
 80016fa:	4608      	mov	r0, r1
 80016fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001700:	4770      	bx	lr

08001702 <__sfputs_r>:
 8001702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001704:	4606      	mov	r6, r0
 8001706:	460f      	mov	r7, r1
 8001708:	4614      	mov	r4, r2
 800170a:	18d5      	adds	r5, r2, r3
 800170c:	42ac      	cmp	r4, r5
 800170e:	d101      	bne.n	8001714 <__sfputs_r+0x12>
 8001710:	2000      	movs	r0, #0
 8001712:	e007      	b.n	8001724 <__sfputs_r+0x22>
 8001714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001718:	463a      	mov	r2, r7
 800171a:	4630      	mov	r0, r6
 800171c:	f7ff ffda 	bl	80016d4 <__sfputc_r>
 8001720:	1c43      	adds	r3, r0, #1
 8001722:	d1f3      	bne.n	800170c <__sfputs_r+0xa>
 8001724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001728 <_vfiprintf_r>:
 8001728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800172c:	460d      	mov	r5, r1
 800172e:	b09d      	sub	sp, #116	@ 0x74
 8001730:	4614      	mov	r4, r2
 8001732:	4698      	mov	r8, r3
 8001734:	4606      	mov	r6, r0
 8001736:	b118      	cbz	r0, 8001740 <_vfiprintf_r+0x18>
 8001738:	6a03      	ldr	r3, [r0, #32]
 800173a:	b90b      	cbnz	r3, 8001740 <_vfiprintf_r+0x18>
 800173c:	f7ff fcde 	bl	80010fc <__sinit>
 8001740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001742:	07d9      	lsls	r1, r3, #31
 8001744:	d405      	bmi.n	8001752 <_vfiprintf_r+0x2a>
 8001746:	89ab      	ldrh	r3, [r5, #12]
 8001748:	059a      	lsls	r2, r3, #22
 800174a:	d402      	bmi.n	8001752 <_vfiprintf_r+0x2a>
 800174c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800174e:	f7ff fec6 	bl	80014de <__retarget_lock_acquire_recursive>
 8001752:	89ab      	ldrh	r3, [r5, #12]
 8001754:	071b      	lsls	r3, r3, #28
 8001756:	d501      	bpl.n	800175c <_vfiprintf_r+0x34>
 8001758:	692b      	ldr	r3, [r5, #16]
 800175a:	b99b      	cbnz	r3, 8001784 <_vfiprintf_r+0x5c>
 800175c:	4629      	mov	r1, r5
 800175e:	4630      	mov	r0, r6
 8001760:	f7ff fdf4 	bl	800134c <__swsetup_r>
 8001764:	b170      	cbz	r0, 8001784 <_vfiprintf_r+0x5c>
 8001766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001768:	07dc      	lsls	r4, r3, #31
 800176a:	d504      	bpl.n	8001776 <_vfiprintf_r+0x4e>
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	b01d      	add	sp, #116	@ 0x74
 8001772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001776:	89ab      	ldrh	r3, [r5, #12]
 8001778:	0598      	lsls	r0, r3, #22
 800177a:	d4f7      	bmi.n	800176c <_vfiprintf_r+0x44>
 800177c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800177e:	f7ff feaf 	bl	80014e0 <__retarget_lock_release_recursive>
 8001782:	e7f3      	b.n	800176c <_vfiprintf_r+0x44>
 8001784:	2300      	movs	r3, #0
 8001786:	9309      	str	r3, [sp, #36]	@ 0x24
 8001788:	2320      	movs	r3, #32
 800178a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800178e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001792:	2330      	movs	r3, #48	@ 0x30
 8001794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001944 <_vfiprintf_r+0x21c>
 8001798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800179c:	f04f 0901 	mov.w	r9, #1
 80017a0:	4623      	mov	r3, r4
 80017a2:	469a      	mov	sl, r3
 80017a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017a8:	b10a      	cbz	r2, 80017ae <_vfiprintf_r+0x86>
 80017aa:	2a25      	cmp	r2, #37	@ 0x25
 80017ac:	d1f9      	bne.n	80017a2 <_vfiprintf_r+0x7a>
 80017ae:	ebba 0b04 	subs.w	fp, sl, r4
 80017b2:	d00b      	beq.n	80017cc <_vfiprintf_r+0xa4>
 80017b4:	465b      	mov	r3, fp
 80017b6:	4622      	mov	r2, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	4630      	mov	r0, r6
 80017bc:	f7ff ffa1 	bl	8001702 <__sfputs_r>
 80017c0:	3001      	adds	r0, #1
 80017c2:	f000 80a7 	beq.w	8001914 <_vfiprintf_r+0x1ec>
 80017c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017c8:	445a      	add	r2, fp
 80017ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80017cc:	f89a 3000 	ldrb.w	r3, [sl]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 809f 	beq.w	8001914 <_vfiprintf_r+0x1ec>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017e0:	f10a 0a01 	add.w	sl, sl, #1
 80017e4:	9304      	str	r3, [sp, #16]
 80017e6:	9307      	str	r3, [sp, #28]
 80017e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80017ee:	4654      	mov	r4, sl
 80017f0:	2205      	movs	r2, #5
 80017f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017f6:	4853      	ldr	r0, [pc, #332]	@ (8001944 <_vfiprintf_r+0x21c>)
 80017f8:	f7fe fcf2 	bl	80001e0 <memchr>
 80017fc:	9a04      	ldr	r2, [sp, #16]
 80017fe:	b9d8      	cbnz	r0, 8001838 <_vfiprintf_r+0x110>
 8001800:	06d1      	lsls	r1, r2, #27
 8001802:	bf44      	itt	mi
 8001804:	2320      	movmi	r3, #32
 8001806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800180a:	0713      	lsls	r3, r2, #28
 800180c:	bf44      	itt	mi
 800180e:	232b      	movmi	r3, #43	@ 0x2b
 8001810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001814:	f89a 3000 	ldrb.w	r3, [sl]
 8001818:	2b2a      	cmp	r3, #42	@ 0x2a
 800181a:	d015      	beq.n	8001848 <_vfiprintf_r+0x120>
 800181c:	9a07      	ldr	r2, [sp, #28]
 800181e:	4654      	mov	r4, sl
 8001820:	2000      	movs	r0, #0
 8001822:	f04f 0c0a 	mov.w	ip, #10
 8001826:	4621      	mov	r1, r4
 8001828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800182c:	3b30      	subs	r3, #48	@ 0x30
 800182e:	2b09      	cmp	r3, #9
 8001830:	d94b      	bls.n	80018ca <_vfiprintf_r+0x1a2>
 8001832:	b1b0      	cbz	r0, 8001862 <_vfiprintf_r+0x13a>
 8001834:	9207      	str	r2, [sp, #28]
 8001836:	e014      	b.n	8001862 <_vfiprintf_r+0x13a>
 8001838:	eba0 0308 	sub.w	r3, r0, r8
 800183c:	fa09 f303 	lsl.w	r3, r9, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	9304      	str	r3, [sp, #16]
 8001844:	46a2      	mov	sl, r4
 8001846:	e7d2      	b.n	80017ee <_vfiprintf_r+0xc6>
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	1d19      	adds	r1, r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	9103      	str	r1, [sp, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	bfbb      	ittet	lt
 8001854:	425b      	neglt	r3, r3
 8001856:	f042 0202 	orrlt.w	r2, r2, #2
 800185a:	9307      	strge	r3, [sp, #28]
 800185c:	9307      	strlt	r3, [sp, #28]
 800185e:	bfb8      	it	lt
 8001860:	9204      	strlt	r2, [sp, #16]
 8001862:	7823      	ldrb	r3, [r4, #0]
 8001864:	2b2e      	cmp	r3, #46	@ 0x2e
 8001866:	d10a      	bne.n	800187e <_vfiprintf_r+0x156>
 8001868:	7863      	ldrb	r3, [r4, #1]
 800186a:	2b2a      	cmp	r3, #42	@ 0x2a
 800186c:	d132      	bne.n	80018d4 <_vfiprintf_r+0x1ac>
 800186e:	9b03      	ldr	r3, [sp, #12]
 8001870:	1d1a      	adds	r2, r3, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	9203      	str	r2, [sp, #12]
 8001876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800187a:	3402      	adds	r4, #2
 800187c:	9305      	str	r3, [sp, #20]
 800187e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001954 <_vfiprintf_r+0x22c>
 8001882:	7821      	ldrb	r1, [r4, #0]
 8001884:	2203      	movs	r2, #3
 8001886:	4650      	mov	r0, sl
 8001888:	f7fe fcaa 	bl	80001e0 <memchr>
 800188c:	b138      	cbz	r0, 800189e <_vfiprintf_r+0x176>
 800188e:	9b04      	ldr	r3, [sp, #16]
 8001890:	eba0 000a 	sub.w	r0, r0, sl
 8001894:	2240      	movs	r2, #64	@ 0x40
 8001896:	4082      	lsls	r2, r0
 8001898:	4313      	orrs	r3, r2
 800189a:	3401      	adds	r4, #1
 800189c:	9304      	str	r3, [sp, #16]
 800189e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018a2:	4829      	ldr	r0, [pc, #164]	@ (8001948 <_vfiprintf_r+0x220>)
 80018a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80018a8:	2206      	movs	r2, #6
 80018aa:	f7fe fc99 	bl	80001e0 <memchr>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d03f      	beq.n	8001932 <_vfiprintf_r+0x20a>
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <_vfiprintf_r+0x224>)
 80018b4:	bb1b      	cbnz	r3, 80018fe <_vfiprintf_r+0x1d6>
 80018b6:	9b03      	ldr	r3, [sp, #12]
 80018b8:	3307      	adds	r3, #7
 80018ba:	f023 0307 	bic.w	r3, r3, #7
 80018be:	3308      	adds	r3, #8
 80018c0:	9303      	str	r3, [sp, #12]
 80018c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018c4:	443b      	add	r3, r7
 80018c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80018c8:	e76a      	b.n	80017a0 <_vfiprintf_r+0x78>
 80018ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80018ce:	460c      	mov	r4, r1
 80018d0:	2001      	movs	r0, #1
 80018d2:	e7a8      	b.n	8001826 <_vfiprintf_r+0xfe>
 80018d4:	2300      	movs	r3, #0
 80018d6:	3401      	adds	r4, #1
 80018d8:	9305      	str	r3, [sp, #20]
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 0c0a 	mov.w	ip, #10
 80018e0:	4620      	mov	r0, r4
 80018e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018e6:	3a30      	subs	r2, #48	@ 0x30
 80018e8:	2a09      	cmp	r2, #9
 80018ea:	d903      	bls.n	80018f4 <_vfiprintf_r+0x1cc>
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0c6      	beq.n	800187e <_vfiprintf_r+0x156>
 80018f0:	9105      	str	r1, [sp, #20]
 80018f2:	e7c4      	b.n	800187e <_vfiprintf_r+0x156>
 80018f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80018f8:	4604      	mov	r4, r0
 80018fa:	2301      	movs	r3, #1
 80018fc:	e7f0      	b.n	80018e0 <_vfiprintf_r+0x1b8>
 80018fe:	ab03      	add	r3, sp, #12
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	462a      	mov	r2, r5
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <_vfiprintf_r+0x228>)
 8001906:	a904      	add	r1, sp, #16
 8001908:	4630      	mov	r0, r6
 800190a:	f3af 8000 	nop.w
 800190e:	4607      	mov	r7, r0
 8001910:	1c78      	adds	r0, r7, #1
 8001912:	d1d6      	bne.n	80018c2 <_vfiprintf_r+0x19a>
 8001914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001916:	07d9      	lsls	r1, r3, #31
 8001918:	d405      	bmi.n	8001926 <_vfiprintf_r+0x1fe>
 800191a:	89ab      	ldrh	r3, [r5, #12]
 800191c:	059a      	lsls	r2, r3, #22
 800191e:	d402      	bmi.n	8001926 <_vfiprintf_r+0x1fe>
 8001920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001922:	f7ff fddd 	bl	80014e0 <__retarget_lock_release_recursive>
 8001926:	89ab      	ldrh	r3, [r5, #12]
 8001928:	065b      	lsls	r3, r3, #25
 800192a:	f53f af1f 	bmi.w	800176c <_vfiprintf_r+0x44>
 800192e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001930:	e71e      	b.n	8001770 <_vfiprintf_r+0x48>
 8001932:	ab03      	add	r3, sp, #12
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	462a      	mov	r2, r5
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <_vfiprintf_r+0x228>)
 800193a:	a904      	add	r1, sp, #16
 800193c:	4630      	mov	r0, r6
 800193e:	f000 f879 	bl	8001a34 <_printf_i>
 8001942:	e7e4      	b.n	800190e <_vfiprintf_r+0x1e6>
 8001944:	08002567 	.word	0x08002567
 8001948:	08002571 	.word	0x08002571
 800194c:	00000000 	.word	0x00000000
 8001950:	08001703 	.word	0x08001703
 8001954:	0800256d 	.word	0x0800256d

08001958 <_printf_common>:
 8001958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800195c:	4616      	mov	r6, r2
 800195e:	4698      	mov	r8, r3
 8001960:	688a      	ldr	r2, [r1, #8]
 8001962:	690b      	ldr	r3, [r1, #16]
 8001964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001968:	4293      	cmp	r3, r2
 800196a:	bfb8      	it	lt
 800196c:	4613      	movlt	r3, r2
 800196e:	6033      	str	r3, [r6, #0]
 8001970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001974:	4607      	mov	r7, r0
 8001976:	460c      	mov	r4, r1
 8001978:	b10a      	cbz	r2, 800197e <_printf_common+0x26>
 800197a:	3301      	adds	r3, #1
 800197c:	6033      	str	r3, [r6, #0]
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	0699      	lsls	r1, r3, #26
 8001982:	bf42      	ittt	mi
 8001984:	6833      	ldrmi	r3, [r6, #0]
 8001986:	3302      	addmi	r3, #2
 8001988:	6033      	strmi	r3, [r6, #0]
 800198a:	6825      	ldr	r5, [r4, #0]
 800198c:	f015 0506 	ands.w	r5, r5, #6
 8001990:	d106      	bne.n	80019a0 <_printf_common+0x48>
 8001992:	f104 0a19 	add.w	sl, r4, #25
 8001996:	68e3      	ldr	r3, [r4, #12]
 8001998:	6832      	ldr	r2, [r6, #0]
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	42ab      	cmp	r3, r5
 800199e:	dc26      	bgt.n	80019ee <_printf_common+0x96>
 80019a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	3b00      	subs	r3, #0
 80019a8:	bf18      	it	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	0692      	lsls	r2, r2, #26
 80019ae:	d42b      	bmi.n	8001a08 <_printf_common+0xb0>
 80019b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019b4:	4641      	mov	r1, r8
 80019b6:	4638      	mov	r0, r7
 80019b8:	47c8      	blx	r9
 80019ba:	3001      	adds	r0, #1
 80019bc:	d01e      	beq.n	80019fc <_printf_common+0xa4>
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	6922      	ldr	r2, [r4, #16]
 80019c2:	f003 0306 	and.w	r3, r3, #6
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf02      	ittt	eq
 80019ca:	68e5      	ldreq	r5, [r4, #12]
 80019cc:	6833      	ldreq	r3, [r6, #0]
 80019ce:	1aed      	subeq	r5, r5, r3
 80019d0:	68a3      	ldr	r3, [r4, #8]
 80019d2:	bf0c      	ite	eq
 80019d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019d8:	2500      	movne	r5, #0
 80019da:	4293      	cmp	r3, r2
 80019dc:	bfc4      	itt	gt
 80019de:	1a9b      	subgt	r3, r3, r2
 80019e0:	18ed      	addgt	r5, r5, r3
 80019e2:	2600      	movs	r6, #0
 80019e4:	341a      	adds	r4, #26
 80019e6:	42b5      	cmp	r5, r6
 80019e8:	d11a      	bne.n	8001a20 <_printf_common+0xc8>
 80019ea:	2000      	movs	r0, #0
 80019ec:	e008      	b.n	8001a00 <_printf_common+0xa8>
 80019ee:	2301      	movs	r3, #1
 80019f0:	4652      	mov	r2, sl
 80019f2:	4641      	mov	r1, r8
 80019f4:	4638      	mov	r0, r7
 80019f6:	47c8      	blx	r9
 80019f8:	3001      	adds	r0, #1
 80019fa:	d103      	bne.n	8001a04 <_printf_common+0xac>
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a04:	3501      	adds	r5, #1
 8001a06:	e7c6      	b.n	8001996 <_printf_common+0x3e>
 8001a08:	18e1      	adds	r1, r4, r3
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	2030      	movs	r0, #48	@ 0x30
 8001a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a12:	4422      	add	r2, r4
 8001a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	e7c7      	b.n	80019b0 <_printf_common+0x58>
 8001a20:	2301      	movs	r3, #1
 8001a22:	4622      	mov	r2, r4
 8001a24:	4641      	mov	r1, r8
 8001a26:	4638      	mov	r0, r7
 8001a28:	47c8      	blx	r9
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	d0e6      	beq.n	80019fc <_printf_common+0xa4>
 8001a2e:	3601      	adds	r6, #1
 8001a30:	e7d9      	b.n	80019e6 <_printf_common+0x8e>
	...

08001a34 <_printf_i>:
 8001a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a38:	7e0f      	ldrb	r7, [r1, #24]
 8001a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a3c:	2f78      	cmp	r7, #120	@ 0x78
 8001a3e:	4691      	mov	r9, r2
 8001a40:	4680      	mov	r8, r0
 8001a42:	460c      	mov	r4, r1
 8001a44:	469a      	mov	sl, r3
 8001a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a4a:	d807      	bhi.n	8001a5c <_printf_i+0x28>
 8001a4c:	2f62      	cmp	r7, #98	@ 0x62
 8001a4e:	d80a      	bhi.n	8001a66 <_printf_i+0x32>
 8001a50:	2f00      	cmp	r7, #0
 8001a52:	f000 80d1 	beq.w	8001bf8 <_printf_i+0x1c4>
 8001a56:	2f58      	cmp	r7, #88	@ 0x58
 8001a58:	f000 80b8 	beq.w	8001bcc <_printf_i+0x198>
 8001a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a64:	e03a      	b.n	8001adc <_printf_i+0xa8>
 8001a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a6a:	2b15      	cmp	r3, #21
 8001a6c:	d8f6      	bhi.n	8001a5c <_printf_i+0x28>
 8001a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8001a74 <_printf_i+0x40>)
 8001a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a74:	08001acd 	.word	0x08001acd
 8001a78:	08001ae1 	.word	0x08001ae1
 8001a7c:	08001a5d 	.word	0x08001a5d
 8001a80:	08001a5d 	.word	0x08001a5d
 8001a84:	08001a5d 	.word	0x08001a5d
 8001a88:	08001a5d 	.word	0x08001a5d
 8001a8c:	08001ae1 	.word	0x08001ae1
 8001a90:	08001a5d 	.word	0x08001a5d
 8001a94:	08001a5d 	.word	0x08001a5d
 8001a98:	08001a5d 	.word	0x08001a5d
 8001a9c:	08001a5d 	.word	0x08001a5d
 8001aa0:	08001bdf 	.word	0x08001bdf
 8001aa4:	08001b0b 	.word	0x08001b0b
 8001aa8:	08001b99 	.word	0x08001b99
 8001aac:	08001a5d 	.word	0x08001a5d
 8001ab0:	08001a5d 	.word	0x08001a5d
 8001ab4:	08001c01 	.word	0x08001c01
 8001ab8:	08001a5d 	.word	0x08001a5d
 8001abc:	08001b0b 	.word	0x08001b0b
 8001ac0:	08001a5d 	.word	0x08001a5d
 8001ac4:	08001a5d 	.word	0x08001a5d
 8001ac8:	08001ba1 	.word	0x08001ba1
 8001acc:	6833      	ldr	r3, [r6, #0]
 8001ace:	1d1a      	adds	r2, r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6032      	str	r2, [r6, #0]
 8001ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001adc:	2301      	movs	r3, #1
 8001ade:	e09c      	b.n	8001c1a <_printf_i+0x1e6>
 8001ae0:	6833      	ldr	r3, [r6, #0]
 8001ae2:	6820      	ldr	r0, [r4, #0]
 8001ae4:	1d19      	adds	r1, r3, #4
 8001ae6:	6031      	str	r1, [r6, #0]
 8001ae8:	0606      	lsls	r6, r0, #24
 8001aea:	d501      	bpl.n	8001af0 <_printf_i+0xbc>
 8001aec:	681d      	ldr	r5, [r3, #0]
 8001aee:	e003      	b.n	8001af8 <_printf_i+0xc4>
 8001af0:	0645      	lsls	r5, r0, #25
 8001af2:	d5fb      	bpl.n	8001aec <_printf_i+0xb8>
 8001af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001af8:	2d00      	cmp	r5, #0
 8001afa:	da03      	bge.n	8001b04 <_printf_i+0xd0>
 8001afc:	232d      	movs	r3, #45	@ 0x2d
 8001afe:	426d      	negs	r5, r5
 8001b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b04:	4858      	ldr	r0, [pc, #352]	@ (8001c68 <_printf_i+0x234>)
 8001b06:	230a      	movs	r3, #10
 8001b08:	e011      	b.n	8001b2e <_printf_i+0xfa>
 8001b0a:	6821      	ldr	r1, [r4, #0]
 8001b0c:	6833      	ldr	r3, [r6, #0]
 8001b0e:	0608      	lsls	r0, r1, #24
 8001b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b14:	d402      	bmi.n	8001b1c <_printf_i+0xe8>
 8001b16:	0649      	lsls	r1, r1, #25
 8001b18:	bf48      	it	mi
 8001b1a:	b2ad      	uxthmi	r5, r5
 8001b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b1e:	4852      	ldr	r0, [pc, #328]	@ (8001c68 <_printf_i+0x234>)
 8001b20:	6033      	str	r3, [r6, #0]
 8001b22:	bf14      	ite	ne
 8001b24:	230a      	movne	r3, #10
 8001b26:	2308      	moveq	r3, #8
 8001b28:	2100      	movs	r1, #0
 8001b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b2e:	6866      	ldr	r6, [r4, #4]
 8001b30:	60a6      	str	r6, [r4, #8]
 8001b32:	2e00      	cmp	r6, #0
 8001b34:	db05      	blt.n	8001b42 <_printf_i+0x10e>
 8001b36:	6821      	ldr	r1, [r4, #0]
 8001b38:	432e      	orrs	r6, r5
 8001b3a:	f021 0104 	bic.w	r1, r1, #4
 8001b3e:	6021      	str	r1, [r4, #0]
 8001b40:	d04b      	beq.n	8001bda <_printf_i+0x1a6>
 8001b42:	4616      	mov	r6, r2
 8001b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b48:	fb03 5711 	mls	r7, r3, r1, r5
 8001b4c:	5dc7      	ldrb	r7, [r0, r7]
 8001b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b52:	462f      	mov	r7, r5
 8001b54:	42bb      	cmp	r3, r7
 8001b56:	460d      	mov	r5, r1
 8001b58:	d9f4      	bls.n	8001b44 <_printf_i+0x110>
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d10b      	bne.n	8001b76 <_printf_i+0x142>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	07df      	lsls	r7, r3, #31
 8001b62:	d508      	bpl.n	8001b76 <_printf_i+0x142>
 8001b64:	6923      	ldr	r3, [r4, #16]
 8001b66:	6861      	ldr	r1, [r4, #4]
 8001b68:	4299      	cmp	r1, r3
 8001b6a:	bfde      	ittt	le
 8001b6c:	2330      	movle	r3, #48	@ 0x30
 8001b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b76:	1b92      	subs	r2, r2, r6
 8001b78:	6122      	str	r2, [r4, #16]
 8001b7a:	f8cd a000 	str.w	sl, [sp]
 8001b7e:	464b      	mov	r3, r9
 8001b80:	aa03      	add	r2, sp, #12
 8001b82:	4621      	mov	r1, r4
 8001b84:	4640      	mov	r0, r8
 8001b86:	f7ff fee7 	bl	8001958 <_printf_common>
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d14a      	bne.n	8001c24 <_printf_i+0x1f0>
 8001b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b92:	b004      	add	sp, #16
 8001b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f043 0320 	orr.w	r3, r3, #32
 8001b9e:	6023      	str	r3, [r4, #0]
 8001ba0:	4832      	ldr	r0, [pc, #200]	@ (8001c6c <_printf_i+0x238>)
 8001ba2:	2778      	movs	r7, #120	@ 0x78
 8001ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	6831      	ldr	r1, [r6, #0]
 8001bac:	061f      	lsls	r7, r3, #24
 8001bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8001bb2:	d402      	bmi.n	8001bba <_printf_i+0x186>
 8001bb4:	065f      	lsls	r7, r3, #25
 8001bb6:	bf48      	it	mi
 8001bb8:	b2ad      	uxthmi	r5, r5
 8001bba:	6031      	str	r1, [r6, #0]
 8001bbc:	07d9      	lsls	r1, r3, #31
 8001bbe:	bf44      	itt	mi
 8001bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8001bc4:	6023      	strmi	r3, [r4, #0]
 8001bc6:	b11d      	cbz	r5, 8001bd0 <_printf_i+0x19c>
 8001bc8:	2310      	movs	r3, #16
 8001bca:	e7ad      	b.n	8001b28 <_printf_i+0xf4>
 8001bcc:	4826      	ldr	r0, [pc, #152]	@ (8001c68 <_printf_i+0x234>)
 8001bce:	e7e9      	b.n	8001ba4 <_printf_i+0x170>
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	f023 0320 	bic.w	r3, r3, #32
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	e7f6      	b.n	8001bc8 <_printf_i+0x194>
 8001bda:	4616      	mov	r6, r2
 8001bdc:	e7bd      	b.n	8001b5a <_printf_i+0x126>
 8001bde:	6833      	ldr	r3, [r6, #0]
 8001be0:	6825      	ldr	r5, [r4, #0]
 8001be2:	6961      	ldr	r1, [r4, #20]
 8001be4:	1d18      	adds	r0, r3, #4
 8001be6:	6030      	str	r0, [r6, #0]
 8001be8:	062e      	lsls	r6, r5, #24
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	d501      	bpl.n	8001bf2 <_printf_i+0x1be>
 8001bee:	6019      	str	r1, [r3, #0]
 8001bf0:	e002      	b.n	8001bf8 <_printf_i+0x1c4>
 8001bf2:	0668      	lsls	r0, r5, #25
 8001bf4:	d5fb      	bpl.n	8001bee <_printf_i+0x1ba>
 8001bf6:	8019      	strh	r1, [r3, #0]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6123      	str	r3, [r4, #16]
 8001bfc:	4616      	mov	r6, r2
 8001bfe:	e7bc      	b.n	8001b7a <_printf_i+0x146>
 8001c00:	6833      	ldr	r3, [r6, #0]
 8001c02:	1d1a      	adds	r2, r3, #4
 8001c04:	6032      	str	r2, [r6, #0]
 8001c06:	681e      	ldr	r6, [r3, #0]
 8001c08:	6862      	ldr	r2, [r4, #4]
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	f7fe fae7 	bl	80001e0 <memchr>
 8001c12:	b108      	cbz	r0, 8001c18 <_printf_i+0x1e4>
 8001c14:	1b80      	subs	r0, r0, r6
 8001c16:	6060      	str	r0, [r4, #4]
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	6123      	str	r3, [r4, #16]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c22:	e7aa      	b.n	8001b7a <_printf_i+0x146>
 8001c24:	6923      	ldr	r3, [r4, #16]
 8001c26:	4632      	mov	r2, r6
 8001c28:	4649      	mov	r1, r9
 8001c2a:	4640      	mov	r0, r8
 8001c2c:	47d0      	blx	sl
 8001c2e:	3001      	adds	r0, #1
 8001c30:	d0ad      	beq.n	8001b8e <_printf_i+0x15a>
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	079b      	lsls	r3, r3, #30
 8001c36:	d413      	bmi.n	8001c60 <_printf_i+0x22c>
 8001c38:	68e0      	ldr	r0, [r4, #12]
 8001c3a:	9b03      	ldr	r3, [sp, #12]
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	bfb8      	it	lt
 8001c40:	4618      	movlt	r0, r3
 8001c42:	e7a6      	b.n	8001b92 <_printf_i+0x15e>
 8001c44:	2301      	movs	r3, #1
 8001c46:	4632      	mov	r2, r6
 8001c48:	4649      	mov	r1, r9
 8001c4a:	4640      	mov	r0, r8
 8001c4c:	47d0      	blx	sl
 8001c4e:	3001      	adds	r0, #1
 8001c50:	d09d      	beq.n	8001b8e <_printf_i+0x15a>
 8001c52:	3501      	adds	r5, #1
 8001c54:	68e3      	ldr	r3, [r4, #12]
 8001c56:	9903      	ldr	r1, [sp, #12]
 8001c58:	1a5b      	subs	r3, r3, r1
 8001c5a:	42ab      	cmp	r3, r5
 8001c5c:	dcf2      	bgt.n	8001c44 <_printf_i+0x210>
 8001c5e:	e7eb      	b.n	8001c38 <_printf_i+0x204>
 8001c60:	2500      	movs	r5, #0
 8001c62:	f104 0619 	add.w	r6, r4, #25
 8001c66:	e7f5      	b.n	8001c54 <_printf_i+0x220>
 8001c68:	08002578 	.word	0x08002578
 8001c6c:	08002589 	.word	0x08002589

08001c70 <__sflush_r>:
 8001c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c78:	0716      	lsls	r6, r2, #28
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	d454      	bmi.n	8001d2a <__sflush_r+0xba>
 8001c80:	684b      	ldr	r3, [r1, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	dc02      	bgt.n	8001c8c <__sflush_r+0x1c>
 8001c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	dd48      	ble.n	8001d1e <__sflush_r+0xae>
 8001c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c8e:	2e00      	cmp	r6, #0
 8001c90:	d045      	beq.n	8001d1e <__sflush_r+0xae>
 8001c92:	2300      	movs	r3, #0
 8001c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c98:	682f      	ldr	r7, [r5, #0]
 8001c9a:	6a21      	ldr	r1, [r4, #32]
 8001c9c:	602b      	str	r3, [r5, #0]
 8001c9e:	d030      	beq.n	8001d02 <__sflush_r+0x92>
 8001ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ca2:	89a3      	ldrh	r3, [r4, #12]
 8001ca4:	0759      	lsls	r1, r3, #29
 8001ca6:	d505      	bpl.n	8001cb4 <__sflush_r+0x44>
 8001ca8:	6863      	ldr	r3, [r4, #4]
 8001caa:	1ad2      	subs	r2, r2, r3
 8001cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001cae:	b10b      	cbz	r3, 8001cb4 <__sflush_r+0x44>
 8001cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cb2:	1ad2      	subs	r2, r2, r3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001cb8:	6a21      	ldr	r1, [r4, #32]
 8001cba:	4628      	mov	r0, r5
 8001cbc:	47b0      	blx	r6
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	89a3      	ldrh	r3, [r4, #12]
 8001cc2:	d106      	bne.n	8001cd2 <__sflush_r+0x62>
 8001cc4:	6829      	ldr	r1, [r5, #0]
 8001cc6:	291d      	cmp	r1, #29
 8001cc8:	d82b      	bhi.n	8001d22 <__sflush_r+0xb2>
 8001cca:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <__sflush_r+0x104>)
 8001ccc:	40ca      	lsrs	r2, r1
 8001cce:	07d6      	lsls	r6, r2, #31
 8001cd0:	d527      	bpl.n	8001d22 <__sflush_r+0xb2>
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	6062      	str	r2, [r4, #4]
 8001cd6:	04d9      	lsls	r1, r3, #19
 8001cd8:	6922      	ldr	r2, [r4, #16]
 8001cda:	6022      	str	r2, [r4, #0]
 8001cdc:	d504      	bpl.n	8001ce8 <__sflush_r+0x78>
 8001cde:	1c42      	adds	r2, r0, #1
 8001ce0:	d101      	bne.n	8001ce6 <__sflush_r+0x76>
 8001ce2:	682b      	ldr	r3, [r5, #0]
 8001ce4:	b903      	cbnz	r3, 8001ce8 <__sflush_r+0x78>
 8001ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001cea:	602f      	str	r7, [r5, #0]
 8001cec:	b1b9      	cbz	r1, 8001d1e <__sflush_r+0xae>
 8001cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cf2:	4299      	cmp	r1, r3
 8001cf4:	d002      	beq.n	8001cfc <__sflush_r+0x8c>
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f7ff fbf4 	bl	80014e4 <_free_r>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d00:	e00d      	b.n	8001d1e <__sflush_r+0xae>
 8001d02:	2301      	movs	r3, #1
 8001d04:	4628      	mov	r0, r5
 8001d06:	47b0      	blx	r6
 8001d08:	4602      	mov	r2, r0
 8001d0a:	1c50      	adds	r0, r2, #1
 8001d0c:	d1c9      	bne.n	8001ca2 <__sflush_r+0x32>
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0c6      	beq.n	8001ca2 <__sflush_r+0x32>
 8001d14:	2b1d      	cmp	r3, #29
 8001d16:	d001      	beq.n	8001d1c <__sflush_r+0xac>
 8001d18:	2b16      	cmp	r3, #22
 8001d1a:	d11e      	bne.n	8001d5a <__sflush_r+0xea>
 8001d1c:	602f      	str	r7, [r5, #0]
 8001d1e:	2000      	movs	r0, #0
 8001d20:	e022      	b.n	8001d68 <__sflush_r+0xf8>
 8001d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	e01b      	b.n	8001d62 <__sflush_r+0xf2>
 8001d2a:	690f      	ldr	r7, [r1, #16]
 8001d2c:	2f00      	cmp	r7, #0
 8001d2e:	d0f6      	beq.n	8001d1e <__sflush_r+0xae>
 8001d30:	0793      	lsls	r3, r2, #30
 8001d32:	680e      	ldr	r6, [r1, #0]
 8001d34:	bf08      	it	eq
 8001d36:	694b      	ldreq	r3, [r1, #20]
 8001d38:	600f      	str	r7, [r1, #0]
 8001d3a:	bf18      	it	ne
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	eba6 0807 	sub.w	r8, r6, r7
 8001d42:	608b      	str	r3, [r1, #8]
 8001d44:	f1b8 0f00 	cmp.w	r8, #0
 8001d48:	dde9      	ble.n	8001d1e <__sflush_r+0xae>
 8001d4a:	6a21      	ldr	r1, [r4, #32]
 8001d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001d4e:	4643      	mov	r3, r8
 8001d50:	463a      	mov	r2, r7
 8001d52:	4628      	mov	r0, r5
 8001d54:	47b0      	blx	r6
 8001d56:	2800      	cmp	r0, #0
 8001d58:	dc08      	bgt.n	8001d6c <__sflush_r+0xfc>
 8001d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d62:	81a3      	strh	r3, [r4, #12]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d6c:	4407      	add	r7, r0
 8001d6e:	eba8 0800 	sub.w	r8, r8, r0
 8001d72:	e7e7      	b.n	8001d44 <__sflush_r+0xd4>
 8001d74:	20400001 	.word	0x20400001

08001d78 <_fflush_r>:
 8001d78:	b538      	push	{r3, r4, r5, lr}
 8001d7a:	690b      	ldr	r3, [r1, #16]
 8001d7c:	4605      	mov	r5, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	b913      	cbnz	r3, 8001d88 <_fflush_r+0x10>
 8001d82:	2500      	movs	r5, #0
 8001d84:	4628      	mov	r0, r5
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
 8001d88:	b118      	cbz	r0, 8001d92 <_fflush_r+0x1a>
 8001d8a:	6a03      	ldr	r3, [r0, #32]
 8001d8c:	b90b      	cbnz	r3, 8001d92 <_fflush_r+0x1a>
 8001d8e:	f7ff f9b5 	bl	80010fc <__sinit>
 8001d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f3      	beq.n	8001d82 <_fflush_r+0xa>
 8001d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d9c:	07d0      	lsls	r0, r2, #31
 8001d9e:	d404      	bmi.n	8001daa <_fflush_r+0x32>
 8001da0:	0599      	lsls	r1, r3, #22
 8001da2:	d402      	bmi.n	8001daa <_fflush_r+0x32>
 8001da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001da6:	f7ff fb9a 	bl	80014de <__retarget_lock_acquire_recursive>
 8001daa:	4628      	mov	r0, r5
 8001dac:	4621      	mov	r1, r4
 8001dae:	f7ff ff5f 	bl	8001c70 <__sflush_r>
 8001db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001db4:	07da      	lsls	r2, r3, #31
 8001db6:	4605      	mov	r5, r0
 8001db8:	d4e4      	bmi.n	8001d84 <_fflush_r+0xc>
 8001dba:	89a3      	ldrh	r3, [r4, #12]
 8001dbc:	059b      	lsls	r3, r3, #22
 8001dbe:	d4e1      	bmi.n	8001d84 <_fflush_r+0xc>
 8001dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001dc2:	f7ff fb8d 	bl	80014e0 <__retarget_lock_release_recursive>
 8001dc6:	e7dd      	b.n	8001d84 <_fflush_r+0xc>

08001dc8 <__swhatbuf_r>:
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	460c      	mov	r4, r1
 8001dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd0:	2900      	cmp	r1, #0
 8001dd2:	b096      	sub	sp, #88	@ 0x58
 8001dd4:	4615      	mov	r5, r2
 8001dd6:	461e      	mov	r6, r3
 8001dd8:	da0d      	bge.n	8001df6 <__swhatbuf_r+0x2e>
 8001dda:	89a3      	ldrh	r3, [r4, #12]
 8001ddc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2340      	movne	r3, #64	@ 0x40
 8001de8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001dec:	2000      	movs	r0, #0
 8001dee:	6031      	str	r1, [r6, #0]
 8001df0:	602b      	str	r3, [r5, #0]
 8001df2:	b016      	add	sp, #88	@ 0x58
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
 8001df6:	466a      	mov	r2, sp
 8001df8:	f000 f848 	bl	8001e8c <_fstat_r>
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	dbec      	blt.n	8001dda <__swhatbuf_r+0x12>
 8001e00:	9901      	ldr	r1, [sp, #4]
 8001e02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e0a:	4259      	negs	r1, r3
 8001e0c:	4159      	adcs	r1, r3
 8001e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e12:	e7eb      	b.n	8001dec <__swhatbuf_r+0x24>

08001e14 <__smakebuf_r>:
 8001e14:	898b      	ldrh	r3, [r1, #12]
 8001e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e18:	079d      	lsls	r5, r3, #30
 8001e1a:	4606      	mov	r6, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	d507      	bpl.n	8001e30 <__smakebuf_r+0x1c>
 8001e20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e24:	6023      	str	r3, [r4, #0]
 8001e26:	6123      	str	r3, [r4, #16]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	6163      	str	r3, [r4, #20]
 8001e2c:	b003      	add	sp, #12
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e30:	ab01      	add	r3, sp, #4
 8001e32:	466a      	mov	r2, sp
 8001e34:	f7ff ffc8 	bl	8001dc8 <__swhatbuf_r>
 8001e38:	9f00      	ldr	r7, [sp, #0]
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	4639      	mov	r1, r7
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f7ff fbbc 	bl	80015bc <_malloc_r>
 8001e44:	b948      	cbnz	r0, 8001e5a <__smakebuf_r+0x46>
 8001e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e4a:	059a      	lsls	r2, r3, #22
 8001e4c:	d4ee      	bmi.n	8001e2c <__smakebuf_r+0x18>
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	81a3      	strh	r3, [r4, #12]
 8001e58:	e7e2      	b.n	8001e20 <__smakebuf_r+0xc>
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	6020      	str	r0, [r4, #0]
 8001e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e62:	81a3      	strh	r3, [r4, #12]
 8001e64:	9b01      	ldr	r3, [sp, #4]
 8001e66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e6a:	b15b      	cbz	r3, 8001e84 <__smakebuf_r+0x70>
 8001e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e70:	4630      	mov	r0, r6
 8001e72:	f000 f81d 	bl	8001eb0 <_isatty_r>
 8001e76:	b128      	cbz	r0, 8001e84 <__smakebuf_r+0x70>
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	81a3      	strh	r3, [r4, #12]
 8001e84:	89a3      	ldrh	r3, [r4, #12]
 8001e86:	431d      	orrs	r5, r3
 8001e88:	81a5      	strh	r5, [r4, #12]
 8001e8a:	e7cf      	b.n	8001e2c <__smakebuf_r+0x18>

08001e8c <_fstat_r>:
 8001e8c:	b538      	push	{r3, r4, r5, lr}
 8001e8e:	4d07      	ldr	r5, [pc, #28]	@ (8001eac <_fstat_r+0x20>)
 8001e90:	2300      	movs	r3, #0
 8001e92:	4604      	mov	r4, r0
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	602b      	str	r3, [r5, #0]
 8001e9a:	f000 f966 	bl	800216a <_fstat>
 8001e9e:	1c43      	adds	r3, r0, #1
 8001ea0:	d102      	bne.n	8001ea8 <_fstat_r+0x1c>
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	b103      	cbz	r3, 8001ea8 <_fstat_r+0x1c>
 8001ea6:	6023      	str	r3, [r4, #0]
 8001ea8:	bd38      	pop	{r3, r4, r5, pc}
 8001eaa:	bf00      	nop
 8001eac:	200001c0 	.word	0x200001c0

08001eb0 <_isatty_r>:
 8001eb0:	b538      	push	{r3, r4, r5, lr}
 8001eb2:	4d06      	ldr	r5, [pc, #24]	@ (8001ecc <_isatty_r+0x1c>)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	4608      	mov	r0, r1
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	f000 faba 	bl	8002434 <_isatty>
 8001ec0:	1c43      	adds	r3, r0, #1
 8001ec2:	d102      	bne.n	8001eca <_isatty_r+0x1a>
 8001ec4:	682b      	ldr	r3, [r5, #0]
 8001ec6:	b103      	cbz	r3, 8001eca <_isatty_r+0x1a>
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
 8001ecc:	200001c0 	.word	0x200001c0

08001ed0 <_sbrk_r>:
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4d06      	ldr	r5, [pc, #24]	@ (8001eec <_sbrk_r+0x1c>)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	602b      	str	r3, [r5, #0]
 8001edc:	f000 f900 	bl	80020e0 <_sbrk>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	d102      	bne.n	8001eea <_sbrk_r+0x1a>
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	b103      	cbz	r3, 8001eea <_sbrk_r+0x1a>
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	bd38      	pop	{r3, r4, r5, pc}
 8001eec:	200001c0 	.word	0x200001c0

08001ef0 <findslot>:
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <findslot+0x2c>)
 8001ef2:	b510      	push	{r4, lr}
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	b118      	cbz	r0, 8001f02 <findslot+0x12>
 8001efa:	6a03      	ldr	r3, [r0, #32]
 8001efc:	b90b      	cbnz	r3, 8001f02 <findslot+0x12>
 8001efe:	f7ff f8fd 	bl	80010fc <__sinit>
 8001f02:	2c13      	cmp	r4, #19
 8001f04:	d807      	bhi.n	8001f16 <findslot+0x26>
 8001f06:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <findslot+0x30>)
 8001f08:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001f0c:	3201      	adds	r2, #1
 8001f0e:	d002      	beq.n	8001f16 <findslot+0x26>
 8001f10:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f14:	bd10      	pop	{r4, pc}
 8001f16:	2000      	movs	r0, #0
 8001f18:	e7fc      	b.n	8001f14 <findslot+0x24>
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	200001e0 	.word	0x200001e0

08001f24 <error>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	4604      	mov	r4, r0
 8001f28:	f000 faa2 	bl	8002470 <__errno>
 8001f2c:	2613      	movs	r6, #19
 8001f2e:	4605      	mov	r5, r0
 8001f30:	2700      	movs	r7, #0
 8001f32:	4630      	mov	r0, r6
 8001f34:	4639      	mov	r1, r7
 8001f36:	beab      	bkpt	0x00ab
 8001f38:	4606      	mov	r6, r0
 8001f3a:	602e      	str	r6, [r5, #0]
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f40 <checkerror>:
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d101      	bne.n	8001f48 <checkerror+0x8>
 8001f44:	f7ff bfee 	b.w	8001f24 <error>
 8001f48:	4770      	bx	lr

08001f4a <_swiread>:
 8001f4a:	b530      	push	{r4, r5, lr}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f52:	9203      	str	r2, [sp, #12]
 8001f54:	2406      	movs	r4, #6
 8001f56:	ad01      	add	r5, sp, #4
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	beab      	bkpt	0x00ab
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7ff ffed 	bl	8001f40 <checkerror>
 8001f66:	b005      	add	sp, #20
 8001f68:	bd30      	pop	{r4, r5, pc}

08001f6a <_read>:
 8001f6a:	b570      	push	{r4, r5, r6, lr}
 8001f6c:	460e      	mov	r6, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	f7ff ffbe 	bl	8001ef0 <findslot>
 8001f74:	4605      	mov	r5, r0
 8001f76:	b930      	cbnz	r0, 8001f86 <_read+0x1c>
 8001f78:	f000 fa7a 	bl	8002470 <__errno>
 8001f7c:	2309      	movs	r3, #9
 8001f7e:	6003      	str	r3, [r0, #0]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
 8001f86:	6800      	ldr	r0, [r0, #0]
 8001f88:	4622      	mov	r2, r4
 8001f8a:	4631      	mov	r1, r6
 8001f8c:	f7ff ffdd 	bl	8001f4a <_swiread>
 8001f90:	1c43      	adds	r3, r0, #1
 8001f92:	d0f5      	beq.n	8001f80 <_read+0x16>
 8001f94:	686b      	ldr	r3, [r5, #4]
 8001f96:	1a20      	subs	r0, r4, r0
 8001f98:	4403      	add	r3, r0
 8001f9a:	606b      	str	r3, [r5, #4]
 8001f9c:	e7f2      	b.n	8001f84 <_read+0x1a>

08001f9e <_swilseek>:
 8001f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	4616      	mov	r6, r2
 8001fa4:	f7ff ffa4 	bl	8001ef0 <findslot>
 8001fa8:	4605      	mov	r5, r0
 8001faa:	b940      	cbnz	r0, 8001fbe <_swilseek+0x20>
 8001fac:	f000 fa60 	bl	8002470 <__errno>
 8001fb0:	2309      	movs	r3, #9
 8001fb2:	6003      	str	r3, [r0, #0]
 8001fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8001fb8:	4620      	mov	r0, r4
 8001fba:	b003      	add	sp, #12
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbe:	2e02      	cmp	r6, #2
 8001fc0:	d903      	bls.n	8001fca <_swilseek+0x2c>
 8001fc2:	f000 fa55 	bl	8002470 <__errno>
 8001fc6:	2316      	movs	r3, #22
 8001fc8:	e7f3      	b.n	8001fb2 <_swilseek+0x14>
 8001fca:	2e01      	cmp	r6, #1
 8001fcc:	d112      	bne.n	8001ff4 <_swilseek+0x56>
 8001fce:	6843      	ldr	r3, [r0, #4]
 8001fd0:	18e4      	adds	r4, r4, r3
 8001fd2:	d4f6      	bmi.n	8001fc2 <_swilseek+0x24>
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	260a      	movs	r6, #10
 8001fd8:	e9cd 3400 	strd	r3, r4, [sp]
 8001fdc:	466f      	mov	r7, sp
 8001fde:	4630      	mov	r0, r6
 8001fe0:	4639      	mov	r1, r7
 8001fe2:	beab      	bkpt	0x00ab
 8001fe4:	4606      	mov	r6, r0
 8001fe6:	4630      	mov	r0, r6
 8001fe8:	f7ff ffaa 	bl	8001f40 <checkerror>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	dbe1      	blt.n	8001fb4 <_swilseek+0x16>
 8001ff0:	606c      	str	r4, [r5, #4]
 8001ff2:	e7e1      	b.n	8001fb8 <_swilseek+0x1a>
 8001ff4:	2e02      	cmp	r6, #2
 8001ff6:	6803      	ldr	r3, [r0, #0]
 8001ff8:	d1ec      	bne.n	8001fd4 <_swilseek+0x36>
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	260c      	movs	r6, #12
 8001ffe:	466f      	mov	r7, sp
 8002000:	4630      	mov	r0, r6
 8002002:	4639      	mov	r1, r7
 8002004:	beab      	bkpt	0x00ab
 8002006:	4606      	mov	r6, r0
 8002008:	4630      	mov	r0, r6
 800200a:	f7ff ff99 	bl	8001f40 <checkerror>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d0d0      	beq.n	8001fb4 <_swilseek+0x16>
 8002012:	4404      	add	r4, r0
 8002014:	e7de      	b.n	8001fd4 <_swilseek+0x36>

08002016 <_lseek>:
 8002016:	f7ff bfc2 	b.w	8001f9e <_swilseek>

0800201a <_swiwrite>:
 800201a:	b530      	push	{r4, r5, lr}
 800201c:	b085      	sub	sp, #20
 800201e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002022:	9203      	str	r2, [sp, #12]
 8002024:	2405      	movs	r4, #5
 8002026:	ad01      	add	r5, sp, #4
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	beab      	bkpt	0x00ab
 800202e:	4604      	mov	r4, r0
 8002030:	4620      	mov	r0, r4
 8002032:	f7ff ff85 	bl	8001f40 <checkerror>
 8002036:	b005      	add	sp, #20
 8002038:	bd30      	pop	{r4, r5, pc}

0800203a <_write>:
 800203a:	b570      	push	{r4, r5, r6, lr}
 800203c:	460e      	mov	r6, r1
 800203e:	4615      	mov	r5, r2
 8002040:	f7ff ff56 	bl	8001ef0 <findslot>
 8002044:	4604      	mov	r4, r0
 8002046:	b930      	cbnz	r0, 8002056 <_write+0x1c>
 8002048:	f000 fa12 	bl	8002470 <__errno>
 800204c:	2309      	movs	r3, #9
 800204e:	6003      	str	r3, [r0, #0]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	bd70      	pop	{r4, r5, r6, pc}
 8002056:	6800      	ldr	r0, [r0, #0]
 8002058:	462a      	mov	r2, r5
 800205a:	4631      	mov	r1, r6
 800205c:	f7ff ffdd 	bl	800201a <_swiwrite>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	dbf5      	blt.n	8002050 <_write+0x16>
 8002064:	6862      	ldr	r2, [r4, #4]
 8002066:	1ae8      	subs	r0, r5, r3
 8002068:	4402      	add	r2, r0
 800206a:	42ab      	cmp	r3, r5
 800206c:	6062      	str	r2, [r4, #4]
 800206e:	d1f1      	bne.n	8002054 <_write+0x1a>
 8002070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002074:	2000      	movs	r0, #0
 8002076:	f7ff bf55 	b.w	8001f24 <error>

0800207a <_swiclose>:
 800207a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800207c:	2402      	movs	r4, #2
 800207e:	9001      	str	r0, [sp, #4]
 8002080:	ad01      	add	r5, sp, #4
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	beab      	bkpt	0x00ab
 8002088:	4604      	mov	r4, r0
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff ff58 	bl	8001f40 <checkerror>
 8002090:	b003      	add	sp, #12
 8002092:	bd30      	pop	{r4, r5, pc}

08002094 <_close>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	4605      	mov	r5, r0
 8002098:	f7ff ff2a 	bl	8001ef0 <findslot>
 800209c:	4604      	mov	r4, r0
 800209e:	b930      	cbnz	r0, 80020ae <_close+0x1a>
 80020a0:	f000 f9e6 	bl	8002470 <__errno>
 80020a4:	2309      	movs	r3, #9
 80020a6:	6003      	str	r3, [r0, #0]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	bd38      	pop	{r3, r4, r5, pc}
 80020ae:	3d01      	subs	r5, #1
 80020b0:	2d01      	cmp	r5, #1
 80020b2:	d809      	bhi.n	80020c8 <_close+0x34>
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <_close+0x48>)
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d104      	bne.n	80020c8 <_close+0x34>
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	6003      	str	r3, [r0, #0]
 80020c4:	2000      	movs	r0, #0
 80020c6:	e7f1      	b.n	80020ac <_close+0x18>
 80020c8:	6820      	ldr	r0, [r4, #0]
 80020ca:	f7ff ffd6 	bl	800207a <_swiclose>
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d1ec      	bne.n	80020ac <_close+0x18>
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	6023      	str	r3, [r4, #0]
 80020d8:	e7e8      	b.n	80020ac <_close+0x18>
 80020da:	bf00      	nop
 80020dc:	200001e0 	.word	0x200001e0

080020e0 <_sbrk>:
 80020e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <_sbrk+0x38>)
 80020e2:	6811      	ldr	r1, [r2, #0]
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4603      	mov	r3, r0
 80020e8:	b909      	cbnz	r1, 80020ee <_sbrk+0xe>
 80020ea:	490c      	ldr	r1, [pc, #48]	@ (800211c <_sbrk+0x3c>)
 80020ec:	6011      	str	r1, [r2, #0]
 80020ee:	6810      	ldr	r0, [r2, #0]
 80020f0:	4669      	mov	r1, sp
 80020f2:	4403      	add	r3, r0
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d806      	bhi.n	8002106 <_sbrk+0x26>
 80020f8:	4909      	ldr	r1, [pc, #36]	@ (8002120 <_sbrk+0x40>)
 80020fa:	4c0a      	ldr	r4, [pc, #40]	@ (8002124 <_sbrk+0x44>)
 80020fc:	6809      	ldr	r1, [r1, #0]
 80020fe:	42a1      	cmp	r1, r4
 8002100:	d008      	beq.n	8002114 <_sbrk+0x34>
 8002102:	428b      	cmp	r3, r1
 8002104:	d906      	bls.n	8002114 <_sbrk+0x34>
 8002106:	f000 f9b3 	bl	8002470 <__errno>
 800210a:	230c      	movs	r3, #12
 800210c:	6003      	str	r3, [r0, #0]
 800210e:	f04f 30ff 	mov.w	r0, #4294967295
 8002112:	bd10      	pop	{r4, pc}
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e7fc      	b.n	8002112 <_sbrk+0x32>
 8002118:	200001d0 	.word	0x200001d0
 800211c:	20000280 	.word	0x20000280
 8002120:	2000005c 	.word	0x2000005c
 8002124:	cafedead 	.word	0xcafedead

08002128 <_swistat>:
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	460c      	mov	r4, r1
 800212c:	f7ff fee0 	bl	8001ef0 <findslot>
 8002130:	4605      	mov	r5, r0
 8002132:	b930      	cbnz	r0, 8002142 <_swistat+0x1a>
 8002134:	f000 f99c 	bl	8002470 <__errno>
 8002138:	2309      	movs	r3, #9
 800213a:	6003      	str	r3, [r0, #0]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	bd70      	pop	{r4, r5, r6, pc}
 8002142:	6863      	ldr	r3, [r4, #4]
 8002144:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002148:	6063      	str	r3, [r4, #4]
 800214a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800214e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002150:	260c      	movs	r6, #12
 8002152:	4630      	mov	r0, r6
 8002154:	4629      	mov	r1, r5
 8002156:	beab      	bkpt	0x00ab
 8002158:	4605      	mov	r5, r0
 800215a:	4628      	mov	r0, r5
 800215c:	f7ff fef0 	bl	8001f40 <checkerror>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d0eb      	beq.n	800213c <_swistat+0x14>
 8002164:	6120      	str	r0, [r4, #16]
 8002166:	2000      	movs	r0, #0
 8002168:	e7ea      	b.n	8002140 <_swistat+0x18>

0800216a <_fstat>:
 800216a:	460b      	mov	r3, r1
 800216c:	b510      	push	{r4, lr}
 800216e:	2100      	movs	r1, #0
 8002170:	4604      	mov	r4, r0
 8002172:	2258      	movs	r2, #88	@ 0x58
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f93f 	bl	80013f8 <memset>
 800217a:	4601      	mov	r1, r0
 800217c:	4620      	mov	r0, r4
 800217e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002182:	f7ff bfd1 	b.w	8002128 <_swistat>

08002186 <_stat>:
 8002186:	b538      	push	{r3, r4, r5, lr}
 8002188:	460d      	mov	r5, r1
 800218a:	4604      	mov	r4, r0
 800218c:	2258      	movs	r2, #88	@ 0x58
 800218e:	2100      	movs	r1, #0
 8002190:	4628      	mov	r0, r5
 8002192:	f7ff f931 	bl	80013f8 <memset>
 8002196:	4620      	mov	r0, r4
 8002198:	2100      	movs	r1, #0
 800219a:	f000 f811 	bl	80021c0 <_swiopen>
 800219e:	1c43      	adds	r3, r0, #1
 80021a0:	4604      	mov	r4, r0
 80021a2:	d00b      	beq.n	80021bc <_stat+0x36>
 80021a4:	686b      	ldr	r3, [r5, #4]
 80021a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80021aa:	606b      	str	r3, [r5, #4]
 80021ac:	4629      	mov	r1, r5
 80021ae:	f7ff ffbb 	bl	8002128 <_swistat>
 80021b2:	4605      	mov	r5, r0
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7ff ff6d 	bl	8002094 <_close>
 80021ba:	462c      	mov	r4, r5
 80021bc:	4620      	mov	r0, r4
 80021be:	bd38      	pop	{r3, r4, r5, pc}

080021c0 <_swiopen>:
 80021c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c4:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8002270 <_swiopen+0xb0>
 80021c8:	b096      	sub	sp, #88	@ 0x58
 80021ca:	4607      	mov	r7, r0
 80021cc:	460e      	mov	r6, r1
 80021ce:	2400      	movs	r4, #0
 80021d0:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80021d4:	3301      	adds	r3, #1
 80021d6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80021da:	d032      	beq.n	8002242 <_swiopen+0x82>
 80021dc:	3401      	adds	r4, #1
 80021de:	2c14      	cmp	r4, #20
 80021e0:	d1f6      	bne.n	80021d0 <_swiopen+0x10>
 80021e2:	f000 f945 	bl	8002470 <__errno>
 80021e6:	2318      	movs	r3, #24
 80021e8:	e03a      	b.n	8002260 <_swiopen+0xa0>
 80021ea:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80021ee:	f240 6301 	movw	r3, #1537	@ 0x601
 80021f2:	07b2      	lsls	r2, r6, #30
 80021f4:	bf48      	it	mi
 80021f6:	f045 0502 	orrmi.w	r5, r5, #2
 80021fa:	421e      	tst	r6, r3
 80021fc:	bf18      	it	ne
 80021fe:	f045 0504 	orrne.w	r5, r5, #4
 8002202:	0733      	lsls	r3, r6, #28
 8002204:	bf48      	it	mi
 8002206:	f025 0504 	bicmi.w	r5, r5, #4
 800220a:	4638      	mov	r0, r7
 800220c:	bf48      	it	mi
 800220e:	f045 0508 	orrmi.w	r5, r5, #8
 8002212:	9700      	str	r7, [sp, #0]
 8002214:	f7fd ffdc 	bl	80001d0 <strlen>
 8002218:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800221c:	2501      	movs	r5, #1
 800221e:	4628      	mov	r0, r5
 8002220:	4651      	mov	r1, sl
 8002222:	beab      	bkpt	0x00ab
 8002224:	4605      	mov	r5, r0
 8002226:	2d00      	cmp	r5, #0
 8002228:	db06      	blt.n	8002238 <_swiopen+0x78>
 800222a:	44c8      	add	r8, r9
 800222c:	2300      	movs	r3, #0
 800222e:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8002232:	f8c8 3004 	str.w	r3, [r8, #4]
 8002236:	e016      	b.n	8002266 <_swiopen+0xa6>
 8002238:	4628      	mov	r0, r5
 800223a:	f7ff fe73 	bl	8001f24 <error>
 800223e:	4604      	mov	r4, r0
 8002240:	e011      	b.n	8002266 <_swiopen+0xa6>
 8002242:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002246:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800224a:	46ea      	mov	sl, sp
 800224c:	d1cd      	bne.n	80021ea <_swiopen+0x2a>
 800224e:	4651      	mov	r1, sl
 8002250:	4638      	mov	r0, r7
 8002252:	f7ff ff98 	bl	8002186 <_stat>
 8002256:	3001      	adds	r0, #1
 8002258:	d0c7      	beq.n	80021ea <_swiopen+0x2a>
 800225a:	f000 f909 	bl	8002470 <__errno>
 800225e:	2311      	movs	r3, #17
 8002260:	6003      	str	r3, [r0, #0]
 8002262:	f04f 34ff 	mov.w	r4, #4294967295
 8002266:	4620      	mov	r0, r4
 8002268:	b016      	add	sp, #88	@ 0x58
 800226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800226e:	bf00      	nop
 8002270:	200001e0 	.word	0x200001e0

08002274 <_get_semihosting_exts>:
 8002274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002278:	4606      	mov	r6, r0
 800227a:	460f      	mov	r7, r1
 800227c:	4829      	ldr	r0, [pc, #164]	@ (8002324 <_get_semihosting_exts+0xb0>)
 800227e:	2100      	movs	r1, #0
 8002280:	4615      	mov	r5, r2
 8002282:	f7ff ff9d 	bl	80021c0 <_swiopen>
 8002286:	462a      	mov	r2, r5
 8002288:	4604      	mov	r4, r0
 800228a:	2100      	movs	r1, #0
 800228c:	4630      	mov	r0, r6
 800228e:	f7ff f8b3 	bl	80013f8 <memset>
 8002292:	1c63      	adds	r3, r4, #1
 8002294:	d014      	beq.n	80022c0 <_get_semihosting_exts+0x4c>
 8002296:	4620      	mov	r0, r4
 8002298:	f7ff fe2a 	bl	8001ef0 <findslot>
 800229c:	f04f 080c 	mov.w	r8, #12
 80022a0:	4681      	mov	r9, r0
 80022a2:	4640      	mov	r0, r8
 80022a4:	4649      	mov	r1, r9
 80022a6:	beab      	bkpt	0x00ab
 80022a8:	4680      	mov	r8, r0
 80022aa:	4640      	mov	r0, r8
 80022ac:	f7ff fe48 	bl	8001f40 <checkerror>
 80022b0:	2803      	cmp	r0, #3
 80022b2:	dd02      	ble.n	80022ba <_get_semihosting_exts+0x46>
 80022b4:	1ec3      	subs	r3, r0, #3
 80022b6:	42ab      	cmp	r3, r5
 80022b8:	dc07      	bgt.n	80022ca <_get_semihosting_exts+0x56>
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7ff feea 	bl	8002094 <_close>
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	b003      	add	sp, #12
 80022c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022ca:	2204      	movs	r2, #4
 80022cc:	eb0d 0102 	add.w	r1, sp, r2
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fe4a 	bl	8001f6a <_read>
 80022d6:	2803      	cmp	r0, #3
 80022d8:	ddef      	ble.n	80022ba <_get_semihosting_exts+0x46>
 80022da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022de:	2b53      	cmp	r3, #83	@ 0x53
 80022e0:	d1eb      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80022e6:	2b48      	cmp	r3, #72	@ 0x48
 80022e8:	d1e7      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80022ee:	2b46      	cmp	r3, #70	@ 0x46
 80022f0:	d1e3      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022f6:	2b42      	cmp	r3, #66	@ 0x42
 80022f8:	d1df      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022fa:	2201      	movs	r2, #1
 80022fc:	4639      	mov	r1, r7
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff fe4d 	bl	8001f9e <_swilseek>
 8002304:	2800      	cmp	r0, #0
 8002306:	dbd8      	blt.n	80022ba <_get_semihosting_exts+0x46>
 8002308:	462a      	mov	r2, r5
 800230a:	4631      	mov	r1, r6
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff fe2c 	bl	8001f6a <_read>
 8002312:	4605      	mov	r5, r0
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff febd 	bl	8002094 <_close>
 800231a:	4628      	mov	r0, r5
 800231c:	f7ff fe10 	bl	8001f40 <checkerror>
 8002320:	e7d0      	b.n	80022c4 <_get_semihosting_exts+0x50>
 8002322:	bf00      	nop
 8002324:	0800259a 	.word	0x0800259a

08002328 <initialise_semihosting_exts>:
 8002328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800232a:	4d0a      	ldr	r5, [pc, #40]	@ (8002354 <initialise_semihosting_exts+0x2c>)
 800232c:	4c0a      	ldr	r4, [pc, #40]	@ (8002358 <initialise_semihosting_exts+0x30>)
 800232e:	2100      	movs	r1, #0
 8002330:	2201      	movs	r2, #1
 8002332:	a801      	add	r0, sp, #4
 8002334:	6029      	str	r1, [r5, #0]
 8002336:	6022      	str	r2, [r4, #0]
 8002338:	f7ff ff9c 	bl	8002274 <_get_semihosting_exts>
 800233c:	2800      	cmp	r0, #0
 800233e:	dd07      	ble.n	8002350 <initialise_semihosting_exts+0x28>
 8002340:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002344:	f003 0201 	and.w	r2, r3, #1
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	602a      	str	r2, [r5, #0]
 800234e:	6023      	str	r3, [r4, #0]
 8002350:	b003      	add	sp, #12
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	20000064 	.word	0x20000064
 8002358:	20000060 	.word	0x20000060

0800235c <_has_ext_stdout_stderr>:
 800235c:	b510      	push	{r4, lr}
 800235e:	4c04      	ldr	r4, [pc, #16]	@ (8002370 <_has_ext_stdout_stderr+0x14>)
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	da01      	bge.n	800236a <_has_ext_stdout_stderr+0xe>
 8002366:	f7ff ffdf 	bl	8002328 <initialise_semihosting_exts>
 800236a:	6820      	ldr	r0, [r4, #0]
 800236c:	bd10      	pop	{r4, pc}
 800236e:	bf00      	nop
 8002370:	20000060 	.word	0x20000060

08002374 <initialise_monitor_handles>:
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002378:	b085      	sub	sp, #20
 800237a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800242c <initialise_monitor_handles+0xb8>
 800237e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002382:	2303      	movs	r3, #3
 8002384:	2400      	movs	r4, #0
 8002386:	9303      	str	r3, [sp, #12]
 8002388:	af01      	add	r7, sp, #4
 800238a:	9402      	str	r4, [sp, #8]
 800238c:	2501      	movs	r5, #1
 800238e:	4628      	mov	r0, r5
 8002390:	4639      	mov	r1, r7
 8002392:	beab      	bkpt	0x00ab
 8002394:	4605      	mov	r5, r0
 8002396:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002430 <initialise_monitor_handles+0xbc>
 800239a:	4623      	mov	r3, r4
 800239c:	4c20      	ldr	r4, [pc, #128]	@ (8002420 <initialise_monitor_handles+0xac>)
 800239e:	f8c8 5000 	str.w	r5, [r8]
 80023a2:	f04f 32ff 	mov.w	r2, #4294967295
 80023a6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80023aa:	3301      	adds	r3, #1
 80023ac:	2b14      	cmp	r3, #20
 80023ae:	d1fa      	bne.n	80023a6 <initialise_monitor_handles+0x32>
 80023b0:	f7ff ffd4 	bl	800235c <_has_ext_stdout_stderr>
 80023b4:	4d1b      	ldr	r5, [pc, #108]	@ (8002424 <initialise_monitor_handles+0xb0>)
 80023b6:	b1d0      	cbz	r0, 80023ee <initialise_monitor_handles+0x7a>
 80023b8:	f04f 0a03 	mov.w	sl, #3
 80023bc:	2304      	movs	r3, #4
 80023be:	f8cd 9004 	str.w	r9, [sp, #4]
 80023c2:	2601      	movs	r6, #1
 80023c4:	f8cd a00c 	str.w	sl, [sp, #12]
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	4630      	mov	r0, r6
 80023cc:	4639      	mov	r1, r7
 80023ce:	beab      	bkpt	0x00ab
 80023d0:	4683      	mov	fp, r0
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <initialise_monitor_handles+0xb4>)
 80023d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80023d8:	f8c3 b000 	str.w	fp, [r3]
 80023dc:	2308      	movs	r3, #8
 80023de:	f8cd a00c 	str.w	sl, [sp, #12]
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	4630      	mov	r0, r6
 80023e6:	4639      	mov	r1, r7
 80023e8:	beab      	bkpt	0x00ab
 80023ea:	4606      	mov	r6, r0
 80023ec:	602e      	str	r6, [r5, #0]
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	bf02      	ittt	eq
 80023f4:	4b0c      	ldreq	r3, [pc, #48]	@ (8002428 <initialise_monitor_handles+0xb4>)
 80023f6:	681b      	ldreq	r3, [r3, #0]
 80023f8:	602b      	streq	r3, [r5, #0]
 80023fa:	2600      	movs	r6, #0
 80023fc:	f8d8 3000 	ldr.w	r3, [r8]
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	6066      	str	r6, [r4, #4]
 8002404:	f7ff ffaa 	bl	800235c <_has_ext_stdout_stderr>
 8002408:	b130      	cbz	r0, 8002418 <initialise_monitor_handles+0xa4>
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <initialise_monitor_handles+0xb4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002412:	682b      	ldr	r3, [r5, #0]
 8002414:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002418:	b005      	add	sp, #20
 800241a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800241e:	bf00      	nop
 8002420:	200001e0 	.word	0x200001e0
 8002424:	200001d4 	.word	0x200001d4
 8002428:	200001d8 	.word	0x200001d8
 800242c:	080025b0 	.word	0x080025b0
 8002430:	200001dc 	.word	0x200001dc

08002434 <_isatty>:
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	f7ff fd5b 	bl	8001ef0 <findslot>
 800243a:	2409      	movs	r4, #9
 800243c:	4605      	mov	r5, r0
 800243e:	b920      	cbnz	r0, 800244a <_isatty+0x16>
 8002440:	f000 f816 	bl	8002470 <__errno>
 8002444:	6004      	str	r4, [r0, #0]
 8002446:	2000      	movs	r0, #0
 8002448:	bd70      	pop	{r4, r5, r6, pc}
 800244a:	4620      	mov	r0, r4
 800244c:	4629      	mov	r1, r5
 800244e:	beab      	bkpt	0x00ab
 8002450:	4604      	mov	r4, r0
 8002452:	2c01      	cmp	r4, #1
 8002454:	4620      	mov	r0, r4
 8002456:	d0f7      	beq.n	8002448 <_isatty+0x14>
 8002458:	f000 f80a 	bl	8002470 <__errno>
 800245c:	2513      	movs	r5, #19
 800245e:	4604      	mov	r4, r0
 8002460:	2600      	movs	r6, #0
 8002462:	4628      	mov	r0, r5
 8002464:	4631      	mov	r1, r6
 8002466:	beab      	bkpt	0x00ab
 8002468:	4605      	mov	r5, r0
 800246a:	6025      	str	r5, [r4, #0]
 800246c:	e7eb      	b.n	8002446 <_isatty+0x12>
	...

08002470 <__errno>:
 8002470:	4b01      	ldr	r3, [pc, #4]	@ (8002478 <__errno+0x8>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c

0800247c <_init>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	bf00      	nop
 8002480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002482:	bc08      	pop	{r3}
 8002484:	469e      	mov	lr, r3
 8002486:	4770      	bx	lr

08002488 <_fini>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	bf00      	nop
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr
