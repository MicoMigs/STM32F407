/*
 * stm32f407xx.h
 *
 *  Created on: Jul 30, 2025
 *      Author: mico
 *	NOTES:
 *	What is the coding convention?
 *		- C Macros are defined with all caps
 *	How can we quickly define the different layers for the definitions?
 *		- HAL (HAL layer)
 *		- DRV (Driver layer)
 *	There are multiple layers, what are they?
 *		- low level layer
 *		- driver layers
 *		- middleware layer
 *		- etc
 *	How did you determine the addresses?
 *		- from the reference manual
 *	What are the layers of the addresses for this project?
 *	- Peripheral Base (0x4000_0000)
 *		-APB1
 *		-APB2 (0x4001 0000)
 *			-SPI1 (0x4001 3000)
 *				- Control Register 1 (Offset: 0x00)
 *				- Control Register 2 (0x04)
 *				- Status Register (0x08)
 *				- Data Register (0x0C)
 *				- CRC Polynomial Register (0x10)
 *				- RX CRC Register (0x14)
 *				- etc
 *		-AHB1 (0x4002_0000)
 *			-GPIOA (0x4002_0000)
 *				-MODE Register (0x4002_0000)
 *				-Output TYPE Register (0x4002_0004)
 *				-SPEED Register (0x4002_0008)
 *		-AHB2
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_

#include <stdint.h>

#define __vo volatile


/*
 * Memory base addresses
 */
#define FLASH_BASEADDR          0x08000000U // main memory
#define SRAM1_BASEADDR          0x20000000U // 112KB
#define SRAM2_BASEADDR          0x2001C000U // SRAM1 + 112KB
#define ROM_BASEADDR            0x1FFF0000U // system memory
#define SRAM_BASEADDR           SRAM1_BASEADDR

/*
 * Bus peripheral base addresses
 */
#define PERIPH_BASEADDR         0x40000000U
#define APB1_PERIPH_BASEADDR    PERIPH_BASEADDR
#define APB2_PERIPH_BASEADDR    0x40010000U
#define AHB1_PERIPH_BASEADDR    0x40020000U
#define AHB2_PERIPH_BASEADDR    0x50000000U

/*
 * AHB1 peripherals
 */
#define GPIOA_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x2000)
#define GPIOJ_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x2400)
#define GPIOK_BASEADDR          (AHB1_PERIPH_BASEADDR + 0x2800)

#define CRC_BASEADDR            (AHB1_PERIPH_BASEADDR + 0x3000)
#define RCC_BASEADDR            (AHB1_PERIPH_BASEADDR + 0x3800)
#define FLASH_INTERFACE_BASEADDR (AHB1_PERIPH_BASEADDR + 0x3C00)
#define BKPSRAM_BASEADDR        (AHB1_PERIPH_BASEADDR + 0x4000)
#define DMA1_BASEADDR           (AHB1_PERIPH_BASEADDR + 0x6000)
#define DMA2_BASEADDR           (AHB1_PERIPH_BASEADDR + 0x6400)
#define ETHERNET_MAC_BASEADDR   (AHB1_PERIPH_BASEADDR + 0x8000)
#define DMA2D_BASEADDR          (AHB1_PERIPH_BASEADDR + 0xB000)
#define USB_OTG_HS_BASEADDR     0x40040000U

/*
 * AHB2 peripherals
 */
#define DCMI_BASEADDR           0x50050000U
#define CRYP_BASEADDR           0x50060000U
#define HASH_BASEADDR           0x50060400U
#define RNG_BASEADDR            0x50060800U
#define USB_OTG_FS_BASEADDR     0x50000000U

/*
 * APB1 peripherals
 */
#define TIM2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0000)
#define TIM3_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0400)
#define TIM4_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0800)
#define TIM5_BASEADDR           (APB1_PERIPH_BASEADDR + 0x0C00)
#define TIM6_BASEADDR           (APB1_PERIPH_BASEADDR + 0x1000)
#define TIM7_BASEADDR           (APB1_PERIPH_BASEADDR + 0x1400)
#define TIM12_BASEADDR          (APB1_PERIPH_BASEADDR + 0x1800)
#define TIM13_BASEADDR          (APB1_PERIPH_BASEADDR + 0x1C00)
#define TIM14_BASEADDR          (APB1_PERIPH_BASEADDR + 0x2000)
#define RTC_BASEADDR            (APB1_PERIPH_BASEADDR + 0x2800)
#define WWDG_BASEADDR           (APB1_PERIPH_BASEADDR + 0x2C00)
#define IWDG_BASEADDR           (APB1_PERIPH_BASEADDR + 0x3000)
#define I2S2ext_BASEADDR        (APB1_PERIPH_BASEADDR + 0x3400)
#define SPI2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR           (APB1_PERIPH_BASEADDR + 0x3C00)
#define I2S3ext_BASEADDR        (APB1_PERIPH_BASEADDR + 0x4000)
#define USART2_BASEADDR         (APB1_PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR         (APB1_PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR          (APB1_PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR          (APB1_PERIPH_BASEADDR + 0x5000)
#define I2C1_BASEADDR           (APB1_PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR           (APB1_PERIPH_BASEADDR + 0x5C00)
#define CAN1_BASEADDR           (APB1_PERIPH_BASEADDR + 0x6400)
#define CAN2_BASEADDR           (APB1_PERIPH_BASEADDR + 0x6800)
#define PWR_BASEADDR            (APB1_PERIPH_BASEADDR + 0x7000)
#define DAC_BASEADDR            (APB1_PERIPH_BASEADDR + 0x7400)
#define UART7_BASEADDR          (APB1_PERIPH_BASEADDR + 0x7800)
#define UART8_BASEADDR          (APB1_PERIPH_BASEADDR + 0x7C00)

/*
 * APB2 peripherals
 */
#define TIM1_BASEADDR           (APB2_PERIPH_BASEADDR + 0x0000)
#define TIM8_BASEADDR           (APB2_PERIPH_BASEADDR + 0x0400)
#define USART1_BASEADDR         (APB2_PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR         (APB2_PERIPH_BASEADDR + 0x1400)
#define ADC_BASEADDR            (APB2_PERIPH_BASEADDR + 0x2000)
#define SDIO_BASEADDR           (APB2_PERIPH_BASEADDR + 0x2C00)
#define SPI1_BASEADDR           (APB2_PERIPH_BASEADDR + 0x3000)
#define SPI4_BASEADDR           (APB2_PERIPH_BASEADDR + 0x3400)
#define SYSCFG_BASEADDR         (APB2_PERIPH_BASEADDR + 0x3800)
#define EXTI_BASEADDR           (APB2_PERIPH_BASEADDR + 0x3C00)
#define TIM9_BASEADDR           (APB2_PERIPH_BASEADDR + 0x4000)
#define TIM10_BASEADDR          (APB2_PERIPH_BASEADDR + 0x4400)
#define TIM11_BASEADDR          (APB2_PERIPH_BASEADDR + 0x4800)
#define SPI5_BASEADDR           (APB2_PERIPH_BASEADDR + 0x5000)
#define SPI6_BASEADDR           (APB2_PERIPH_BASEADDR + 0x5400)
#define SAI1_BASEADDR           (APB2_PERIPH_BASEADDR + 0x5800)
#define LTDC_BASEADDR           (APB2_PERIPH_BASEADDR + 0x6800)

/*************************Peripheral register definition structure for GPIO*************************/
/*
 * note: registers of a peripheral are specific to MCU
 * 		- Example: number of registers of SPI peripheral of stm32F4x family may be different
 * 		compared to number of register of SPI peripheral of STM32Lx, etc
 * 		Check device RM
 * 		- Go directly to register map
 * 		- must give volatile
 * 			-input data register
 * 				-example, for every AHB clock cycle, input data register will update
 */
typedef struct
{
	__vo uint32_t MODER;    /*!< GPIO port mode register, Address offset: 0x00
	                             2 bits per pin:
	                             00: Input, 01: General purpose output
	                             10: Alternate function, 11: Analog */

	__vo uint32_t OTYPER;   /*!< GPIO port output type register, Address offset: 0x04
	                             1 bit per pin:
	                             0: Push-pull, 1: Open-drain.
	                             Bits 31:16 reserved. */

	__vo uint32_t OSPEEDR;  /*!< GPIO port output speed register, Address offset: 0x08
	                             2 bits per pin:
	                             00: Low speed, 01: Medium speed
	                             10: High speed, 11: Very high speed */

	__vo uint32_t PUPDR;    /*!< GPIO port pull-up/pull-down register, Address offset: 0x0C
	                             2 bits per pin:
	                             00: No pull-up/pull-down
	                             01: Pull-up, 10: Pull-down, 11: Reserved */

	__vo uint32_t IDR;      /*!< GPIO port input data register, Address offset: 0x10
	                             Bits 15:0 reflect logic levels on input pins.
	                             Bits 31:16 reserved, read as 0. */

	__vo uint32_t ODR;      /*!< GPIO port output data register, Address offset: 0x14
	                             Bits 15:0 hold output values for pins.
	                             Bits 31:16 reserved. Can be read/written. */

	__vo uint32_t BSRR;     /*!< GPIO port bit set/reset register, Address offset: 0x18
	                             Bits 0–15: BSy – set output pin y
	                             Bits 16–31: BRy – reset output pin y
	                             Setting both: BSy has priority over BRy */

	__vo uint32_t LCKR;     /*!< GPIO port configuration lock register, Address offset: 0x1C
	                             Bit 16 (LCKK): Lock key
	                             Bits 0–15 (LCKy): Lock bit y
	                             Lock sequence:
	                               1. Write 1 to LCKK with desired LCKy
	                               2. Write 0 to LCKK with same LCKy
	                               3. Write 1 to LCKK again
	                               4. Read LCKK to confirm lock (optional) */

	__vo uint32_t AFR[2];   /*!< GPIO alternate function registers, Address offsets:
	                             AFR[0] = 0x20 (AFRL): pins 0–7
	                             AFR[1] = 0x24 (AFRH): pins 8–15
	                             4 bits per pin:
	                             0000: AF0 ... 1111: AF15 */

} GPIO_RegDef_t;

/*
 * peripheral definitions (peripheral base addresses type-casted to xxx_RegDef_t)
 */







#endif /* INC_STM32F407XX_H_ */
